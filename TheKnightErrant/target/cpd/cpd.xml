<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="479" tokens="1207">
<file line="157" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<file line="157" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledRowsLayout.as"/>
<codefragment>
<![CDATA[
		public function set gap(value:Number):void
		{
			this.horizontalGap = value;
			this.verticalGap = value;
		}

		/**
		 * @private
		 */
		protected var _horizontalGap:Number = 0;

		/**
		 * The horizontal space, in pixels, between tiles.
		 */
		public function get horizontalGap():Number
		{
			return this._horizontalGap;
		}

		/**
		 * @private
		 */
		public function set horizontalGap(value:Number):void
		{
			if(this._horizontalGap == value)
			{
				return;
			}
			this._horizontalGap = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _verticalGap:Number = 0;

		/**
		 * The vertical space, in pixels, between tiles.
		 */
		public function get verticalGap():Number
		{
			return this._verticalGap;
		}

		/**
		 * @private
		 */
		public function set verticalGap(value:Number):void
		{
			if(this._verticalGap == value)
			{
				return;
			}
			this._verticalGap = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * Quickly sets all padding properties to the same value. The
		 * <code>padding</code> getter always returns the value of
		 * <code>paddingTop</code>, but the other padding values may be
		 * different.
		 */
		public function get padding():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set padding(value:Number):void
		{
			this.paddingTop = value;
			this.paddingRight = value;
			this.paddingBottom = value;
			this.paddingLeft = value;
		}

		/**
		 * @private
		 */
		protected var _paddingTop:Number = 0;

		/**
		 * The space, in pixels, above of items.
		 */
		public function get paddingTop():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set paddingTop(value:Number):void
		{
			if(this._paddingTop == value)
			{
				return;
			}
			this._paddingTop = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _paddingRight:Number = 0;

		/**
		 * The space, in pixels, to the right of the items.
		 */
		public function get paddingRight():Number
		{
			return this._paddingRight;
		}

		/**
		 * @private
		 */
		public function set paddingRight(value:Number):void
		{
			if(this._paddingRight == value)
			{
				return;
			}
			this._paddingRight = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _paddingBottom:Number = 0;

		/**
		 * The space, in pixels, below the items.
		 */
		public function get paddingBottom():Number
		{
			return this._paddingBottom;
		}

		/**
		 * @private
		 */
		public function set paddingBottom(value:Number):void
		{
			if(this._paddingBottom == value)
			{
				return;
			}
			this._paddingBottom = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _paddingLeft:Number = 0;

		/**
		 * The space, in pixels, to the left of the items.
		 */
		public function get paddingLeft():Number
		{
			return this._paddingLeft;
		}

		/**
		 * @private
		 */
		public function set paddingLeft(value:Number):void
		{
			if(this._paddingLeft == value)
			{
				return;
			}
			this._paddingLeft = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _verticalAlign:String = VERTICAL_ALIGN_TOP;

		[Inspectable(type="String",enumeration="top,middle,bottom")]
		/**
		 * If the total column height is less than the bounds, the items in the
		 * column can be aligned vertically.
		 */
		public function get verticalAlign():String
		{
			return this._verticalAlign;
		}

		/**
		 * @private
		 */
		public function set verticalAlign(value:String):void
		{
			if(this._verticalAlign == value)
			{
				return;
			}
			this._verticalAlign = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _horizontalAlign:String = HORIZONTAL_ALIGN_CENTER;

		[Inspectable(type="String",enumeration="left,center,right")]
		/**
		 * If the total row width is less than the bounds, the items in the row
		 * can be aligned horizontally.
		 */
		public function get horizontalAlign():String
		{
			return this._horizontalAlign;
		}

		/**
		 * @private
		 */
		public function set horizontalAlign(value:String):void
		{
			if(this._horizontalAlign == value)
			{
				return;
			}
			this._horizontalAlign = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _tileVerticalAlign:String = TILE_VERTICAL_ALIGN_MIDDLE;

		[Inspectable(type="String",enumeration="top,middle,bottom,justify")]
		/**
		 * If an item's height is less than the tile bounds, the position of the
		 * item can be aligned vertically.
		 */
		public function get tileVerticalAlign():String
		{
			return this._tileVerticalAlign;
		}

		/**
		 * @private
		 */
		public function set tileVerticalAlign(value:String):void
		{
			if(this._tileVerticalAlign == value)
			{
				return;
			}
			this._tileVerticalAlign = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _tileHorizontalAlign:String = TILE_HORIZONTAL_ALIGN_CENTER;

		[Inspectable(type="String",enumeration="left,center,right,justify")]
		/**
		 * If the item's width is less than the tile bounds, the position of the
		 * item can be aligned horizontally.
		 */
		public function get tileHorizontalAlign():String
		{
			return this._tileHorizontalAlign;
		}

		/**
		 * @private
		 */
		public function set tileHorizontalAlign(value:String):void
		{
			if(this._tileHorizontalAlign == value)
			{
				return;
			}
			this._tileHorizontalAlign = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _paging:String = PAGING_NONE;

		/**
		 * If the total combined height of the rows is larger than the height
		 * of the view port, the layout will be split into pages where each
		 * page is filled with the maximum number of rows that may be displayed
		 * without cutting off any items.
		 */
		public function get paging():String
		{
			return this._paging;
		}

		/**
		 * @private
		 */
		public function set paging(value:String):void
		{
			if(this._paging == value)
			{
				return;
			}
			this._paging = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _useSquareTiles:Boolean = true;

		/**
		 * Determines if the tiles must be square or if their width and height
		 * may have different values.
		 */
		public function get useSquareTiles():Boolean
		{
			return this._useSquareTiles;
		}

		/**
		 * @private
		 */
		public function set useSquareTiles(value:Boolean):void
		{
			if(this._useSquareTiles == value)
			{
				return;
			}
			this._useSquareTiles = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _useVirtualLayout:Boolean = true;

		/**
		 * @inheritDoc
		 */
		public function get useVirtualLayout():Boolean
		{
			return this._useVirtualLayout;
		}

		/**
		 * @private
		 */
		public function set useVirtualLayout(value:Boolean):void
		{
			if(this._useVirtualLayout == value)
			{
				return;
			}
			this._useVirtualLayout = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _typicalItemWidth:Number = 0;

		/**
		 * @inheritDoc
		 */
		public function get typicalItemWidth():Number
		{
			return this._typicalItemWidth;
		}

		/**
		 * @private
		 */
		public function set typicalItemWidth(value:Number):void
		{
			if(this._typicalItemWidth == value)
			{
				return;
			}
			this._typicalItemWidth = value;
		}

		/**
		 * @private
		 */
		protected var _typicalItemHeight:Number = 0;

		/**
		 * @inheritDoc
		 */
		public function get typicalItemHeight():Number
		{
			return this._typicalItemHeight;
		}

		/**
		 * @private
		 */
		public function set typicalItemHeight(value:Number):void
		{
			if(this._typicalItemHeight == value)
			{
				return;
			}
			this._typicalItemHeight = value;
		}

		/**
		 * @inheritDoc
		 */
		public function layout(items:Vector.<DisplayObject>, viewPortBounds:ViewPortBounds = null, result:LayoutBoundsResult = null):LayoutBoundsResult
		{
			const boundsX:Number = viewPortBounds ? viewPortBounds.x : 0;
			const boundsY:Number = viewPortBounds ? viewPortBounds.y : 0;
			const minWidth:Number = viewPortBounds ? viewPortBounds.minWidth : 0;
			const minHeight:Number = viewPortBounds ? viewPortBounds.minHeight : 0;
			const maxWidth:Number = viewPortBounds ? viewPortBounds.maxWidth : Number.POSITIVE_INFINITY;
			const maxHeight:Number = viewPortBounds ? viewPortBounds.maxHeight : Number.POSITIVE_INFINITY;
			const explicitWidth:Number = viewPortBounds ? viewPortBounds.explicitWidth : NaN;
			const explicitHeight:Number = viewPortBounds ? viewPortBounds.explicitHeight : NaN;

			if(!this._useSquareTiles || !this._useVirtualLayout)
			{
				this.validateItems(items);
			}
			
			this._discoveredItemsCache.length = 0;
			const itemCount:int = items.length;
			var tileWidth:Number = this._useSquareTiles ? Math.max(0, this._typicalItemWidth, this._typicalItemHeight) : this._typicalItemWidth;
			var tileHeight:Number = this._useSquareTiles ? tileWidth : this._typicalItemHeight;
			//a virtual layout assumes that all items are the same size as
			//the typical item, so we don't need to measure every item in
			//that case
			if(!this._useVirtualLayout)
			{
				for(var i:int = 0; i < itemCount; i++)
				{
					var item:DisplayObject = items[i];
					if(!item)
					{
						continue;
					}
					if(item is ILayoutDisplayObject)
					{
						var layoutItem:ILayoutDisplayObject = ILayoutDisplayObject(item);
						if(!layoutItem.includeInLayout)
						{
							continue;
						}
					}
					tileWidth = this._useSquareTiles ? Math.max(tileWidth, item.width, item.height) : Math.max(tileWidth, item.width);
					tileHeight = this._useSquareTiles ? Math.max(tileWidth, tileHeight) : Math.max(tileHeight, item.height);
				}
			}
			var availableWidth:Number = NaN;
			var availableHeight:Number = NaN;

			var horizontalTileCount:int = Math.max(1, itemCount);
]]>
</codefragment>
</duplication>
<duplication lines="392" tokens="733">
<file line="660" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="610" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<codefragment>
<![CDATA[
			this._repeatDelay = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _minimumTrackFactory:Function;

		/**
		 * A function used to generate the slider's minimum track sub-component.
		 * This can be used to change properties on the minimum track when it is first
		 * created. For instance, if you are skinning Feathers components
		 * without a theme, you might use <code>minimumTrackFactory</code> to set
		 * skins and other styles on the minimum track.
		 *
		 * <p>The function should have the following signature:</p>
		 * <pre>function():Button</pre>
		 *
		 * @see #minimumTrackProperties
		 */
		public function get minimumTrackFactory():Function
		{
			return this._minimumTrackFactory;
		}

		/**
		 * @private
		 */
		public function set minimumTrackFactory(value:Function):void
		{
			if(this._minimumTrackFactory == value)
			{
				return;
			}
			this._minimumTrackFactory = value;
			this.invalidate(INVALIDATION_FLAG_MINIMUM_TRACK_FACTORY);
		}

		/**
		 * @private
		 */
		protected var _customMinimumTrackName:String;

		/**
		 * A name to add to the slider's minimum track sub-component. Typically
		 * used by a theme to provide different skins to different sliders.
		 *
		 * @see feathers.core.FeathersControl#nameList
		 * @see #minimumTrackFactory
		 * @see #minimumTrackProperties
		 */
		public function get customMinimumTrackName():String
		{
			return this._customMinimumTrackName;
		}

		/**
		 * @private
		 */
		public function set customMinimumTrackName(value:String):void
		{
			if(this._customMinimumTrackName == value)
			{
				return;
			}
			this._customMinimumTrackName = value;
			this.invalidate(INVALIDATION_FLAG_MINIMUM_TRACK_FACTORY);
		}

		/**
		 * @private
		 */
		protected var _minimumTrackProperties:PropertyProxy;

		/**
		 * A set of key/value pairs to be passed down to the slider's minimum
		 * track sub-component. The minimum track is a
		 * <code>feathers.controls.Button</code> instance.
		 *
		 * <p>If the subcomponent has its own subcomponents, their properties
		 * can be set too, using attribute <code>&#64;</code> notation. For example,
		 * to set the skin on the thumb of a <code>SimpleScrollBar</code>
		 * which is in a <code>Scroller</code> which is in a <code>List</code>,
		 * you can use the following syntax:</p>
		 * <pre>list.scrollerProperties.&#64;verticalScrollBarProperties.&#64;thumbProperties.defaultSkin = new Image(texture);</pre>
		 * 
		 * @see feathers.controls.Button
		 */
		public function get minimumTrackProperties():Object
		{
			if(!this._minimumTrackProperties)
			{
				this._minimumTrackProperties = new PropertyProxy(minimumTrackProperties_onChange);
			}
			return this._minimumTrackProperties;
		}

		/**
		 * @private
		 */
		public function set minimumTrackProperties(value:Object):void
		{
			if(this._minimumTrackProperties == value)
			{
				return;
			}
			if(!value)
			{
				value = new PropertyProxy();
			}
			if(!(value is PropertyProxy))
			{
				const newValue:PropertyProxy = new PropertyProxy();
				for(var propertyName:String in value)
				{
					newValue[propertyName] = value[propertyName];
				}
				value = newValue;
			}
			if(this._minimumTrackProperties)
			{
				this._minimumTrackProperties.removeOnChangeCallback(minimumTrackProperties_onChange);
			}
			this._minimumTrackProperties = PropertyProxy(value);
			if(this._minimumTrackProperties)
			{
				this._minimumTrackProperties.addOnChangeCallback(minimumTrackProperties_onChange);
			}
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _maximumTrackFactory:Function;

		/**
		 * A function used to generate the slider's maximum track sub-component.
		 * This can be used to change properties on the maximum track when it is first
		 * created. For instance, if you are skinning Feathers components
		 * without a theme, you might use <code>maximumTrackFactory</code> to set
		 * skins and other styles on the maximum track.
		 *
		 * <p>The function should have the following signature:</p>
		 * <pre>function():Button</pre>
		 *
		 * @see #maximumTrackProperties
		 */
		public function get maximumTrackFactory():Function
		{
			return this._maximumTrackFactory;
		}

		/**
		 * @private
		 */
		public function set maximumTrackFactory(value:Function):void
		{
			if(this._maximumTrackFactory == value)
			{
				return;
			}
			this._maximumTrackFactory = value;
			this.invalidate(INVALIDATION_FLAG_MAXIMUM_TRACK_FACTORY);
		}

		/**
		 * @private
		 */
		protected var _customMaximumTrackName:String;

		/**
		 * A name to add to the slider's maximum track sub-component. Typically
		 * used by a theme to provide different skins to different sliders.
		 *
		 * @see feathers.core.FeathersControl#nameList
		 * @see #maximumTrackFactory
		 * @see #maximumTrackProperties
		 */
		public function get customMaximumTrackName():String
		{
			return this._customMaximumTrackName;
		}

		/**
		 * @private
		 */
		public function set customMaximumTrackName(value:String):void
		{
			if(this._customMaximumTrackName == value)
			{
				return;
			}
			this._customMaximumTrackName = value;
			this.invalidate(INVALIDATION_FLAG_MAXIMUM_TRACK_FACTORY);
		}
		
		/**
		 * @private
		 */
		protected var _maximumTrackProperties:PropertyProxy;
		
		/**
		 * A set of key/value pairs to be passed down to the slider's maximum
		 * track sub-component. The maximum track is a
		 * <code>feathers.controls.Button</code> instance.
		 *
		 * <p>If the subcomponent has its own subcomponents, their properties
		 * can be set too, using attribute <code>&#64;</code> notation. For example,
		 * to set the skin on the thumb of a <code>SimpleScrollBar</code>
		 * which is in a <code>Scroller</code> which is in a <code>List</code>,
		 * you can use the following syntax:</p>
		 * <pre>list.scrollerProperties.&#64;verticalScrollBarProperties.&#64;thumbProperties.defaultSkin = new Image(texture);</pre>
		 * 
		 * @see feathers.controls.Button
		 */
		public function get maximumTrackProperties():Object
		{
			if(!this._maximumTrackProperties)
			{
				this._maximumTrackProperties = new PropertyProxy(maximumTrackProperties_onChange);
			}
			return this._maximumTrackProperties;
		}
		
		/**
		 * @private
		 */
		public function set maximumTrackProperties(value:Object):void
		{
			if(this._maximumTrackProperties == value)
			{
				return;
			}
			if(!value)
			{
				value = new PropertyProxy();
			}
			if(!(value is PropertyProxy))
			{
				const newValue:PropertyProxy = new PropertyProxy();
				for(var propertyName:String in value)
				{
					newValue[propertyName] = value[propertyName];
				}
				value = newValue;
			}
			if(this._maximumTrackProperties)
			{
				this._maximumTrackProperties.removeOnChangeCallback(maximumTrackProperties_onChange);
			}
			this._maximumTrackProperties = PropertyProxy(value);
			if(this._maximumTrackProperties)
			{
				this._maximumTrackProperties.addOnChangeCallback(maximumTrackProperties_onChange);
			}
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _thumbFactory:Function;

		/**
		 * A function used to generate the slider's thumb sub-component.
		 * This can be used to change properties on the thumb when it is first
		 * created. For instance, if you are skinning Feathers components
		 * without a theme, you might use <code>thumbFactory</code> to set
		 * skins and text styles on the thumb.
		 *
		 * <p>The function should have the following signature:</p>
		 * <pre>function():Button</pre>
		 *
		 * @see #thumbProperties
		 */
		public function get thumbFactory():Function
		{
			return this._thumbFactory;
		}

		/**
		 * @private
		 */
		public function set thumbFactory(value:Function):void
		{
			if(this._thumbFactory == value)
			{
				return;
			}
			this._thumbFactory = value;
			this.invalidate(INVALIDATION_FLAG_THUMB_FACTORY);
		}

		/**
		 * @private
		 */
		protected var _customThumbName:String;

		/**
		 * A name to add to the slider's thumb sub-component. Typically
		 * used by a theme to provide different skins to different sliders.
		 *
		 * @see feathers.core.FeathersControl#nameList
		 * @see #thumbFactory
		 * @see #thumbProperties
		 */
		public function get customThumbName():String
		{
			return this._customThumbName;
		}

		/**
		 * @private
		 */
		public function set customThumbName(value:String):void
		{
			if(this._customThumbName == value)
			{
				return;
			}
			this._customThumbName = value;
			this.invalidate(INVALIDATION_FLAG_THUMB_FACTORY);
		}
		
		/**
		 * @private
		 */
		protected var _thumbProperties:PropertyProxy;
		
		/**
		 * A set of key/value pairs to be passed down to the slider's thumb
		 * sub-component. The thumb is a <code>feathers.controls.Button</code>
		 * instance.
		 *
		 * <p>If the subcomponent has its own subcomponents, their properties
		 * can be set too, using attribute <code>&#64;</code> notation. For example,
		 * to set the skin on the thumb of a <code>SimpleScrollBar</code>
		 * which is in a <code>Scroller</code> which is in a <code>List</code>,
		 * you can use the following syntax:</p>
		 * <pre>list.scrollerProperties.&#64;verticalScrollBarProperties.&#64;thumbProperties.defaultSkin = new Image(texture);</pre>
		 * 
		 * @see feathers.controls.Button
		 */
		public function get thumbProperties():Object
		{
			if(!this._thumbProperties)
			{
				this._thumbProperties = new PropertyProxy(thumbProperties_onChange);
			}
			return this._thumbProperties;
		}
		
		/**
		 * @private
		 */
		public function set thumbProperties(value:Object):void
		{
			if(this._thumbProperties == value)
			{
				return;
			}
			if(!value)
			{
				value = new PropertyProxy();
			}
			if(!(value is PropertyProxy))
			{
				const newValue:PropertyProxy = new PropertyProxy();
				for(var propertyName:String in value)
				{
					newValue[propertyName] = value[propertyName];
				}
				value = newValue;
			}
			if(this._thumbProperties)
			{
				this._thumbProperties.removeOnChangeCallback(thumbProperties_onChange);
			}
			this._thumbProperties = PropertyProxy(value);
			if(this._thumbProperties)
			{
				this._thumbProperties.addOnChangeCallback(thumbProperties_onChange);
			}
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _touchPointID:int = -1;
]]>
</codefragment>
</duplication>
<duplication lines="109" tokens="615">
<file line="297" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\Scale3Image.as"/>
<file line="327" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\Scale9Image.as"/>
<codefragment>
<![CDATA[
		private var _bottomRightImage:Image;
		
		/**
		 * @private
		 */
		public override function getBounds(targetSpace:DisplayObject, resultRect:Rectangle=null):Rectangle
		{
			if(!resultRect)
			{
				resultRect = new Rectangle();
			}
			
			var minX:Number = Number.MAX_VALUE, maxX:Number = -Number.MAX_VALUE;
			var minY:Number = Number.MAX_VALUE, maxY:Number = -Number.MAX_VALUE;
			
			if (targetSpace == this) // optimization
			{
				minX = this._hitArea.x;
				minY = this._hitArea.y;
				maxX = this._hitArea.x + this._hitArea.width;
				maxY = this._hitArea.y + this._hitArea.height;
			}
			else
			{
				this.getTransformationMatrix(targetSpace, HELPER_MATRIX);

				MatrixUtil.transformCoords(HELPER_MATRIX, this._hitArea.x, this._hitArea.y, HELPER_POINT);
				minX = minX < HELPER_POINT.x ? minX : HELPER_POINT.x;
				maxX = maxX > HELPER_POINT.x ? maxX : HELPER_POINT.x;
				minY = minY < HELPER_POINT.y ? minY : HELPER_POINT.y;
				maxY = maxY > HELPER_POINT.y ? maxY : HELPER_POINT.y;

				MatrixUtil.transformCoords(HELPER_MATRIX, this._hitArea.x, this._hitArea.y + this._hitArea.height, HELPER_POINT);
				minX = minX < HELPER_POINT.x ? minX : HELPER_POINT.x;
				maxX = maxX > HELPER_POINT.x ? maxX : HELPER_POINT.x;
				minY = minY < HELPER_POINT.y ? minY : HELPER_POINT.y;
				maxY = maxY > HELPER_POINT.y ? maxY : HELPER_POINT.y;

				MatrixUtil.transformCoords(HELPER_MATRIX, this._hitArea.x + this._hitArea.width, this._hitArea.y, HELPER_POINT);
				minX = minX < HELPER_POINT.x ? minX : HELPER_POINT.x;
				maxX = maxX > HELPER_POINT.x ? maxX : HELPER_POINT.x;
				minY = minY < HELPER_POINT.y ? minY : HELPER_POINT.y;
				maxY = maxY > HELPER_POINT.y ? maxY : HELPER_POINT.y;

				MatrixUtil.transformCoords(HELPER_MATRIX, this._hitArea.x + this._hitArea.width, this._hitArea.y + this._hitArea.height, HELPER_POINT);
				minX = minX < HELPER_POINT.x ? minX : HELPER_POINT.x;
				maxX = maxX > HELPER_POINT.x ? maxX : HELPER_POINT.x;
				minY = minY < HELPER_POINT.y ? minY : HELPER_POINT.y;
				maxY = maxY > HELPER_POINT.y ? maxY : HELPER_POINT.y;
			}
			
			resultRect.x = minX;
			resultRect.y = minY;
			resultRect.width  = maxX - minX;
			resultRect.height = maxY - minY;
			
			return resultRect;
		}
		
		/**
		 * @private
		 */
		override public function hitTest(localPoint:Point, forTouch:Boolean=false):DisplayObject
		{
			if(forTouch && (!this.visible || !this.touchable))
			{
				return null;
			}
			return this._hitArea.containsPoint(localPoint) ? this : null;
		}

		/**
		 * @private
		 */
		override public function flatten():void
		{
			this.validate();
			super.flatten();
		}

		/**
		 * @private
		 */
		override public function render(support:RenderSupport, parentAlpha:Number):void
		{
			this.validate();
			super.render(support, parentAlpha);
		}

		/**
		 * Readjusts the dimensions of the image according to its current
		 * textures. Call this method to synchronize image and texture size
		 * after assigning textures with a different size.
		 */
		public function readjustSize():void
		{
			this.width = this._frame.width * this._textureScale;
			this.height = this._frame.height * this._textureScale;
		}

		/**
		 * @private
		 */
		private function validate():void
		{
			this.refreshImages();
			if(this._propertiesChanged || this._layoutChanged || this._renderingChanged)
			{
				this.refreshBatch();
]]>
</codefragment>
</duplication>
<duplication lines="146" tokens="575">
<file line="90" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\GraphBoard.as"/>
<file line="49" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\jp\dip\hael\gameai\graph\GraphEx.as"/>
<codefragment>
<![CDATA[
		public function GraphEx(isDigraph:Boolean = true)
		{
			isDigraph_ = isDigraph;
			nodes_ = [];
			edges_ = [];
		}
		
		
		/**
		 * ノード追加
		 * 
		 * @param node 追加するノード
		 * @return 追加したノードのインデクス
		 */
		public function addNode(node:Node):int
		{
			var l:int = nodes_.length;
			var ind:int = node.index;
			
			// nodes_の範囲に収まっていたらそのまま代入
			if(0 <= ind && ind < l){
				nodes_[ind] = node;
				edges_[ind] = [];
			}
				// nodes_の範囲に収まっていなかったらnodes_を大きくしてpush
			else if(l <= ind){
				for(var i:int = l; i < ind; i++){
					nodes_.push(null);
					edges_.push([]);
				}
				nodes_.push(node);
				edges_.push([]);
			}
				// -1ならpush
			else{
				node.index = nodes_.length;
				nodes_.push(node);
				edges_.push([]);
			}
			
			nNodes_++;
			
			return node.index;
		}
		
		
		/**
		 * ノード削除
		 * 
		 * @param index 削除するノードのインデクス
		 */
		public function removeNode(index:int):void
		{
			if(0 <= index && index < nodes_.length){
				(nodes_[index] as Node).index = -1;
				edges_[index] = [];
				nNodes_--;
			}
		}
		
		
		/**
		 * エッジ追加
		 * 
		 * @param edge 追加するエッジ
		 * @return 追加できたか否か
		 */
		public function addEdge(edge:Edge):Boolean
		{
			var src:int = edge.src;
			// srcがnodes_の範囲に収まっていたらそのままpush
			if(0 <= src && src < nodes_.length){
				(edges_[src] as Array).push(edge);
				return true;
			}
				// 収まってなかったら失敗
			else{
				return false;
			}
		}
		
		
		/**
		 * エッジ削除
		 * 
		 * @param src 削除するエッジの始点
		 * @param dst 削除するエッジの終点
		 */
		public function removeEdge(src:int, dst:int):void
		{
			if(0 <= src && src < edges_.length){
				var e:Array = edges_[src] as Array;
				var l:int = e.length;
				for(var i:int = 0; i < l; i++){
					if((e[i] as Edge).dst == dst){
						(e[i] as Edge).src = (e[i] as Edge).dst = -1;
						break;
					}
				}
			}
		}
		/**
		 * Prints out all elements (for debug/demo purposes).
		 * 
		 * @return A human-readable representation of the structure.
		 */	
		public function dump():String
		{
			var s:String = "GraphEx\n{";
			s += "\n"+"nNodes:"+this.nNodes();
			for(var i:int=0;i<this.size();i++)
			{
				if( (this.edges_[i] as Array).length>0 )
				{
					s += "\n"+"\t"+"edge["+i+"]:{";
					for(var j:int=0;j<(this.edges_[i] as Array).length;j++)
					{
						s += "\n"+"\t"+"\t"+"edges["+j+"]:"+(this.edges_[i] as Array)[j].dump();
					}
					s += "\n"+"\t"+"}";
				}else
				{
					s += "\n"+"\t"+"edge["+i+"]:"+this.edges_[i];
				}
			}
			
			s += "\n"+"}";
			return s;
		}
		//to be fixed..
		public function clear():void
		{
			for(var k:int=0;k<this.nNodes();k++)
			{
				this.removeNode( k );
			}
			for(var i:int=0;i<this.nNodes();i++)
			{
				for(var j:int=0;j<this.nNodes();j++)
				{
					this.removeEdge( i,j);
				}
			}
			nodes_ = [];
			edges_ = [];
			trace("GraphEx after clear:",dump());
]]>
</codefragment>
</duplication>
<duplication lines="292" tokens="557">
<file line="341" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="187" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\SimpleScrollBar.as"/>
<codefragment>
<![CDATA[
				newValue = clamp(newValue, this._minimum, this._maximum);
			}
			if(this._value == newValue)
			{
				return;
			}
			this._value = newValue;
			this.invalidate(INVALIDATION_FLAG_DATA);
			if(this.liveDragging || !this.isDragging)
			{
				this.dispatchEventWith(Event.CHANGE);
			}
		}

		/**
		 * @private
		 */
		protected var _minimum:Number = 0;

		/**
		 * @inheritDoc
		 */
		public function get minimum():Number
		{
			return this._minimum;
		}

		/**
		 * @private
		 */
		public function set minimum(value:Number):void
		{
			if(this._minimum == value)
			{
				return;
			}
			this._minimum = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
		}

		/**
		 * @private
		 */
		protected var _maximum:Number = 0;

		/**
		 * @inheritDoc
		 */
		public function get maximum():Number
		{
			return this._maximum;
		}

		/**
		 * @private
		 */
		public function set maximum(value:Number):void
		{
			if(this._maximum == value)
			{
				return;
			}
			this._maximum = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
		}

		/**
		 * @private
		 */
		protected var _step:Number = 0;

		/**
		 * @inheritDoc
		 */
		public function get step():Number
		{
			return this._step;
		}

		/**
		 * @private
		 */
		public function set step(value:Number):void
		{
			this._step = value;
		}

		/**
		 * @private
		 */
		protected var _page:Number = 0;

		/**
		 * @inheritDoc
		 */
		public function get page():Number
		{
			return this._page;
		}

		/**
		 * @private
		 */
		public function set page(value:Number):void
		{
			if(this._page == value)
			{
				return;
			}
			this._page = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
		}

		/**
		 * Quickly sets all padding properties to the same value. The
		 * <code>padding</code> getter always returns the value of
		 * <code>paddingTop</code>, but the other padding values may be
		 * different.
		 */
		public function get padding():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set padding(value:Number):void
		{
			this.paddingTop = value;
			this.paddingRight = value;
			this.paddingBottom = value;
			this.paddingLeft = value;
		}

		/**
		 * @private
		 */
		protected var _paddingTop:Number = 0;

		/**
		 * The minimum space, in pixels, above the thumb.
		 */
		public function get paddingTop():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set paddingTop(value:Number):void
		{
			if(this._paddingTop == value)
			{
				return;
			}
			this._paddingTop = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingRight:Number = 0;

		/**
		 * The minimum space, in pixels, to the right of the thumb.
		 */
		public function get paddingRight():Number
		{
			return this._paddingRight;
		}

		/**
		 * @private
		 */
		public function set paddingRight(value:Number):void
		{
			if(this._paddingRight == value)
			{
				return;
			}
			this._paddingRight = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingBottom:Number = 0;

		/**
		 * The minimum space, in pixels, below the thumb.
		 */
		public function get paddingBottom():Number
		{
			return this._paddingBottom;
		}

		/**
		 * @private
		 */
		public function set paddingBottom(value:Number):void
		{
			if(this._paddingBottom == value)
			{
				return;
			}
			this._paddingBottom = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingLeft:Number = 0;

		/**
		 * The minimum space, in pixels, to the left of the thumb.
		 */
		public function get paddingLeft():Number
		{
			return this._paddingLeft;
		}

		/**
		 * @private
		 */
		public function set paddingLeft(value:Number):void
		{
			if(this._paddingLeft == value)
			{
				return;
			}
			this._paddingLeft = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var currentRepeatAction:Function;

		/**
		 * @private
		 */
		protected var _repeatTimer:Timer;

		/**
		 * @private
		 */
		protected var _repeatDelay:Number = 0.05;

		/**
		 * The time, in seconds, before actions are repeated. The first repeat
		 * happens after a delay that is five times longer than the following
		 * repeats.
		 */
		public function get repeatDelay():Number
		{
			return this._repeatDelay;
		}

		/**
		 * @private
		 */
		public function set repeatDelay(value:Number):void
		{
			if(this._repeatDelay == value)
			{
				return;
			}
			this._repeatDelay = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var isDragging:Boolean = false;

		/**
		 * Determines if the scroll bar dispatches the <code>Event.CHANGE</code>
		 * event every time the thumb moves, or only once it stops moving.
		 */
		public var liveDragging:Boolean = true;

		/**
		 * @private
		 */
		protected var _thumbFactory:Function;
]]>
</codefragment>
</duplication>
<duplication lines="303" tokens="553">
<file line="210" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollText.as"/>
<file line="161" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\TextFieldViewPort.as"/>
<codefragment>
<![CDATA[
		private var _embedFonts:Boolean = false;

		/**
		 * Determines if the TextField should use an embedded font or not.
		 *
		 * @see flash.text.TextField#embedFonts
		 */
		public function get embedFonts():Boolean
		{
			return this._embedFonts;
		}

		/**
		 * @private
		 */
		public function set embedFonts(value:Boolean):void
		{
			if(this._embedFonts == value)
			{
				return;
			}
			this._embedFonts = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		private var _antiAliasType:String = AntiAliasType.ADVANCED;

		/**
		 * Same as the TextField property with the same name.
		 *
		 * @see flash.text.TextField#antiAliasType
		 */
		public function get antiAliasType():String
		{
			return this._antiAliasType;
		}

		/**
		 * @private
		 */
		public function set antiAliasType(value:String):void
		{
			if(this._antiAliasType == value)
			{
				return;
			}
			this._antiAliasType = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		private var _background:Boolean = false;

		/**
		 * Same as the TextField property with the same name.
		 *
		 * @see flash.text.TextField#background
		 */
		public function get background():Boolean
		{
			return this._background;
		}

		/**
		 * @private
		 */
		public function set background(value:Boolean):void
		{
			if(this._background == value)
			{
				return;
			}
			this._background = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		private var _backgroundColor:uint = 0xffffff;

		/**
		 * Same as the TextField property with the same name.
		 *
		 * @see flash.text.TextField#backgroundColor
		 */
		public function get backgroundColor():uint
		{
			return this._backgroundColor;
		}

		/**
		 * @private
		 */
		public function set backgroundColor(value:uint):void
		{
			if(this._backgroundColor == value)
			{
				return;
			}
			this._backgroundColor = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		private var _border:Boolean = false;

		/**
		 * Same as the TextField property with the same name.
		 *
		 * @see flash.text.TextField#border
		 */
		public function get border():Boolean
		{
			return this._border;
		}

		/**
		 * @private
		 */
		public function set border(value:Boolean):void
		{
			if(this._border == value)
			{
				return;
			}
			this._border = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		private var _borderColor:uint = 0x000000;

		/**
		 * Same as the TextField property with the same name.
		 *
		 * @see flash.text.TextField#borderColor
		 */
		public function get borderColor():uint
		{
			return this._borderColor;
		}

		/**
		 * @private
		 */
		public function set borderColor(value:uint):void
		{
			if(this._borderColor == value)
			{
				return;
			}
			this._borderColor = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		private var _condenseWhite:Boolean = false;

		/**
		 * Same as the TextField property with the same name.
		 *
		 * @see flash.text.TextField#condenseWhite
		 */
		public function get condenseWhite():Boolean
		{
			return this._condenseWhite;
		}

		/**
		 * @private
		 */
		public function set condenseWhite(value:Boolean):void
		{
			if(this._condenseWhite == value)
			{
				return;
			}
			this._condenseWhite = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		private var _displayAsPassword:Boolean = false;

		/**
		 * Same as the TextField property with the same name.
		 *
		 * @see flash.text.TextField#displayAsPassword
		 */
		public function get displayAsPassword():Boolean
		{
			return this._displayAsPassword;
		}

		/**
		 * @private
		 */
		public function set displayAsPassword(value:Boolean):void
		{
			if(this._displayAsPassword == value)
			{
				return;
			}
			this._displayAsPassword = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		private var _gridFitType:String = GridFitType.PIXEL;

		/**
		 * Same as the TextField property with the same name.
		 *
		 * @see flash.text.TextField#gridFitType
		 */
		public function get gridFitType():String
		{
			return this._gridFitType;
		}

		/**
		 * @private
		 */
		public function set gridFitType(value:String):void
		{
			if(this._gridFitType == value)
			{
				return;
			}
			this._gridFitType = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		private var _sharpness:Number = 0;

		/**
		 * Same as the TextField property with the same name.
		 *
		 * @see flash.text.TextField#sharpness
		 */
		public function get sharpness():Number
		{
			return this._sharpness;
		}

		/**
		 * @private
		 */
		public function set sharpness(value:Number):void
		{
			if(this._sharpness == value)
			{
				return;
			}
			this._sharpness = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
		}

		/**
		 * @private
		 */
		private var _thickness:Number = 0;

		/**
		 * Same as the TextField property with the same name.
		 *
		 * @see flash.text.TextField#thickness
		 */
		public function get thickness():Number
		{
			return this._thickness;
		}

		/**
		 * @private
		 */
		public function set thickness(value:Number):void
		{
			if(this._thickness == value)
			{
				return;
			}
			this._thickness = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
]]>
</codefragment>
</duplication>
<duplication lines="275" tokens="504">
<file line="236" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollText.as"/>
<file line="302" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\TextFieldTextRenderer.as"/>
<codefragment>
<![CDATA[
		private var _antiAliasType:String = AntiAliasType.ADVANCED;

		/**
		 * Same as the TextField property with the same name.
		 *
		 * @see flash.text.TextField#antiAliasType
		 */
		public function get antiAliasType():String
		{
			return this._antiAliasType;
		}

		/**
		 * @private
		 */
		public function set antiAliasType(value:String):void
		{
			if(this._antiAliasType == value)
			{
				return;
			}
			this._antiAliasType = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		private var _background:Boolean = false;

		/**
		 * Same as the TextField property with the same name.
		 *
		 * @see flash.text.TextField#background
		 */
		public function get background():Boolean
		{
			return this._background;
		}

		/**
		 * @private
		 */
		public function set background(value:Boolean):void
		{
			if(this._background == value)
			{
				return;
			}
			this._background = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		private var _backgroundColor:uint = 0xffffff;

		/**
		 * Same as the TextField property with the same name.
		 *
		 * @see flash.text.TextField#backgroundColor
		 */
		public function get backgroundColor():uint
		{
			return this._backgroundColor;
		}

		/**
		 * @private
		 */
		public function set backgroundColor(value:uint):void
		{
			if(this._backgroundColor == value)
			{
				return;
			}
			this._backgroundColor = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		private var _border:Boolean = false;

		/**
		 * Same as the TextField property with the same name.
		 *
		 * @see flash.text.TextField#border
		 */
		public function get border():Boolean
		{
			return this._border;
		}

		/**
		 * @private
		 */
		public function set border(value:Boolean):void
		{
			if(this._border == value)
			{
				return;
			}
			this._border = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		private var _borderColor:uint = 0x000000;

		/**
		 * Same as the TextField property with the same name.
		 *
		 * @see flash.text.TextField#borderColor
		 */
		public function get borderColor():uint
		{
			return this._borderColor;
		}

		/**
		 * @private
		 */
		public function set borderColor(value:uint):void
		{
			if(this._borderColor == value)
			{
				return;
			}
			this._borderColor = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		private var _condenseWhite:Boolean = false;

		/**
		 * Same as the TextField property with the same name.
		 *
		 * @see flash.text.TextField#condenseWhite
		 */
		public function get condenseWhite():Boolean
		{
			return this._condenseWhite;
		}

		/**
		 * @private
		 */
		public function set condenseWhite(value:Boolean):void
		{
			if(this._condenseWhite == value)
			{
				return;
			}
			this._condenseWhite = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		private var _displayAsPassword:Boolean = false;

		/**
		 * Same as the TextField property with the same name.
		 *
		 * @see flash.text.TextField#displayAsPassword
		 */
		public function get displayAsPassword():Boolean
		{
			return this._displayAsPassword;
		}

		/**
		 * @private
		 */
		public function set displayAsPassword(value:Boolean):void
		{
			if(this._displayAsPassword == value)
			{
				return;
			}
			this._displayAsPassword = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		private var _gridFitType:String = GridFitType.PIXEL;

		/**
		 * Same as the TextField property with the same name.
		 *
		 * @see flash.text.TextField#gridFitType
		 */
		public function get gridFitType():String
		{
			return this._gridFitType;
		}

		/**
		 * @private
		 */
		public function set gridFitType(value:String):void
		{
			if(this._gridFitType == value)
			{
				return;
			}
			this._gridFitType = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		private var _sharpness:Number = 0;

		/**
		 * Same as the TextField property with the same name.
		 *
		 * @see flash.text.TextField#sharpness
		 */
		public function get sharpness():Number
		{
			return this._sharpness;
		}

		/**
		 * @private
		 */
		public function set sharpness(value:Number):void
		{
			if(this._sharpness == value)
			{
				return;
			}
			this._sharpness = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
		}

		/**
		 * @private
		 */
		private var _thickness:Number = 0;

		/**
		 * Same as the TextField property with the same name.
		 *
		 * @see flash.text.TextField#thickness
		 */
		public function get thickness():Number
		{
			return this._thickness;
		}

		/**
		 * @private
		 */
		public function set thickness(value:Number):void
		{
			if(this._thickness == value)
			{
				return;
			}
			this._thickness = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
]]>
</codefragment>
</duplication>
<duplication lines="64" tokens="503">
<file line="302" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\Scale3Image.as"/>
<file line="242" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\TiledImage.as"/>
<codefragment>
<![CDATA[
		public override function getBounds(targetSpace:DisplayObject, resultRect:Rectangle=null):Rectangle
		{
			if(!resultRect)
			{
				resultRect = new Rectangle();
			}
			
			var minX:Number = Number.MAX_VALUE, maxX:Number = -Number.MAX_VALUE;
			var minY:Number = Number.MAX_VALUE, maxY:Number = -Number.MAX_VALUE;
			
			if (targetSpace == this) // optimization
			{
				minX = this._hitArea.x;
				minY = this._hitArea.y;
				maxX = this._hitArea.x + this._hitArea.width;
				maxY = this._hitArea.y + this._hitArea.height;
			}
			else
			{
				this.getTransformationMatrix(targetSpace, HELPER_MATRIX);

				MatrixUtil.transformCoords(HELPER_MATRIX, this._hitArea.x, this._hitArea.y, HELPER_POINT);
				minX = minX < HELPER_POINT.x ? minX : HELPER_POINT.x;
				maxX = maxX > HELPER_POINT.x ? maxX : HELPER_POINT.x;
				minY = minY < HELPER_POINT.y ? minY : HELPER_POINT.y;
				maxY = maxY > HELPER_POINT.y ? maxY : HELPER_POINT.y;

				MatrixUtil.transformCoords(HELPER_MATRIX, this._hitArea.x, this._hitArea.y + this._hitArea.height, HELPER_POINT);
				minX = minX < HELPER_POINT.x ? minX : HELPER_POINT.x;
				maxX = maxX > HELPER_POINT.x ? maxX : HELPER_POINT.x;
				minY = minY < HELPER_POINT.y ? minY : HELPER_POINT.y;
				maxY = maxY > HELPER_POINT.y ? maxY : HELPER_POINT.y;

				MatrixUtil.transformCoords(HELPER_MATRIX, this._hitArea.x + this._hitArea.width, this._hitArea.y, HELPER_POINT);
				minX = minX < HELPER_POINT.x ? minX : HELPER_POINT.x;
				maxX = maxX > HELPER_POINT.x ? maxX : HELPER_POINT.x;
				minY = minY < HELPER_POINT.y ? minY : HELPER_POINT.y;
				maxY = maxY > HELPER_POINT.y ? maxY : HELPER_POINT.y;

				MatrixUtil.transformCoords(HELPER_MATRIX, this._hitArea.x + this._hitArea.width, this._hitArea.y + this._hitArea.height, HELPER_POINT);
				minX = minX < HELPER_POINT.x ? minX : HELPER_POINT.x;
				maxX = maxX > HELPER_POINT.x ? maxX : HELPER_POINT.x;
				minY = minY < HELPER_POINT.y ? minY : HELPER_POINT.y;
				maxY = maxY > HELPER_POINT.y ? maxY : HELPER_POINT.y;
			}
			
			resultRect.x = minX;
			resultRect.y = minY;
			resultRect.width  = maxX - minX;
			resultRect.height = maxY - minY;
			
			return resultRect;
		}
		
		/**
		 * @private
		 */
		override public function hitTest(localPoint:Point, forTouch:Boolean=false):DisplayObject
		{
			if(forTouch && (!this.visible || !this.touchable))
			{
				return null;
			}
			return this._hitArea.containsPoint(localPoint) ? this : null;
]]>
</codefragment>
</duplication>
<duplication lines="218" tokens="470">
<file line="1104" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Scroller.as"/>
<file line="742" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\renderers\DefaultGroupedListHeaderOrFooterRenderer.as"/>
<codefragment>
<![CDATA[
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var originalBackgroundWidth:Number = NaN;

		/**
		 * @private
		 */
		protected var originalBackgroundHeight:Number = NaN;

		/**
		 * @private
		 */
		protected var currentBackgroundSkin:DisplayObject;

		/**
		 * @private
		 */
		protected var _backgroundSkin:DisplayObject;

		/**
		 * A background to behind the component's content.
		 */
		public function get backgroundSkin():DisplayObject
		{
			return this._backgroundSkin;
		}

		/**
		 * @private
		 */
		public function set backgroundSkin(value:DisplayObject):void
		{
			if(this._backgroundSkin == value)
			{
				return;
			}

			if(this._backgroundSkin && this._backgroundSkin != this._backgroundDisabledSkin)
			{
				this.removeChild(this._backgroundSkin);
			}
			this._backgroundSkin = value;
			if(this._backgroundSkin && this._backgroundSkin.parent != this)
			{
				this._backgroundSkin.visible = false;
				this.addChildAt(this._backgroundSkin, 0);
			}
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _backgroundDisabledSkin:DisplayObject;

		/**
		 * A background to display when the component is disabled.
		 */
		public function get backgroundDisabledSkin():DisplayObject
		{
			return this._backgroundDisabledSkin;
		}

		/**
		 * @private
		 */
		public function set backgroundDisabledSkin(value:DisplayObject):void
		{
			if(this._backgroundDisabledSkin == value)
			{
				return;
			}

			if(this._backgroundDisabledSkin && this._backgroundDisabledSkin != this._backgroundSkin)
			{
				this.removeChild(this._backgroundDisabledSkin);
			}
			this._backgroundDisabledSkin = value;
			if(this._backgroundDisabledSkin && this._backgroundDisabledSkin.parent != this)
			{
				this._backgroundDisabledSkin.visible = false;
				this.addChildAt(this._backgroundDisabledSkin, 0);
			}
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * Quickly sets all padding properties to the same value. The
		 * <code>padding</code> getter always returns the value of
		 * <code>paddingTop</code>, but the other padding values may be
		 * different.
		 */
		public function get padding():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set padding(value:Number):void
		{
			this.paddingTop = value;
			this.paddingRight = value;
			this.paddingBottom = value;
			this.paddingLeft = value;
		}

		/**
		 * @private
		 */
		protected var _paddingTop:Number = 0;

		/**
		 * The minimum space, in pixels, between the component's top edge and
		 * the component's content.
		 */
		public function get paddingTop():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set paddingTop(value:Number):void
		{
			if(this._paddingTop == value)
			{
				return;
			}
			this._paddingTop = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingRight:Number = 0;

		/**
		 * The minimum space, in pixels, between the component's right edge
		 * and the component's content.
		 */
		public function get paddingRight():Number
		{
			return this._paddingRight;
		}

		/**
		 * @private
		 */
		public function set paddingRight(value:Number):void
		{
			if(this._paddingRight == value)
			{
				return;
			}
			this._paddingRight = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingBottom:Number = 0;

		/**
		 * The minimum space, in pixels, between the component's bottom edge
		 * and the component's content.
		 */
		public function get paddingBottom():Number
		{
			return this._paddingBottom;
		}

		/**
		 * @private
		 */
		public function set paddingBottom(value:Number):void
		{
			if(this._paddingBottom == value)
			{
				return;
			}
			this._paddingBottom = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingLeft:Number = 0;

		/**
		 * The minimum space, in pixels, between the component's left edge
		 * and the component's content.
		 */
		public function get paddingLeft():Number
		{
			return this._paddingLeft;
		}

		/**
		 * @private
		 */
		public function set paddingLeft(value:Number):void
		{
			if(this._paddingLeft == value)
			{
				return;
			}
			this._paddingLeft = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
]]>
</codefragment>
</duplication>
<duplication lines="80" tokens="446">
<file line="22" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\starling\core\TouchMarker.as"/>
<file line="23" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\starling\events\TouchMarker.as"/>
<codefragment>
<![CDATA[
    internal class TouchMarker extends Sprite
    {
        private var mCenter:Point;
        private var mTexture:Texture;
        
        public function TouchMarker()
        {
            mCenter = new Point();
            mTexture = createTexture();
            
            for (var i:int=0; i<2; ++i)
            {
                var marker:Image = new Image(mTexture);
                marker.pivotX = mTexture.width / 2;
                marker.pivotY = mTexture.height / 2;
                marker.touchable = false;
                addChild(marker);
            }
        }
        
        public override function dispose():void
        {
            mTexture.dispose();
            super.dispose();
        }
        
        public function moveMarker(x:Number, y:Number, withCenter:Boolean=false):void
        {
            if (withCenter)
            {
                mCenter.x += x - realMarker.x;
                mCenter.y += y - realMarker.y;
            }
            
            realMarker.x = x;
            realMarker.y = y;
            mockMarker.x = 2*mCenter.x - x;
            mockMarker.y = 2*mCenter.y - y;
        }
        
        public function moveCenter(x:Number, y:Number):void
        {
            mCenter.x = x;
            mCenter.y = y;
            moveMarker(realX, realY); // reset mock position
        }
        
        private function createTexture():Texture
        {
            var scale:Number = Starling.contentScaleFactor;
            var radius:Number = 12 * scale;
            var width:int = 32 * scale;
            var height:int = 32 * scale;
            var thickness:Number = 1.5 * scale;
            var shape:Shape = new Shape();
            
            // draw dark outline
            shape.graphics.lineStyle(thickness, 0x0, 0.3);
            shape.graphics.drawCircle(width/2, height/2, radius + thickness);
            
            // draw white inner circle
            shape.graphics.beginFill(0xffffff, 0.4);
            shape.graphics.lineStyle(thickness, 0xffffff);
            shape.graphics.drawCircle(width/2, height/2, radius);
            shape.graphics.endFill();
            
            var bmpData:BitmapData = new BitmapData(width, height, true, 0x0);
            bmpData.draw(shape);
            
            return Texture.fromBitmapData(bmpData, false, false, scale);
        }
        
        private function get realMarker():Image { return getChildAt(0) as Image; }
        private function get mockMarker():Image { return getChildAt(1) as Image; }
        
        public function get realX():Number { return realMarker.x; }
        public function get realY():Number { return realMarker.y; }
        
        public function get mockX():Number { return mockMarker.x; }
        public function get mockY():Number { return mockMarker.y; }
]]>
</codefragment>
</duplication>
<duplication lines="119" tokens="385">
<file line="38" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\LayoutViewPort.as"/>
<file line="463" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\TextFieldViewPort.as"/>
<codefragment>
<![CDATA[
			this.invalidate(INVALIDATION_FLAG_DATA);
		}

		private var _minVisibleWidth:Number = 0;

		public function get minVisibleWidth():Number
		{
			return this._minVisibleWidth;
		}

		public function set minVisibleWidth(value:Number):void
		{
			if(this._minVisibleWidth == value)
			{
				return;
			}
			if(isNaN(value))
			{
				throw new ArgumentError("minVisibleWidth cannot be NaN");
			}
			this._minVisibleWidth = value;
			this.invalidate(INVALIDATION_FLAG_SIZE);
		}

		private var _maxVisibleWidth:Number = Number.POSITIVE_INFINITY;

		public function get maxVisibleWidth():Number
		{
			return this._maxVisibleWidth;
		}

		public function set maxVisibleWidth(value:Number):void
		{
			if(this._maxVisibleWidth == value)
			{
				return;
			}
			if(isNaN(value))
			{
				throw new ArgumentError("maxVisibleWidth cannot be NaN");
			}
			this._maxVisibleWidth = value;
			this.invalidate(INVALIDATION_FLAG_SIZE);
		}

		private var _visibleWidth:Number = NaN;

		public function get visibleWidth():Number
		{
			return this._visibleWidth;
		}

		public function set visibleWidth(value:Number):void
		{
			if(this._visibleWidth == value || (isNaN(value) && isNaN(this._visibleWidth)))
			{
				return;
			}
			this._visibleWidth = value;
			this.invalidate(INVALIDATION_FLAG_SIZE);
		}

		private var _minVisibleHeight:Number = 0;

		public function get minVisibleHeight():Number
		{
			return this._minVisibleHeight;
		}

		public function set minVisibleHeight(value:Number):void
		{
			if(this._minVisibleHeight == value)
			{
				return;
			}
			if(isNaN(value))
			{
				throw new ArgumentError("minVisibleHeight cannot be NaN");
			}
			this._minVisibleHeight = value;
			this.invalidate(INVALIDATION_FLAG_SIZE);
		}

		private var _maxVisibleHeight:Number = Number.POSITIVE_INFINITY;

		public function get maxVisibleHeight():Number
		{
			return this._maxVisibleHeight;
		}

		public function set maxVisibleHeight(value:Number):void
		{
			if(this._maxVisibleHeight == value)
			{
				return;
			}
			if(isNaN(value))
			{
				throw new ArgumentError("maxVisibleHeight cannot be NaN");
			}
			this._maxVisibleHeight = value;
			this.invalidate(INVALIDATION_FLAG_SIZE);
		}

		private var _visibleHeight:Number = NaN;

		public function get visibleHeight():Number
		{
			return this._visibleHeight;
		}

		public function set visibleHeight(value:Number):void
		{
			if(this._visibleHeight == value || (isNaN(value) && isNaN(this._visibleHeight)))
			{
				return;
			}
			this._visibleHeight = value;
			this.invalidate(INVALIDATION_FLAG_SIZE);
]]>
</codefragment>
</duplication>
<duplication lines="71" tokens="381">
<file line="798" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<file line="796" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledRowsLayout.as"/>
<codefragment>
<![CDATA[
				else if(this._paging == PAGING_VERTICAL)
				{
					totalHeight = Math.ceil(itemCount / perPage) * availableHeight;
				}
			}
			if(isNaN(availableWidth))
			{
				availableWidth = totalWidth;
			}
			if(isNaN(availableHeight))
			{
				availableHeight = totalHeight;
			}
			availableWidth = Math.max(minWidth, availableWidth);
			availableHeight = Math.max(minHeight, availableHeight);

			if(this._paging == PAGING_NONE)
			{
				discoveredItems = this._useVirtualLayout ? this._discoveredItemsCache : items;
				discoveredItemsLastIndex = discoveredItems.length - 1;
				this.applyHorizontalAlign(discoveredItems, 0, discoveredItemsLastIndex, totalWidth, availableWidth);
				this.applyVerticalAlign(discoveredItems, 0, discoveredItemsLastIndex, totalHeight, availableHeight);
			}
			this._discoveredItemsCache.length = 0;

			if(!result)
			{
				result = new LayoutBoundsResult();
			}
			result.contentWidth = totalWidth;
			result.contentHeight = totalHeight;
			result.viewPortWidth = availableWidth;
			result.viewPortHeight = availableHeight;

			return result;
		}

		/**
		 * @inheritDoc
		 */
		public function measureViewPort(itemCount:int, viewPortBounds:ViewPortBounds = null, result:Point = null):Point
		{
			if(!result)
			{
				result = new Point();
			}
			const explicitWidth:Number = viewPortBounds ? viewPortBounds.explicitWidth : NaN;
			const explicitHeight:Number = viewPortBounds ? viewPortBounds.explicitHeight : NaN;
			const needsWidth:Boolean = isNaN(explicitWidth);
			const needsHeight:Boolean = isNaN(explicitHeight);
			if(!needsWidth && !needsHeight)
			{
				result.x = explicitWidth;
				result.y = explicitHeight;
				return result;
			}

			const boundsX:Number = viewPortBounds ? viewPortBounds.x : 0;
			const boundsY:Number = viewPortBounds ? viewPortBounds.y : 0;
			const minWidth:Number = viewPortBounds ? viewPortBounds.minWidth : 0;
			const minHeight:Number = viewPortBounds ? viewPortBounds.minHeight : 0;
			const maxWidth:Number = viewPortBounds ? viewPortBounds.maxWidth : Number.POSITIVE_INFINITY;
			const maxHeight:Number = viewPortBounds ? viewPortBounds.maxHeight : Number.POSITIVE_INFINITY;

			const tileWidth:Number = this._useSquareTiles ? Math.max(0, this._typicalItemWidth, this._typicalItemHeight) : this._typicalItemWidth;
			const tileHeight:Number = this._useSquareTiles ? tileWidth : this._typicalItemHeight;

			var availableWidth:Number = NaN;
			var availableHeight:Number = NaN;

			var horizontalTileCount:int = Math.max(1, itemCount);
]]>
</codefragment>
</duplication>
<duplication lines="78" tokens="375">
<file line="1508" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="1169" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<codefragment>
<![CDATA[
			return this.setSizeInternal(newWidth, newHeight, false);
		}

		/**
		 * @private
		 */
		protected function createThumb():void
		{
			if(this.thumb)
			{
				this.thumb.removeFromParent(true);
				this.thumb = null;
			}

			const factory:Function = this._thumbFactory != null ? this._thumbFactory : defaultThumbFactory;
			const thumbName:String = this._customThumbName != null ? this._customThumbName : this.thumbName;
			this.thumb = Button(factory());
			this.thumb.nameList.add(thumbName);
			this.thumb.keepDownStateOnRollOut = true;
			this.thumb.addEventListener(TouchEvent.TOUCH, thumb_touchHandler);
			this.addChild(this.thumb);
		}

		/**
		 * @private
		 */
		protected function createMinimumTrack():void
		{
			if(this.minimumTrack)
			{
				this.minimumTrack.removeFromParent(true);
				this.minimumTrack = null;
			}

			const factory:Function = this._minimumTrackFactory != null ? this._minimumTrackFactory : defaultMinimumTrackFactory;
			const minimumTrackName:String = this._customMinimumTrackName != null ? this._customMinimumTrackName : this.minimumTrackName;
			this.minimumTrack = Button(factory());
			this.minimumTrack.nameList.add(minimumTrackName);
			this.minimumTrack.keepDownStateOnRollOut = true;
			this.minimumTrack.addEventListener(TouchEvent.TOUCH, track_touchHandler);
			this.addChildAt(this.minimumTrack, 0);
		}

		/**
		 * @private
		 */
		protected function createOrDestroyMaximumTrackIfNeeded(maximumTrackFactoryInvalid:Boolean):void
		{
			if(this._trackLayoutMode == TRACK_LAYOUT_MODE_MIN_MAX)
			{
				if(!maximumTrackFactoryInvalid)
				{
					return;
				}
				if(this.maximumTrack)
				{
					this.maximumTrack.removeFromParent(true);
					this.maximumTrack = null;
				}
				const factory:Function = this._maximumTrackFactory != null ? this._maximumTrackFactory : defaultMaximumTrackFactory;
				const maximumTrackName:String = this._customMaximumTrackName != null ? this._customMaximumTrackName : this.maximumTrackName;
				this.maximumTrack = Button(factory());
				this.maximumTrack.nameList.add(maximumTrackName);
				this.maximumTrack.keepDownStateOnRollOut = true;
				this.maximumTrack.addEventListener(TouchEvent.TOUCH, track_touchHandler);
				this.addChildAt(this.maximumTrack, 1);
			}
			else if(this.maximumTrack) //single
			{
				this.maximumTrack.removeFromParent(true);
				this.maximumTrack = null;
			}
		}
		
		/**
		 * @private
		 */
		protected function refreshThumbStyles():void
]]>
</codefragment>
</duplication>
<duplication lines="185" tokens="360">
<file line="103" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\Scale3Image.as"/>
<file line="103" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\Scale9Image.as"/>
<codefragment>
<![CDATA[
				throw new IllegalOperationError("Scale9Image textures cannot be null.");
			}
			if(this._textures == value)
			{
				return;
			}
			this._textures = value;
			this._frame = this._textures.texture.frame;
			this._layoutChanged = true;
			this._renderingChanged = true;
		}

		/**
		 * @private
		 */
		private var _width:Number = NaN;
		
		/**
		 * @private
		 */
		override public function get width():Number
		{
			return this._width;
		}
		
		/**
		 * @private
		 */
		override public function set width(value:Number):void
		{
			if(this._width == value)
			{
				return;
			}
			this._width = this._hitArea.width = value;
			this._layoutChanged = true;
		}
		
		/**
		 * @private
		 */
		private var _height:Number = NaN;
		
		/**
		 * @private
		 */
		override public function get height():Number
		{
			return this._height;
		}
		
		/**
		 * @private
		 */
		override public function set height(value:Number):void
		{
			if(this._height == value)
			{
				return;
			}
			this._height = this._hitArea.height = value;
			this._layoutChanged = true;
		}
		
		/**
		 * @private
		 */
		private var _textureScale:Number = 1;
		
		/**
		 * The amount to scale the texture. Useful for DPI changes.
		 */
		public function get textureScale():Number
		{
			return this._textureScale;
		}
		
		/**
		 * @private
		 */
		public function set textureScale(value:Number):void
		{
			if(this._textureScale == value)
			{
				return;
			}
			this._textureScale = value;
			this._layoutChanged = true;
		}
		
		/**
		 * @private
		 */
		private var _smoothing:String = TextureSmoothing.BILINEAR;
		
		/**
		 * The smoothing value to pass to the images.
		 *
		 * @see starling.textures.TextureSmoothing
		 */
		public function get smoothing():String
		{
			return this._smoothing;
		}
		
		/**
		 * @private
		 */
		public function set smoothing(value:String):void
		{
			if(this._smoothing == value)
			{
				return;
			}
			this._smoothing = value;
			this._propertiesChanged = true;
		}

		/**
		 * @private
		 */
		private var _color:uint = 0xffffff;

		/**
		 * The color value to pass to the images.
		 */
		public function get color():uint
		{
			return this._color;
		}

		/**
		 * @private
		 */
		public function set color(value:uint):void
		{
			if(this._color == value)
			{
				return;
			}
			this._color = value;
			this._propertiesChanged = true;
		}

		/**
		 * @private
		 */
		private var _useSeparateBatch:Boolean = true;

		/**
		 * Determines if the regions are batched normally by Starling or if
		 * they're batched separately.
		 */
		public function get useSeparateBatch():Boolean
		{
			return this._useSeparateBatch;
		}

		/**
		 * @private
		 */
		public function set useSeparateBatch(value:Boolean):void
		{
			if(this._useSeparateBatch == value)
			{
				return;
			}
			this._useSeparateBatch = value;
			this._renderingChanged = true;
		}

		/**
		 * @private
		 */
		private var _hitArea:Rectangle;

		/**
		 * @private
		 */
		private var _batch:QuadBatch;

		/**
		 * @private
		 */
		private var _topLeftImage:Image;
]]>
</codefragment>
</duplication>
<duplication lines="92" tokens="354">
<file line="2027" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="970" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\SimpleScrollBar.as"/>
<codefragment>
<![CDATA[
						touch.getLocation(this, HELPER_POINT);
						this._touchStartX = HELPER_POINT.x;
						this._touchStartY = HELPER_POINT.y;
						this._thumbStartX = HELPER_POINT.x;
						this._thumbStartY = HELPER_POINT.y;
						this._touchValue = this.locationToValue(HELPER_POINT);
						this.adjustPage();
						this.startRepeatTimer(this.adjustPage);
						break;
					}
				}
			}
			HELPER_TOUCHES_VECTOR.length = 0;
		}

		/**
		 * @private
		 */
		protected function thumb_touchHandler(event:TouchEvent):void
		{
			if(!this._isEnabled)
			{
				return;
			}
			const touches:Vector.<Touch> = event.getTouches(this.thumb, null, HELPER_TOUCHES_VECTOR);
			if(touches.length == 0)
			{
				return;
			}
			if(this._touchPointID >= 0)
			{
				var touch:Touch;
				for each(var currentTouch:Touch in touches)
				{
					if(currentTouch.id == this._touchPointID)
					{
						touch = currentTouch;
						break;
					}
				}
				if(!touch)
				{
					HELPER_TOUCHES_VECTOR.length = 0;
					return;
				}

				if(touch.phase == TouchPhase.MOVED)
				{
					touch.getLocation(this, HELPER_POINT);
					var newValue:Number = this.locationToValue(HELPER_POINT);
					if(this._step != 0 && newValue != this._maximum && newValue != this._minimum)
					{
						newValue = roundToNearest(newValue, this._step);
					}
					this.value = newValue;
				}
				else if(touch.phase == TouchPhase.ENDED)
				{
					this._touchPointID = -1;
					this.isDragging = false;
					if(!this.liveDragging)
					{
						this.dispatchEventWith(Event.CHANGE);
					}
					this.dispatchEventWith(FeathersEventType.END_INTERACTION);
				}
			}
			else
			{
				for each(touch in touches)
				{
					if(touch.phase == TouchPhase.BEGAN)
					{
						touch.getLocation(this, HELPER_POINT);
						this._touchPointID = touch.id;
						this._thumbStartX = this.thumb.x;
						this._thumbStartY = this.thumb.y;
						this._touchStartX = HELPER_POINT.x;
						this._touchStartY = HELPER_POINT.y;
						this.isDragging = true;
						this.dispatchEventWith(FeathersEventType.BEGIN_INTERACTION);
						break;
					}
				}
			}
			HELPER_TOUCHES_VECTOR.length = 0;
		}

		/**
		 * @private
		 */
		protected function repeatTimer_timerHandler(event:TimerEvent):void
]]>
</codefragment>
</duplication>
<duplication lines="182" tokens="347">
<file line="270" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\HorizontalLayout.as"/>
<file line="272" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\VerticalLayout.as"/>
<codefragment>
<![CDATA[
		[Inspectable(type="String",enumeration="left,center,right,justify")]
		/**
		 * The alignment of the items horizontally, on the x-axis.
		 */
		public function get horizontalAlign():String
		{
			return this._horizontalAlign;
		}

		/**
		 * @private
		 */
		public function set horizontalAlign(value:String):void
		{
			if(this._horizontalAlign == value)
			{
				return;
			}
			this._horizontalAlign = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _useVirtualLayout:Boolean = true;

		/**
		 * @inheritDoc
		 */
		public function get useVirtualLayout():Boolean
		{
			return this._useVirtualLayout;
		}

		/**
		 * @private
		 */
		public function set useVirtualLayout(value:Boolean):void
		{
			if(this._useVirtualLayout == value)
			{
				return;
			}
			this._useVirtualLayout = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _hasVariableItemDimensions:Boolean = false;

		/**
		 * When the layout is virtualized, and this value is true, the items may
		 * have variable width values. If false, the items will all share the
		 * same width value with the typical item.
		 */
		public function get hasVariableItemDimensions():Boolean
		{
			return this._hasVariableItemDimensions;
		}

		/**
		 * @private
		 */
		public function set hasVariableItemDimensions(value:Boolean):void
		{
			if(this._hasVariableItemDimensions == value)
			{
				return;
			}
			this._hasVariableItemDimensions = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _beforeVirtualizedItemCount:int = 0;

		/**
		 * @inheritDoc
		 */
		public function get beforeVirtualizedItemCount():int
		{
			return this._beforeVirtualizedItemCount;
		}

		/**
		 * @private
		 */
		public function set beforeVirtualizedItemCount(value:int):void
		{
			if(this._beforeVirtualizedItemCount == value)
			{
				return;
			}
			this._beforeVirtualizedItemCount = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _afterVirtualizedItemCount:int = 0;

		/**
		 * @inheritDoc
		 */
		public function get afterVirtualizedItemCount():int
		{
			return this._afterVirtualizedItemCount;
		}

		/**
		 * @private
		 */
		public function set afterVirtualizedItemCount(value:int):void
		{
			if(this._afterVirtualizedItemCount == value)
			{
				return;
			}
			this._afterVirtualizedItemCount = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _typicalItemWidth:Number = -1;

		/**
		 * @inheritDoc
		 */
		public function get typicalItemWidth():Number
		{
			return this._typicalItemWidth;
		}

		/**
		 * @private
		 */
		public function set typicalItemWidth(value:Number):void
		{
			if(this._typicalItemWidth == value)
			{
				return;
			}
			this._typicalItemWidth = value;
		}

		/**
		 * @private
		 */
		protected var _typicalItemHeight:Number = -1;

		/**
		 * @inheritDoc
		 */
		public function get typicalItemHeight():Number
		{
			return this._typicalItemHeight;
		}

		/**
		 * @private
		 */
		public function set typicalItemHeight(value:Number):void
		{
			if(this._typicalItemHeight == value)
			{
				return;
			}
			this._typicalItemHeight = value;
		}

		/**
		 * @private
		 */
		protected var _scrollPositionVerticalAlign:String = VERTICAL_ALIGN_MIDDLE;
]]>
</codefragment>
</duplication>
<duplication lines="40" tokens="341">
<file line="632" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledRowsLayout.as"/>
<file line="863" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledRowsLayout.as"/>
<codefragment>
<![CDATA[
			var availableWidth:Number = NaN;
			var availableHeight:Number = NaN;

			var horizontalTileCount:int = Math.max(1, itemCount);
			if(!isNaN(explicitWidth))
			{
				availableWidth = explicitWidth;
				horizontalTileCount = Math.max(1, (explicitWidth - this._paddingLeft - this._paddingRight + this._horizontalGap) / (tileWidth + this._horizontalGap));
			}
			else if(!isNaN(maxWidth))
			{
				availableWidth = maxWidth;
				horizontalTileCount = Math.max(1, (maxWidth - this._paddingLeft - this._paddingRight + this._horizontalGap) / (tileWidth + this._horizontalGap));
			}
			var verticalTileCount:int = 1;
			if(!isNaN(explicitHeight))
			{
				availableHeight = explicitHeight;
				verticalTileCount = Math.max(1, (explicitHeight - this._paddingTop - this._paddingBottom + this._verticalGap) / (tileHeight + this._verticalGap));
			}
			else if(!isNaN(maxHeight))
			{
				availableHeight = maxHeight;
				verticalTileCount = Math.max(1, (maxHeight - this._paddingTop - this._paddingBottom + this._verticalGap) / (tileHeight + this._verticalGap));
			}

			const totalPageWidth:Number = horizontalTileCount * (tileWidth + this._horizontalGap) - this._horizontalGap + this._paddingLeft + this._paddingRight;
			const totalPageHeight:Number = verticalTileCount * (tileHeight + this._verticalGap) - this._verticalGap + this._paddingTop + this._paddingBottom;
			const availablePageWidth:Number = isNaN(availableWidth) ? totalPageWidth : availableWidth;
			const availablePageHeight:Number = isNaN(availableHeight) ? totalPageHeight : availableHeight;

			const startX:Number = boundsX + this._paddingLeft;
			const startY:Number = boundsY + this._paddingTop;

			const perPage:int = horizontalTileCount * verticalTileCount;
			var pageIndex:int = 0;
			var nextPageStartIndex:int = perPage;
			var pageStartX:Number = startX;
			var positionX:Number = startX;
			var positionY:Number = startY;
]]>
</codefragment>
</duplication>
<duplication lines="167" tokens="339">
<file line="78" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\HorizontalLayout.as"/>
<file line="78" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\VerticalLayout.as"/>
<codefragment>
<![CDATA[
		protected var _heightCache:Array = [];

		/**
		 * @private
		 */
		protected var _discoveredItemsCache:Vector.<DisplayObject> = new <DisplayObject>[];

		/**
		 * @private
		 */
		protected var _gap:Number = 0;

		/**
		 * THe space, in pixels, between items.
		 */
		public function get gap():Number
		{
			return this._gap;
		}

		/**
		 * @private
		 */
		public function set gap(value:Number):void
		{
			if(this._gap == value)
			{
				return;
			}
			this._gap = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * Quickly sets all padding properties to the same value. The
		 * <code>padding</code> getter always returns the value of
		 * <code>paddingTop</code>, but the other padding values may be
		 * different.
		 */
		public function get padding():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set padding(value:Number):void
		{
			this.paddingTop = value;
			this.paddingRight = value;
			this.paddingBottom = value;
			this.paddingLeft = value;
		}

		/**
		 * @private
		 */
		protected var _paddingTop:Number = 0;

		/**
		 * The space, in pixels, that appears on top, before the first item.
		 */
		public function get paddingTop():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set paddingTop(value:Number):void
		{
			if(this._paddingTop == value)
			{
				return;
			}
			this._paddingTop = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _paddingRight:Number = 0;

		/**
		 * The minimum space, in pixels, to the right of the items.
		 */
		public function get paddingRight():Number
		{
			return this._paddingRight;
		}

		/**
		 * @private
		 */
		public function set paddingRight(value:Number):void
		{
			if(this._paddingRight == value)
			{
				return;
			}
			this._paddingRight = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _paddingBottom:Number = 0;

		/**
		 * The space, in pixels, that appears on the bottom, after the last
		 * item.
		 */
		public function get paddingBottom():Number
		{
			return this._paddingBottom;
		}

		/**
		 * @private
		 */
		public function set paddingBottom(value:Number):void
		{
			if(this._paddingBottom == value)
			{
				return;
			}
			this._paddingBottom = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _paddingLeft:Number = 0;

		/**
		 * The minimum space, in pixels, to the left of the items.
		 */
		public function get paddingLeft():Number
		{
			return this._paddingLeft;
		}

		/**
		 * @private
		 */
		public function set paddingLeft(value:Number):void
		{
			if(this._paddingLeft == value)
			{
				return;
			}
			this._paddingLeft = value;
			this.dispatchEventWith(Event.CHANGE);
		}


		/**
		 * @private
		 */
		protected var _verticalAlign:String = VERTICAL_ALIGN_TOP;

		[Inspectable(type="String",enumeration="top,middle,bottom")]
]]>
</codefragment>
</duplication>
<duplication lines="164" tokens="331">
<file line="211" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<file line="107" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\VerticalLayout.as"/>
<codefragment>
<![CDATA[
			this._gap = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * Quickly sets all padding properties to the same value. The
		 * <code>padding</code> getter always returns the value of
		 * <code>paddingTop</code>, but the other padding values may be
		 * different.
		 */
		public function get padding():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set padding(value:Number):void
		{
			this.paddingTop = value;
			this.paddingRight = value;
			this.paddingBottom = value;
			this.paddingLeft = value;
		}

		/**
		 * @private
		 */
		protected var _paddingTop:Number = 0;

		/**
		 * The space, in pixels, that appears on top, before the first item.
		 */
		public function get paddingTop():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set paddingTop(value:Number):void
		{
			if(this._paddingTop == value)
			{
				return;
			}
			this._paddingTop = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _paddingRight:Number = 0;

		/**
		 * The minimum space, in pixels, to the right of the items.
		 */
		public function get paddingRight():Number
		{
			return this._paddingRight;
		}

		/**
		 * @private
		 */
		public function set paddingRight(value:Number):void
		{
			if(this._paddingRight == value)
			{
				return;
			}
			this._paddingRight = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _paddingBottom:Number = 0;

		/**
		 * The space, in pixels, that appears on the bottom, after the last
		 * item.
		 */
		public function get paddingBottom():Number
		{
			return this._paddingBottom;
		}

		/**
		 * @private
		 */
		public function set paddingBottom(value:Number):void
		{
			if(this._paddingBottom == value)
			{
				return;
			}
			this._paddingBottom = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _paddingLeft:Number = 0;

		/**
		 * The minimum space, in pixels, to the left of the items.
		 */
		public function get paddingLeft():Number
		{
			return this._paddingLeft;
		}

		/**
		 * @private
		 */
		public function set paddingLeft(value:Number):void
		{
			if(this._paddingLeft == value)
			{
				return;
			}
			this._paddingLeft = value;
			this.dispatchEventWith(Event.CHANGE);
		}


		/**
		 * @private
		 */
		protected var _verticalAlign:String = VERTICAL_ALIGN_TOP;

		[Inspectable(type="String",enumeration="top,middle,bottom")]
		/**
		 * If the total item height is less than the bounds, the positions of
		 * the items can be aligned vertically.
		 */
		public function get verticalAlign():String
		{
			return this._verticalAlign;
		}

		/**
		 * @private
		 */
		public function set verticalAlign(value:String):void
		{
			if(this._verticalAlign == value)
			{
				return;
			}
			this._verticalAlign = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _horizontalAlign:String = HORIZONTAL_ALIGN_LEFT;
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="296">
<file line="242" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<file line="290" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<codefragment>
<![CDATA[
				case "b":
					//important
					this.important.setXs(9, [0, 3, 6, 9, 12, 9, 6, 3, 0]);
					this.important.setXs(8, [18, 36, 56, 80, 120, 80, 56, 36, 18]);
					this.important.setXs(7, [14, 26, 42, 60, 80, 60, 42, 26, 14]);
					this.important.setXs(6, [10, 20, 30, 34, 40, 34, 30, 20, 10]);
					this.important.setXs(5, [6, 12, 18, 18, 20, 18, 18, 12, 6]);
					this.important.setXs(4, [2, 0, 8, 0, 8, 0, 8, 0, 2]);
					this.important.setXs(3, [0, 0, -2, 0, 4, 0, -2, 0, 0]);
					this.important.setXs(2, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(1, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(0, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					//convertedImportant
					this.convertedImportant.setXs(9, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="296">
<file line="218" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<file line="266" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<codefragment>
<![CDATA[
				case "B":
					//important
					this.important.setXs(0, [0, 3, 6, 9, 12, 9, 6, 3, 0]);
					this.important.setXs(1, [18, 36, 56, 80, 120, 80, 56, 36, 18]);
					this.important.setXs(2, [14, 26, 42, 60, 80, 60, 42, 26, 14]);
					this.important.setXs(3, [10, 20, 30, 34, 40, 34, 30, 20, 10]);
					this.important.setXs(4, [6, 12, 18, 18, 20, 18, 18, 12, 6]);
					this.important.setXs(5, [2, 0, 8, 0, 8, 0, 8, 0, 2]);
					this.important.setXs(6, [0, 0, -2, 0, 4, 0, -2, 0, 0]);
					this.important.setXs(7, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(8, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(9, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					//convertedImportant
					this.convertedImportant.setXs(0, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="294">
<file line="633" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<file line="864" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<codefragment>
<![CDATA[
			var availableWidth:Number = NaN;
			var availableHeight:Number = NaN;
			var horizontalTileCount:int = 1;
			if(!isNaN(explicitWidth))
			{
				availableWidth = explicitWidth;
				horizontalTileCount = Math.max(1, (explicitWidth - this._paddingLeft - this._paddingRight + this._horizontalGap) / (tileWidth + this._horizontalGap));
			}
			else if(!isNaN(maxWidth))
			{
				availableWidth = maxWidth;
				horizontalTileCount = Math.max(1, (maxWidth - this._paddingLeft - this._paddingRight + this._horizontalGap) / (tileWidth + this._horizontalGap));
			}
			var verticalTileCount:int = Math.max(1, itemCount);
			if(!isNaN(explicitHeight))
			{
				availableHeight = explicitHeight;
				verticalTileCount = Math.max(1, (explicitHeight - this._paddingTop - this._paddingBottom + this._verticalGap) / (tileHeight + this._verticalGap));
			}
			else if(!isNaN(maxHeight))
			{
				availableHeight = maxHeight;
				verticalTileCount = Math.max(1, (maxHeight - this._paddingTop - this._paddingBottom + this._verticalGap) / (tileHeight + this._verticalGap));
			}

			const totalPageWidth:Number = horizontalTileCount * (tileWidth + this._horizontalGap) - this._horizontalGap + this._paddingLeft + this._paddingRight;
			const totalPageHeight:Number = verticalTileCount * (tileHeight + this._verticalGap) - this._verticalGap + this._paddingTop + this._paddingBottom;
			const availablePageWidth:Number = isNaN(availableWidth) ? totalPageWidth : availableWidth;
			const availablePageHeight:Number = isNaN(availableHeight) ? totalPageHeight : availableHeight;

			const startX:Number = boundsX + this._paddingLeft;

			const perPage:int = horizontalTileCount * verticalTileCount;
]]>
</codefragment>
</duplication>
<duplication lines="159" tokens="285">
<file line="478" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\SimpleScrollBar.as"/>
<file line="873" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<codefragment>
<![CDATA[
		protected var _thumbFactory:Function;

		/**
		 * A function used to generate the slider's thumb sub-component.
		 * This can be used to change properties on the thumb when it is first
		 * created. For instance, if you are skinning Feathers components
		 * without a theme, you might use <code>thumbFactory</code> to set
		 * skins and text styles on the thumb.
		 *
		 * <p>The function should have the following signature:</p>
		 * <pre>function():Button</pre>
		 *
		 * @see #thumbProperties
		 */
		public function get thumbFactory():Function
		{
			return this._thumbFactory;
		}

		/**
		 * @private
		 */
		public function set thumbFactory(value:Function):void
		{
			if(this._thumbFactory == value)
			{
				return;
			}
			this._thumbFactory = value;
			this.invalidate(INVALIDATION_FLAG_THUMB_FACTORY);
		}

		/**
		 * @private
		 */
		protected var _customThumbName:String;

		/**
		 * A name to add to the slider's thumb sub-component. Typically
		 * used by a theme to provide different skins to different sliders.
		 *
		 * @see feathers.core.FeathersControl#nameList
		 * @see #thumbFactory
		 * @see #thumbProperties
		 */
		public function get customThumbName():String
		{
			return this._customThumbName;
		}

		/**
		 * @private
		 */
		public function set customThumbName(value:String):void
		{
			if(this._customThumbName == value)
			{
				return;
			}
			this._customThumbName = value;
			this.invalidate(INVALIDATION_FLAG_THUMB_FACTORY);
		}
		
		/**
		 * @private
		 */
		protected var _thumbProperties:PropertyProxy;
		
		/**
		 * A set of key/value pairs to be passed down to the slider's thumb
		 * sub-component. The thumb is a <code>feathers.controls.Button</code>
		 * instance.
		 *
		 * <p>If the subcomponent has its own subcomponents, their properties
		 * can be set too, using attribute <code>&#64;</code> notation. For example,
		 * to set the skin on the thumb of a <code>SimpleScrollBar</code>
		 * which is in a <code>Scroller</code> which is in a <code>List</code>,
		 * you can use the following syntax:</p>
		 * <pre>list.scrollerProperties.&#64;verticalScrollBarProperties.&#64;thumbProperties.defaultSkin = new Image(texture);</pre>
		 * 
		 * @see feathers.controls.Button
		 */
		public function get thumbProperties():Object
		{
			if(!this._thumbProperties)
			{
				this._thumbProperties = new PropertyProxy(thumbProperties_onChange);
			}
			return this._thumbProperties;
		}
		
		/**
		 * @private
		 */
		public function set thumbProperties(value:Object):void
		{
			if(this._thumbProperties == value)
			{
				return;
			}
			if(!value)
			{
				value = new PropertyProxy();
			}
			if(!(value is PropertyProxy))
			{
				const newValue:PropertyProxy = new PropertyProxy();
				for(var propertyName:String in value)
				{
					newValue[propertyName] = value[propertyName];
				}
				value = newValue;
			}
			if(this._thumbProperties)
			{
				this._thumbProperties.removeOnChangeCallback(thumbProperties_onChange);
			}
			this._thumbProperties = PropertyProxy(value);
			if(this._thumbProperties)
			{
				this._thumbProperties.addOnChangeCallback(thumbProperties_onChange);
			}
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _touchPointID:int = -1;

		/**
		 * @private
		 */
		protected var _touchStartX:Number = NaN;

		/**
		 * @private
		 */
		protected var _touchStartY:Number = NaN;

		/**
		 * @private
		 */
		protected var _thumbStartX:Number = NaN;

		/**
		 * @private
		 */
		protected var _thumbStartY:Number = NaN;

		/**
		 * @private
		 */
		protected var _touchValue:Number;
		
		/**
		 * @private
		 */
		override protected function draw():void
]]>
</codefragment>
</duplication>
<duplication lines="136" tokens="277">
<file line="107" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\HorizontalLayout.as"/>
<file line="211" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<codefragment>
<![CDATA[
			this._verticalGap = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * Quickly sets all padding properties to the same value. The
		 * <code>padding</code> getter always returns the value of
		 * <code>paddingTop</code>, but the other padding values may be
		 * different.
		 */
		public function get padding():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set padding(value:Number):void
		{
			this.paddingTop = value;
			this.paddingRight = value;
			this.paddingBottom = value;
			this.paddingLeft = value;
		}

		/**
		 * @private
		 */
		protected var _paddingTop:Number = 0;

		/**
		 * The space, in pixels, above of items.
		 */
		public function get paddingTop():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set paddingTop(value:Number):void
		{
			if(this._paddingTop == value)
			{
				return;
			}
			this._paddingTop = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _paddingRight:Number = 0;

		/**
		 * The space, in pixels, to the right of the items.
		 */
		public function get paddingRight():Number
		{
			return this._paddingRight;
		}

		/**
		 * @private
		 */
		public function set paddingRight(value:Number):void
		{
			if(this._paddingRight == value)
			{
				return;
			}
			this._paddingRight = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _paddingBottom:Number = 0;

		/**
		 * The space, in pixels, below the items.
		 */
		public function get paddingBottom():Number
		{
			return this._paddingBottom;
		}

		/**
		 * @private
		 */
		public function set paddingBottom(value:Number):void
		{
			if(this._paddingBottom == value)
			{
				return;
			}
			this._paddingBottom = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _paddingLeft:Number = 0;

		/**
		 * The space, in pixels, to the left of the items.
		 */
		public function get paddingLeft():Number
		{
			return this._paddingLeft;
		}

		/**
		 * @private
		 */
		public function set paddingLeft(value:Number):void
		{
			if(this._paddingLeft == value)
			{
				return;
			}
			this._paddingLeft = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _verticalAlign:String = VERTICAL_ALIGN_TOP;

		[Inspectable(type="String",enumeration="top,middle,bottom")]
]]>
</codefragment>
</duplication>
<duplication lines="73" tokens="271">
<file line="1138" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<file line="1142" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledRowsLayout.as"/>
<codefragment>
<![CDATA[
			return result;
		}

		/**
		 * @private
		 */
		protected function applyHorizontalAlign(items:Vector.<DisplayObject>, startIndex:int, endIndex:int, totalItemWidth:Number, availableWidth:Number):void
		{
			if(totalItemWidth >= availableWidth)
			{
				return;
			}
			var horizontalAlignOffsetX:Number = 0;
			if(this._horizontalAlign == HORIZONTAL_ALIGN_RIGHT)
			{
				horizontalAlignOffsetX = availableWidth - totalItemWidth;
			}
			else if(this._horizontalAlign != HORIZONTAL_ALIGN_LEFT)
			{
				//we're going to default to center if we encounter an
				//unknown value
				horizontalAlignOffsetX = (availableWidth - totalItemWidth) / 2;
			}
			if(horizontalAlignOffsetX != 0)
			{
				for(var i:int = startIndex; i <= endIndex; i++)
				{
					var item:DisplayObject = items[i];
					item.x += horizontalAlignOffsetX;
				}
			}
		}

		/**
		 * @private
		 */
		protected function applyVerticalAlign(items:Vector.<DisplayObject>, startIndex:int, endIndex:int, totalItemHeight:Number, availableHeight:Number):void
		{
			if(totalItemHeight >= availableHeight)
			{
				return;
			}
			var verticalAlignOffsetY:Number = 0;
			if(this._verticalAlign == VERTICAL_ALIGN_BOTTOM)
			{
				verticalAlignOffsetY = availableHeight - totalItemHeight;
			}
			else if(this._verticalAlign == VERTICAL_ALIGN_MIDDLE)
			{
				verticalAlignOffsetY = (availableHeight - totalItemHeight) / 2;
			}
			if(verticalAlignOffsetY != 0)
			{
				for(var i:int = startIndex; i <= endIndex; i++)
				{
					var item:DisplayObject = items[i];
					item.y += verticalAlignOffsetY;
				}
			}
		}

		/**
		 * @private
		 */
		protected function validateItems(items:Vector.<DisplayObject>):void
		{
			const itemCount:int = items.length;
			for(var i:int = 0; i < itemCount; i++)
			{
				var control:IFeathersControl = items[i] as IFeathersControl;
				if(control)
				{
					control.validate();
]]>
</codefragment>
</duplication>
<duplication lines="139" tokens="251">
<file line="333" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ProgressBar.as"/>
<file line="827" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\renderers\DefaultGroupedListHeaderOrFooterRenderer.as"/>
<codefragment>
<![CDATA[
				this.addChildAt(this._backgroundDisabledSkin, 0);
			}
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * Quickly sets all padding properties to the same value. The
		 * <code>padding</code> getter always returns the value of
		 * <code>paddingTop</code>, but the other padding values may be
		 * different.
		 */
		public function get padding():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set padding(value:Number):void
		{
			this.paddingTop = value;
			this.paddingRight = value;
			this.paddingBottom = value;
			this.paddingLeft = value;
		}

		/**
		 * @private
		 */
		protected var _paddingTop:Number = 0;

		/**
		 * The minimum space, in pixels, between the component's top edge and
		 * the component's content.
		 */
		public function get paddingTop():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set paddingTop(value:Number):void
		{
			if(this._paddingTop == value)
			{
				return;
			}
			this._paddingTop = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingRight:Number = 0;

		/**
		 * The minimum space, in pixels, between the component's right edge
		 * and the component's content.
		 */
		public function get paddingRight():Number
		{
			return this._paddingRight;
		}

		/**
		 * @private
		 */
		public function set paddingRight(value:Number):void
		{
			if(this._paddingRight == value)
			{
				return;
			}
			this._paddingRight = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingBottom:Number = 0;

		/**
		 * The minimum space, in pixels, between the component's bottom edge
		 * and the component's content.
		 */
		public function get paddingBottom():Number
		{
			return this._paddingBottom;
		}

		/**
		 * @private
		 */
		public function set paddingBottom(value:Number):void
		{
			if(this._paddingBottom == value)
			{
				return;
			}
			this._paddingBottom = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingLeft:Number = 0;

		/**
		 * The minimum space, in pixels, between the component's left edge
		 * and the component's content.
		 */
		public function get paddingLeft():Number
		{
			return this._paddingLeft;
		}

		/**
		 * @private
		 */
		public function set paddingLeft(value:Number):void
		{
			if(this._paddingLeft == value)
			{
				return;
			}
			this._paddingLeft = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		override public function dispose():void
]]>
</codefragment>
</duplication>
<duplication lines="137" tokens="251">
<file line="454" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Callout.as"/>
<file line="450" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<codefragment>
<![CDATA[
			this.invalidate(INVALIDATION_FLAG_DATA);
		}

		/**
		 * Quickly sets all padding properties to the same value. The
		 * <code>padding</code> getter always returns the value of
		 * <code>paddingTop</code>, but the other padding values may be
		 * different.
		 */
		public function get padding():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set padding(value:Number):void
		{
			this.paddingTop = value;
			this.paddingRight = value;
			this.paddingBottom = value;
			this.paddingLeft = value;
		}

		/**
		 * @private
		 */
		protected var _paddingTop:Number = 0;

		/**
		 * The minimum space, in pixels, above the content, not
		 * including the track(s).
		 */
		public function get paddingTop():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set paddingTop(value:Number):void
		{
			if(this._paddingTop == value)
			{
				return;
			}
			this._paddingTop = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingRight:Number = 0;

		/**
		 * The minimum space, in pixels, to the right of the content, not
		 * including the track(s).
		 */
		public function get paddingRight():Number
		{
			return this._paddingRight;
		}

		/**
		 * @private
		 */
		public function set paddingRight(value:Number):void
		{
			if(this._paddingRight == value)
			{
				return;
			}
			this._paddingRight = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingBottom:Number = 0;

		/**
		 * The minimum space, in pixels, below the content, not
		 * including the track(s).
		 */
		public function get paddingBottom():Number
		{
			return this._paddingBottom;
		}

		/**
		 * @private
		 */
		public function set paddingBottom(value:Number):void
		{
			if(this._paddingBottom == value)
			{
				return;
			}
			this._paddingBottom = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingLeft:Number = 0;

		/**
		 * The minimum space, in pixels, to the left of the content, not
		 * including the track(s).
		 */
		public function get paddingLeft():Number
		{
			return this._paddingLeft;
		}

		/**
		 * @private
		 */
		public function set paddingLeft(value:Number):void
		{
			if(this._paddingLeft == value)
			{
				return;
			}
			this._paddingLeft = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var currentRepeatAction:Function;
]]>
</codefragment>
</duplication>
<duplication lines="137" tokens="251">
<file line="454" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Button.as"/>
<file line="1191" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Scroller.as"/>
<codefragment>
<![CDATA[
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * Quickly sets all padding properties to the same value. The
		 * <code>padding</code> getter always returns the value of
		 * <code>paddingTop</code>, but the other padding values may be
		 * different.
		 */
		public function get padding():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set padding(value:Number):void
		{
			this.paddingTop = value;
			this.paddingRight = value;
			this.paddingBottom = value;
			this.paddingLeft = value;
		}

		/**
		 * @private
		 */
		protected var _paddingTop:Number = 0;

		/**
		 * The minimum space, in pixels, between the container's top edge and the
		 * container's content.
		 */
		public function get paddingTop():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set paddingTop(value:Number):void
		{
			if(this._paddingTop == value)
			{
				return;
			}
			this._paddingTop = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingRight:Number = 0;

		/**
		 * The minimum space, in pixels, between the container's right edge and
		 * the container's content.
		 */
		public function get paddingRight():Number
		{
			return this._paddingRight;
		}

		/**
		 * @private
		 */
		public function set paddingRight(value:Number):void
		{
			if(this._paddingRight == value)
			{
				return;
			}
			this._paddingRight = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingBottom:Number = 0;

		/**
		 * The minimum space, in pixels, between the container's bottom edge and
		 * the container's content.
		 */
		public function get paddingBottom():Number
		{
			return this._paddingBottom;
		}

		/**
		 * @private
		 */
		public function set paddingBottom(value:Number):void
		{
			if(this._paddingBottom == value)
			{
				return;
			}
			this._paddingBottom = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingLeft:Number = 0;

		/**
		 * The minimum space, in pixels, between the container's left edge and the
		 * container's content.
		 */
		public function get paddingLeft():Number
		{
			return this._paddingLeft;
		}

		/**
		 * @private
		 */
		public function set paddingLeft(value:Number):void
		{
			if(this._paddingLeft == value)
			{
				return;
			}
			this._paddingLeft = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _horizontalScrollBarHideTween:Tween;
]]>
</codefragment>
</duplication>
<duplication lines="133" tokens="250">
<file line="333" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ProgressBar.as"/>
<file line="1189" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Scroller.as"/>
<codefragment>
<![CDATA[
				this.addChildAt(this._backgroundDisabledSkin, 0);
			}
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * Quickly sets all padding properties to the same value. The
		 * <code>padding</code> getter always returns the value of
		 * <code>paddingTop</code>, but the other padding values may be
		 * different.
		 */
		public function get padding():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set padding(value:Number):void
		{
			this.paddingTop = value;
			this.paddingRight = value;
			this.paddingBottom = value;
			this.paddingLeft = value;
		}

		/**
		 * @private
		 */
		protected var _paddingTop:Number = 0;

		/**
		 * The minimum space, in pixels, between the container's top edge and the
		 * container's content.
		 */
		public function get paddingTop():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set paddingTop(value:Number):void
		{
			if(this._paddingTop == value)
			{
				return;
			}
			this._paddingTop = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingRight:Number = 0;

		/**
		 * The minimum space, in pixels, between the container's right edge and
		 * the container's content.
		 */
		public function get paddingRight():Number
		{
			return this._paddingRight;
		}

		/**
		 * @private
		 */
		public function set paddingRight(value:Number):void
		{
			if(this._paddingRight == value)
			{
				return;
			}
			this._paddingRight = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingBottom:Number = 0;

		/**
		 * The minimum space, in pixels, between the container's bottom edge and
		 * the container's content.
		 */
		public function get paddingBottom():Number
		{
			return this._paddingBottom;
		}

		/**
		 * @private
		 */
		public function set paddingBottom(value:Number):void
		{
			if(this._paddingBottom == value)
			{
				return;
			}
			this._paddingBottom = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingLeft:Number = 0;

		/**
		 * The minimum space, in pixels, between the container's left edge and the
		 * container's content.
		 */
		public function get paddingLeft():Number
		{
			return this._paddingLeft;
		}

		/**
		 * @private
		 */
		public function set paddingLeft(value:Number):void
		{
			if(this._paddingLeft == value)
			{
				return;
			}
			this._paddingLeft = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
]]>
</codefragment>
</duplication>
<duplication lines="131" tokens="249">
<file line="454" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Button.as"/>
<file line="335" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ProgressBar.as"/>
<codefragment>
<![CDATA[
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * Quickly sets all padding properties to the same value. The
		 * <code>padding</code> getter always returns the value of
		 * <code>paddingTop</code>, but the other padding values may be
		 * different.
		 */
		public function get padding():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set padding(value:Number):void
		{
			this.paddingTop = value;
			this.paddingRight = value;
			this.paddingBottom = value;
			this.paddingLeft = value;
		}

		/**
		 * @private
		 */
		protected var _paddingTop:Number = 0;

		/**
		 * The minimum space, in pixels, between the progress bar's top edge and
		 * the progress bar's content.
		 */
		public function get paddingTop():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set paddingTop(value:Number):void
		{
			if(this._paddingTop == value)
			{
				return;
			}
			this._paddingTop = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingRight:Number = 0;

		/**
		 * The minimum space, in pixels, between the progress bar's right edge
		 * and the progress bar's content.
		 */
		public function get paddingRight():Number
		{
			return this._paddingRight;
		}

		/**
		 * @private
		 */
		public function set paddingRight(value:Number):void
		{
			if(this._paddingRight == value)
			{
				return;
			}
			this._paddingRight = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingBottom:Number = 0;

		/**
		 * The minimum space, in pixels, between the progress bar's bottom edge
		 * and the progress bar's content.
		 */
		public function get paddingBottom():Number
		{
			return this._paddingBottom;
		}

		/**
		 * @private
		 */
		public function set paddingBottom(value:Number):void
		{
			if(this._paddingBottom == value)
			{
				return;
			}
			this._paddingBottom = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingLeft:Number = 0;

		/**
		 * The minimum space, in pixels, between the progress bar's left edge
		 * and the progress bar's content.
		 */
		public function get paddingLeft():Number
		{
			return this._paddingLeft;
		}

		/**
		 * @private
		 */
		public function set paddingLeft(value:Number):void
		{
			if(this._paddingLeft == value)
			{
				return;
			}
			this._paddingLeft = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
]]>
</codefragment>
</duplication>
<duplication lines="139" tokens="246">
<file line="454" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Button.as"/>
<file line="454" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Callout.as"/>
<file line="277" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Header.as"/>
<file line="318" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\PageIndicator.as"/>
<file line="300" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TextInput.as"/>
<codefragment>
<![CDATA[
			this.invalidate(INVALIDATION_FLAG_SKIN);
		}

		/**
		 * Quickly sets all padding properties to the same value. The
		 * <code>padding</code> getter always returns the value of
		 * <code>paddingTop</code>, but the other padding values may be
		 * different.
		 */
		public function get padding():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set padding(value:Number):void
		{
			this.paddingTop = value;
			this.paddingRight = value;
			this.paddingBottom = value;
			this.paddingLeft = value;
		}

		/**
		 * @private
		 */
		protected var _paddingTop:Number = 0;

		/**
		 * The minimum space, in pixels, between the input's top edge and the
		 * input's content.
		 */
		public function get paddingTop():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set paddingTop(value:Number):void
		{
			if(this._paddingTop == value)
			{
				return;
			}
			this._paddingTop = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingRight:Number = 0;

		/**
		 * The minimum space, in pixels, between the input's right edge and the
		 * input's content.
		 */
		public function get paddingRight():Number
		{
			return this._paddingRight;
		}

		/**
		 * @private
		 */
		public function set paddingRight(value:Number):void
		{
			if(this._paddingRight == value)
			{
				return;
			}
			this._paddingRight = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingBottom:Number = 0;

		/**
		 * The minimum space, in pixels, between the input's bottom edge and
		 * the input's content.
		 */
		public function get paddingBottom():Number
		{
			return this._paddingBottom;
		}

		/**
		 * @private
		 */
		public function set paddingBottom(value:Number):void
		{
			if(this._paddingBottom == value)
			{
				return;
			}
			this._paddingBottom = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingLeft:Number = 0;

		/**
		 * The minimum space, in pixels, between the input's left edge and the
		 * input's content.
		 */
		public function get paddingLeft():Number
		{
			return this._paddingLeft;
		}

		/**
		 * @private
		 */
		public function set paddingLeft(value:Number):void
		{
			if(this._paddingLeft == value)
			{
				return;
			}
			this._paddingLeft = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 * Flag indicating that the text editor should get focus after it is
		 * created.
		 */
		protected var _isWaitingToSetFocus:Boolean = false;
]]>
</codefragment>
</duplication>
<duplication lines="131" tokens="244">
<file line="454" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Callout.as"/>
<file line="335" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ProgressBar.as"/>
<codefragment>
<![CDATA[
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * Quickly sets all padding properties to the same value. The
		 * <code>padding</code> getter always returns the value of
		 * <code>paddingTop</code>, but the other padding values may be
		 * different.
		 */
		public function get padding():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set padding(value:Number):void
		{
			this.paddingTop = value;
			this.paddingRight = value;
			this.paddingBottom = value;
			this.paddingLeft = value;
		}

		/**
		 * @private
		 */
		protected var _paddingTop:Number = 0;

		/**
		 * The minimum space, in pixels, between the progress bar's top edge and
		 * the progress bar's content.
		 */
		public function get paddingTop():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set paddingTop(value:Number):void
		{
			if(this._paddingTop == value)
			{
				return;
			}
			this._paddingTop = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingRight:Number = 0;

		/**
		 * The minimum space, in pixels, between the progress bar's right edge
		 * and the progress bar's content.
		 */
		public function get paddingRight():Number
		{
			return this._paddingRight;
		}

		/**
		 * @private
		 */
		public function set paddingRight(value:Number):void
		{
			if(this._paddingRight == value)
			{
				return;
			}
			this._paddingRight = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingBottom:Number = 0;

		/**
		 * The minimum space, in pixels, between the progress bar's bottom edge
		 * and the progress bar's content.
		 */
		public function get paddingBottom():Number
		{
			return this._paddingBottom;
		}

		/**
		 * @private
		 */
		public function set paddingBottom(value:Number):void
		{
			if(this._paddingBottom == value)
			{
				return;
			}
			this._paddingBottom = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingLeft:Number = 0;

		/**
		 * The minimum space, in pixels, between the progress bar's left edge
		 * and the progress bar's content.
		 */
		public function get paddingLeft():Number
		{
			return this._paddingLeft;
		}

		/**
		 * @private
		 */
		public function set paddingLeft(value:Number):void
		{
			if(this._paddingLeft == value)
			{
				return;
			}
			this._paddingLeft = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
]]>
</codefragment>
</duplication>
<duplication lines="56" tokens="240">
<file line="1884" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="862" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\SimpleScrollBar.as"/>
<codefragment>
<![CDATA[
		protected function adjustPage():void
		{
			if(this._touchValue < this._value)
			{
				var newValue:Number = Math.max(this._touchValue, this._value - this._page);
				if(this._step != 0 && newValue != this._maximum && newValue != this._minimum)
				{
					newValue = roundToNearest(newValue, this._step);
				}
				this.value = newValue;
			}
			else if(this._touchValue > this._value)
			{
				newValue = Math.min(this._touchValue, this._value + this._page);
				if(this._step != 0 && newValue != this._maximum && newValue != this._minimum)
				{
					newValue = roundToNearest(newValue, this._step);
				}
				this.value = newValue;
			}
		}

		/**
		 * @private
		 */
		protected function startRepeatTimer(action:Function):void
		{
			this.currentRepeatAction = action;
			if(this._repeatDelay > 0)
			{
				if(!this._repeatTimer)
				{
					this._repeatTimer = new Timer(this._repeatDelay * 1000);
					this._repeatTimer.addEventListener(TimerEvent.TIMER, repeatTimer_timerHandler);
				}
				else
				{
					this._repeatTimer.reset();
					this._repeatTimer.delay = this._repeatDelay * 1000;
				}
				this._repeatTimer.start();
			}
		}

		/**
		 * @private
		 */
		protected function thumbProperties_onChange(proxy:PropertyProxy, name:Object):void
		{
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected function removedFromStageHandler(event:Event):void
]]>
</codefragment>
</duplication>
<duplication lines="80" tokens="220">
<file line="504" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Header.as"/>
<file line="160" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ProgressBar.as"/>
<codefragment>
<![CDATA[
		protected var currentBackground:DisplayObject;

		/**
		 * @private
		 */
		protected var _backgroundSkin:DisplayObject;

		/**
		 * The primary background to display.
		 */
		public function get backgroundSkin():DisplayObject
		{
			return this._backgroundSkin;
		}

		/**
		 * @private
		 */
		public function set backgroundSkin(value:DisplayObject):void
		{
			if(this._backgroundSkin == value)
			{
				return;
			}

			if(this._backgroundSkin && this._backgroundSkin != this._backgroundDisabledSkin)
			{
				this.removeChild(this._backgroundSkin);
			}
			this._backgroundSkin = value;
			if(this._backgroundSkin && this._backgroundSkin.parent != this)
			{
				this._backgroundSkin.visible = false;
				this._backgroundSkin.touchable = false;
				this.addChildAt(this._backgroundSkin, 0);
			}
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _backgroundDisabledSkin:DisplayObject;

		/**
		 * A background to display when the progress bar is disabled.
		 */
		public function get backgroundDisabledSkin():DisplayObject
		{
			return this._backgroundDisabledSkin;
		}

		/**
		 * @private
		 */
		public function set backgroundDisabledSkin(value:DisplayObject):void
		{
			if(this._backgroundDisabledSkin == value)
			{
				return;
			}

			if(this._backgroundDisabledSkin && this._backgroundDisabledSkin != this._backgroundSkin)
			{
				this.removeChild(this._backgroundDisabledSkin);
			}
			this._backgroundDisabledSkin = value;
			if(this._backgroundDisabledSkin && this._backgroundDisabledSkin.parent != this)
			{
				this._backgroundDisabledSkin.visible = false;
				this._backgroundDisabledSkin.touchable = false;
				this.addChildAt(this._backgroundDisabledSkin, 0);
			}
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _originalFillWidth:Number = NaN;
]]>
</codefragment>
</duplication>
<duplication lines="38" tokens="211">
<file line="1079" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<file line="1083" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledRowsLayout.as"/>
<codefragment>
<![CDATA[
				for(i = minimum; i <= maximum; i++)
				{
					result.push(i);
				}
			}
			return result;
		}

		/**
		 * @inheritDoc
		 */
		public function getScrollPositionForIndex(index:int, items:Vector.<DisplayObject>, x:Number, y:Number, width:Number, height:Number, result:Point = null):Point
		{
			if(!result)
			{
				result = new Point();
			}

			const itemCount:int = items.length;
			var tileWidth:Number = this._useSquareTiles ? Math.max(0, this._typicalItemWidth, this._typicalItemHeight) : this._typicalItemWidth;
			var tileHeight:Number = this._useSquareTiles ? tileWidth : this._typicalItemHeight;
			//a virtual layout assumes that all items are the same size as
			//the typical item, so we don't need to measure every item in
			//that case
			if(!this._useVirtualLayout)
			{
				for(var i:int = 0; i < itemCount; i++)
				{
					var item:DisplayObject = items[i];
					if(!item)
					{
						continue;
					}
					tileWidth = this._useSquareTiles ? Math.max(tileWidth, item.width, item.height) : Math.max(tileWidth, item.width);
					tileHeight = this._useSquareTiles ? Math.max(tileWidth, tileHeight) : Math.max(tileHeight, item.height);
				}
			}
			const horizontalTileCount:int = Math.max(1, (width - this._paddingLeft - this._paddingRight + this._horizontalGap) / (tileWidth + this._horizontalGap));
]]>
</codefragment>
</duplication>
<duplication lines="52" tokens="209">
<file line="200" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\ptolemy\geom3D\core\JoinedFace.as"/>
<file line="152" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\ptolemy\geom3D\core\RegularFace.as"/>
<codefragment>
<![CDATA[
		public override function toString():String { return "r"+super.toString(); }
		
		/**
		 *		padding 
		 * 
		 */
		 
		public function get padding():Number { return _padding; }
		public function set padding(n:Number):void
		{
			if (_padding==n) return;
			_padding = n;
			initialisePadding();
			invalidate();
		}
		
		private function initialisePadding():void
		{
			if (_padding==1)
			{
				_padded = null;
				return;
			}
			
			var i:int;
			_padded = new Array();
			for (i=0;i<_sides;i++)
			{
				_padded[i] = new Vertex();
			}
		}
		
		protected function doPaddingCalculation(t:Transformation, e:Eye):void
		{
			if (_padding==1) return;
				
			var i:int;
			var v:Vertex;
			var w:Vertex;
			var arr:Array;
			
			for (i=0;i<_padded.length;i++)
			{
				v = _points[i] as Vertex;
				w = _padded[i] as Vertex;
				
				arr = [
						v.x + (_center.x-v.x)*_padding,
						v.y + (_center.y-v.y)*_padding,
						v.z + (_center.z-v.z)*_padding,
						1
					  ];
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="206">
<file line="648" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<file line="647" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledRowsLayout.as"/>
<codefragment>
<![CDATA[
			if(!isNaN(explicitHeight))
			{
				availableHeight = explicitHeight;
				verticalTileCount = Math.max(1, (explicitHeight - this._paddingTop - this._paddingBottom + this._verticalGap) / (tileHeight + this._verticalGap));
			}
			else if(!isNaN(maxHeight))
			{
				availableHeight = maxHeight;
				verticalTileCount = Math.max(1, (maxHeight - this._paddingTop - this._paddingBottom + this._verticalGap) / (tileHeight + this._verticalGap));
			}

			const totalPageWidth:Number = horizontalTileCount * (tileWidth + this._horizontalGap) - this._horizontalGap + this._paddingLeft + this._paddingRight;
			const totalPageHeight:Number = verticalTileCount * (tileHeight + this._verticalGap) - this._verticalGap + this._paddingTop + this._paddingBottom;
			const availablePageWidth:Number = isNaN(availableWidth) ? totalPageWidth : availableWidth;
			const availablePageHeight:Number = isNaN(availableHeight) ? totalPageHeight : availableHeight;

			const startX:Number = boundsX + this._paddingLeft;
			const startY:Number = boundsY + this._paddingTop;

			const perPage:int = horizontalTileCount * verticalTileCount;
			var pageIndex:int = 0;
			var nextPageStartIndex:int = perPage;
			var pageStartX:Number = startX;
]]>
</codefragment>
</duplication>
<duplication lines="60" tokens="197">
<file line="103" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<file line="103" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\ListDataViewPort.as"/>
<codefragment>
<![CDATA[
		private var explicitVisibleWidth:Number = NaN;

		public function get visibleWidth():Number
		{
			return this.actualVisibleWidth;
		}

		public function set visibleWidth(value:Number):void
		{
			if(this.explicitVisibleWidth == value || (isNaN(value) && isNaN(this.explicitVisibleWidth)))
			{
				return;
			}
			this.explicitVisibleWidth = value;
			this.invalidate(INVALIDATION_FLAG_SIZE);
		}

		private var _minVisibleHeight:Number = 0;

		public function get minVisibleHeight():Number
		{
			return this._minVisibleHeight;
		}

		public function set minVisibleHeight(value:Number):void
		{
			if(this._minVisibleHeight == value)
			{
				return;
			}
			if(isNaN(value))
			{
				throw new ArgumentError("minVisibleHeight cannot be NaN");
			}
			this._minVisibleHeight = value;
			this.invalidate(INVALIDATION_FLAG_SIZE);
		}

		private var _maxVisibleHeight:Number = Number.POSITIVE_INFINITY;

		public function get maxVisibleHeight():Number
		{
			return this._maxVisibleHeight;
		}

		public function set maxVisibleHeight(value:Number):void
		{
			if(this._maxVisibleHeight == value)
			{
				return;
			}
			if(isNaN(value))
			{
				throw new ArgumentError("maxVisibleHeight cannot be NaN");
			}
			this._maxVisibleHeight = value;
			this.invalidate(INVALIDATION_FLAG_SIZE);
		}

		private var actualVisibleHeight:Number = 0;
]]>
</codefragment>
</duplication>
<duplication lines="47" tokens="193">
<file line="784" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\HorizontalLayout.as"/>
<file line="788" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\VerticalLayout.as"/>
<codefragment>
<![CDATA[
				if(positionY >= maxPositionY)
				{
					break;
				}
			}

			//similar to above, in order to avoid costly destruction and
			//creation of item renderers, we're going to fill in some extra
			//indices
			var resultLength:int = result.length;
			var visibleItemCountDifference:int = visibleTypicalItemCount - resultLength;
			if(visibleItemCountDifference > 0 && resultLength > 0)
			{
				//add extra items before the first index
				const firstExistingIndex:int = result[0];
				const lastIndexToAdd:int = Math.max(0, firstExistingIndex - visibleItemCountDifference);
				for(i = firstExistingIndex - 1; i >= lastIndexToAdd; i--)
				{
					result.unshift(i);
				}
			}
			resultLength = result.length;
			visibleItemCountDifference = visibleTypicalItemCount - resultLength;
			if(visibleItemCountDifference > 0)
			{
				//add extra items after the last index
				const startIndex:int = resultLength > 0 ? (result[resultLength - 1] + 1) : 0;
				const endIndex:int = Math.min(itemCount, startIndex + visibleItemCountDifference);
				for(i = startIndex; i < endIndex; i++)
				{
					result.push(i);
				}
			}
			return result;
		}

		/**
		 * @inheritDoc
		 */
		public function getScrollPositionForIndex(index:int, items:Vector.<DisplayObject>, x:Number, y:Number, width:Number, height:Number, result:Point = null):Point
		{
			if(!result)
			{
				result = new Point();
			}

			var positionY:Number = y + this._paddingTop;
]]>
</codefragment>
</duplication>
<duplication lines="87" tokens="184">
<file line="185" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\SimpleScrollBar.as"/>
<file line="289" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<codefragment>
<![CDATA[
				newValue = roundToNearest(newValue, this._step);
			}
			newValue = clamp(newValue, this._minimum, this._maximum);
			if(this._value == newValue)
			{
				return;
			}
			this._value = newValue;
			this.invalidate(INVALIDATION_FLAG_DATA);
			if(this.liveDragging || !this.isDragging)
			{
				this.dispatchEventWith(Event.CHANGE);
			}
		}
		
		/**
		 * @private
		 */
		protected var _minimum:Number = 0;
		
		/**
		 * The slider's value will not go lower than the minimum.
		 */
		public function get minimum():Number
		{
			return this._minimum;
		}
		
		/**
		 * @private
		 */
		public function set minimum(value:Number):void
		{
			if(this._minimum == value)
			{
				return;
			}
			this._minimum = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
		}
		
		/**
		 * @private
		 */
		protected var _maximum:Number = 0;
		
		/**
		 * The slider's value will not go higher than the maximum.
		 */
		public function get maximum():Number
		{
			return this._maximum;
		}
		
		/**
		 * @private
		 */
		public function set maximum(value:Number):void
		{
			if(this._maximum == value)
			{
				return;
			}
			this._maximum = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
		}
		
		/**
		 * @private
		 */
		protected var _step:Number = 0;
		
		/**
		 * As the slider's thumb is dragged, the value is snapped to a multiple
		 * of the step. Paging using the slider's track will use the <code>step</code>
		 * value if the <code>page</code> value is <code>NaN</code>. If the
		 * <code>step</code> is zero, paging with the track will not be possible.
		 */
		public function get step():Number
		{
			return this._step;
		}
		
		/**
		 * @private
		 */
		public function set step(value:Number):void
]]>
</codefragment>
</duplication>
<duplication lines="85" tokens="183">
<file line="341" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="291" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<codefragment>
<![CDATA[
			newValue = clamp(newValue, this._minimum, this._maximum);
			if(this._value == newValue)
			{
				return;
			}
			this._value = newValue;
			this.invalidate(INVALIDATION_FLAG_DATA);
			if(this.liveDragging || !this.isDragging)
			{
				this.dispatchEventWith(Event.CHANGE);
			}
		}
		
		/**
		 * @private
		 */
		protected var _minimum:Number = 0;
		
		/**
		 * The slider's value will not go lower than the minimum.
		 */
		public function get minimum():Number
		{
			return this._minimum;
		}
		
		/**
		 * @private
		 */
		public function set minimum(value:Number):void
		{
			if(this._minimum == value)
			{
				return;
			}
			this._minimum = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
		}
		
		/**
		 * @private
		 */
		protected var _maximum:Number = 0;
		
		/**
		 * The slider's value will not go higher than the maximum.
		 */
		public function get maximum():Number
		{
			return this._maximum;
		}
		
		/**
		 * @private
		 */
		public function set maximum(value:Number):void
		{
			if(this._maximum == value)
			{
				return;
			}
			this._maximum = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
		}
		
		/**
		 * @private
		 */
		protected var _step:Number = 0;
		
		/**
		 * As the slider's thumb is dragged, the value is snapped to a multiple
		 * of the step. Paging using the slider's track will use the <code>step</code>
		 * value if the <code>page</code> value is <code>NaN</code>. If the
		 * <code>step</code> is zero, paging with the track will not be possible.
		 */
		public function get step():Number
		{
			return this._step;
		}
		
		/**
		 * @private
		 */
		public function set step(value:Number):void
]]>
</codefragment>
</duplication>
<duplication lines="48" tokens="182">
<file line="30" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedMergeSortCmp.as"/>
<file line="30" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\sLinkedMergeSortCmp.as"/>
<codefragment>
<![CDATA[
		var insize:int = 1, nmerges:int, psize:int, qsize:int, i:int;
		
		if (descending)
		{
			while (true)
			{
				p = h;
				h = tail = null;
				nmerges = 0;
				
				while (p)
				{
					nmerges++;
					
					for (i = 0, psize = 0, q = p; i < insize; i++)
					{
						psize++;
						q = q.next;
						if (!q) break;
					}
					
					qsize = insize;
					
					while (psize > 0 || (qsize > 0 && q))
					{
						if (psize == 0)
						{
							e = q; q = q.next; qsize--;
						}
						else
						if (qsize == 0 || !q)
						{
							e = p; p = p.next; psize--;
						}
						else
						if (cmp(p.data, q.data) >= 0)
						{
							e = p; p = p.next; psize--;
						} 
						else
						{
							e = q; q = q.next; qsize--;
						}
						
						if (tail)
							tail.next = e;
						else
							h = e;
]]>
</codefragment>
</duplication>
<duplication lines="75" tokens="182">
<file line="25" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\model\pools\BlueChessPiecesPool.as"/>
<file line="25" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\model\pools\RedChessPiecesPool.as"/>
<codefragment>
<![CDATA[
		private static var MAX_VALUE:uint; 
		private static var GROWTH_VALUE:uint; 
		private static var counter:uint; 
		private static var pool:Vector.<ChessPiece>; 
		private static var currentSprite:ChessPiece; 
		private static var _initialized:Boolean = false;
		//--------------------------------------------------------------------------
		//
		//  Variables
		//
		//--------------------------------------------------------------------------
		
		//----------------------------------
		//  CONSTANTS
		//----------------------------------
		
		//--------------------------------------------------------------------------
		//
		//  Public properties
		//
		//-------------------------------------------------------------------------- 
		//
		public static function get initialized():Boolean
		{
			return _initialized;
		}
		//--------------------------------------------------------------------------
		//
		//  Protected properties
		//
		//-------------------------------------------------------------------------- 
		
		//--------------------------------------------------------------------------
		//
		//  Constructor
		//
		//--------------------------------------------------------------------------
		   	
		//--------------------------------------------------------------------------
		//
		//  Public methods
		//
		//--------------------------------------------------------------------------
		//
		public static function initialize( maxPoolSize:uint, growthValue:uint ):void 
		{ 
			MAX_VALUE = maxPoolSize; 
			GROWTH_VALUE = growthValue; 
			counter = maxPoolSize; 
			
			var i:uint = maxPoolSize; 
			
			pool = new Vector.<ChessPiece>(MAX_VALUE); 
			while( --i > -1 ) 
				pool[i] = new ChessPiece(); 
			//
			_initialized = true;
		} 
		//
		public static function get():ChessPiece 
		{ 
			if ( counter > 0 ) 
				return currentSprite = pool[--counter]; 
			
			var i:uint = GROWTH_VALUE; 
			while( --i > -1 ) 
				pool.unshift ( new ChessPiece() ); 
			counter = GROWTH_VALUE; 
			return get(); 
			
		} 
		//
		public static function dispose(disposed:ChessPiece):void 
		{ 
			pool[counter++] = disposed; 
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="181">
<file line="301" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<file line="222" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\ListDataViewPort.as"/>
<codefragment>
<![CDATA[
		public function set dataProvider(value:ListCollection):void
		{
			if(this._dataProvider == value)
			{
				return;
			}
			if(this._dataProvider)
			{
				this._dataProvider.removeEventListener(Event.CHANGE, dataProvider_changeHandler);
				this._dataProvider.removeEventListener(CollectionEventType.RESET, dataProvider_resetHandler);
				this._dataProvider.removeEventListener(CollectionEventType.ADD_ITEM, dataProvider_addItemHandler);
				this._dataProvider.removeEventListener(CollectionEventType.REMOVE_ITEM, dataProvider_removeItemHandler);
				this._dataProvider.removeEventListener(CollectionEventType.REPLACE_ITEM, dataProvider_replaceItemHandler);
				this._dataProvider.removeEventListener(CollectionEventType.UPDATE_ITEM, dataProvider_updateItemHandler);
			}
			this._dataProvider = value;
			if(this._dataProvider)
			{
				this._dataProvider.addEventListener(Event.CHANGE, dataProvider_changeHandler);
				this._dataProvider.addEventListener(CollectionEventType.RESET, dataProvider_resetHandler);
				this._dataProvider.addEventListener(CollectionEventType.ADD_ITEM, dataProvider_addItemHandler);
				this._dataProvider.addEventListener(CollectionEventType.REMOVE_ITEM, dataProvider_removeItemHandler);
				this._dataProvider.addEventListener(CollectionEventType.REPLACE_ITEM, dataProvider_replaceItemHandler);
				this._dataProvider.addEventListener(CollectionEventType.UPDATE_ITEM, dataProvider_updateItemHandler);
			}
			this.invalidate(INVALIDATION_FLAG_DATA);
		}

		private var _itemRendererType:Class;
]]>
</codefragment>
</duplication>
<duplication lines="6" tokens="181">
<file line="377" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<file line="401" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<codefragment>
<![CDATA[
					this.convertedImportant.setXs(7, [-2, -2, -2, 2, 2, 2, -2, -2, -2]);
					this.convertedImportant.setXs(3, [-2, -2, -2, -2, -2, -2, -2, -2, -2]);
					this.convertedImportant.setXs(4, [-2, -2, -2, -2, -2, -2, -2, -2, -2]);
					this.convertedImportant.setXs(5, [-2, -2, -2, -2, -2, -2, -2, -2, -2]);
					this.convertedImportant.setXs(6, [-2, -2, -2, -2, -2, -2, -2, -2, -2]);
					this.convertedImportant.setXs(0, [-2, -2, -2, -2, -2, -2, -2, -2, -2]);
]]>
</codefragment>
</duplication>
<duplication lines="48" tokens="179">
<file line="30" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedMergeSort.as"/>
<file line="30" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\sLinkedMergeSort.as"/>
<codefragment>
<![CDATA[
		var insize:int = 1, nmerges:int, psize:int, qsize:int, i:int;
		
		if (descending)
		{
			while (true)
			{
				p = h;
				h = tail = null;
				nmerges = 0;
				
				while (p)
				{
					nmerges++;
					
					for (i = 0, psize = 0, q = p; i < insize; i++)
					{
						psize++;
						q = q.next;
						if (!q) break;
					}
					
					qsize = insize;
					
					while (psize > 0 || (qsize > 0 && q))
					{
						if (psize == 0)
						{
							e = q; q = q.next; qsize--;
						}
						else
						if (qsize == 0 || !q)
						{
							e = p; p = p.next; psize--;
						}
						else
						if (p.data - q.data >= 0)
						{
							e = p; p = p.next; psize--;
						} 
						else
						{
							e = q; q = q.next; qsize--;
						}
						
						if (tail)
							tail.next = e;
						else
							h = e;
]]>
</codefragment>
</duplication>
<duplication lines="60" tokens="177">
<file line="80" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedMergeSort.as"/>
<file line="79" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\sLinkedMergeSort.as"/>
<codefragment>
<![CDATA[
						tail = e;
					}
					p = q;
				}
				
				tail.next = null;
				if (nmerges <= 1)
				{
					return h;
					break;
				}
				insize <<= 1;
			}
		}
		else
		{
			while (true)
			{
				p = h;
				h = tail = null;
				nmerges = 0;
				
				while (p)
				{
					nmerges++;
					
					for (i = 0, psize = 0, q = p; i < insize; i++)
					{
						psize++;
						q = q.next;
						if (!q) break;
					}
					
					qsize = insize;
					
					while (psize > 0 || (qsize > 0 && q))
					{
						if (psize == 0)
						{
							e = q; q = q.next; qsize--;
						}
						else
						if (qsize == 0 || !q)
						{
							e = p; p = p.next; psize--;
						}
						else
						if (p.data - q.data <= 0)
						{
							e = p; p = p.next; psize--;
						} 
						else
						{
							e = q; q = q.next; qsize--;
						}
						
						if (tail)
							tail.next = e;
						else
							h = e;
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="176">
<file line="878" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<file line="647" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledRowsLayout.as"/>
<codefragment>
<![CDATA[
			if(!isNaN(explicitHeight))
			{
				availableHeight = explicitHeight;
				verticalTileCount = Math.max(1, (explicitHeight - this._paddingTop - this._paddingBottom + this._verticalGap) / (tileHeight + this._verticalGap));
			}
			else if(!isNaN(maxHeight))
			{
				availableHeight = maxHeight;
				verticalTileCount = Math.max(1, (maxHeight - this._paddingTop - this._paddingBottom + this._verticalGap) / (tileHeight + this._verticalGap));
			}

			const totalPageWidth:Number = horizontalTileCount * (tileWidth + this._horizontalGap) - this._horizontalGap + this._paddingLeft + this._paddingRight;
			const totalPageHeight:Number = verticalTileCount * (tileHeight + this._verticalGap) - this._verticalGap + this._paddingTop + this._paddingBottom;
			const availablePageWidth:Number = isNaN(availableWidth) ? totalPageWidth : availableWidth;
			const availablePageHeight:Number = isNaN(availableHeight) ? totalPageHeight : availableHeight;

			const startX:Number = boundsX + this._paddingLeft;
			const startY:Number = boundsY + this._paddingTop;
]]>
</codefragment>
</duplication>
<duplication lines="55" tokens="174">
<file line="86" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedMergeSortCmp.as"/>
<file line="84" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\sLinkedMergeSortCmp.as"/>
<codefragment>
<![CDATA[
				tail.next = null;
				if (nmerges <= 1)
				{
					return h;
					break;
				}
				insize <<= 1;
			}
		}
		else
		{
			while (true)
			{
				p = h;
				h = tail = null;
				nmerges = 0;
				
				while (p)
				{
					nmerges++;
					
					for (i = 0, psize = 0, q = p; i < insize; i++)
					{
						psize++;
						q = q.next;
						if (!q) break;
					}
					
					qsize = insize;
					
					while (psize > 0 || (qsize > 0 && q))
					{
						if (psize == 0)
						{
							e = q; q = q.next; qsize--;
						}
						else
						if (qsize == 0 || !q)
						{
							e = p; p = p.next; psize--;
						}
						else
						if (cmp(p.data, q.data) <= 0)
						{
							e = p; p = p.next; psize--;
						} 
						else
						{
							e = q; q = q.next; qsize--;
						}
						
						if (tail)
							tail.next = e;
						else
							h = e;
]]>
</codefragment>
</duplication>
<duplication lines="84" tokens="174">
<file line="343" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\DLinkedList.as"/>
<file line="331" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\SLinkedList.as"/>
<codefragment>
<![CDATA[
			n = head;
			while (n)
			{
				c.append(n.data);
				n = n.next;
			}
			var k:int = args.length;
			for (var i:int = 0; i < k; i++)
			{
				a = args[i];
				n = a.head;
				while (n)
				{
					c.append(n.data);
					n = n.next;
				}
			}
			return c;
		}
		
		/**
		 * Sorts the list.
		 * 
		 * The default sorting algorithm is 'mergesort'.
		 * 
		 * If the LinkedList.INSERTION_SORT flag is used, the list is sorted
		 * using the insertion sort algorithm instead, which is much faster for
		 * nearly sorted lists.
		 * <ul><li>default sort behaviour: mergesort, numeric, ascending</li>
		 * <li>sorting is ascending (for character-strings: a precedes z)</li>
		 * <li>sorting is case-sensitive: Z precedes a</li>
		 * <li>the list is directly modified to reflect the sort order</li>
		 * <li>multiple elements that have identical values are placed
		 * consecutively in the sorted array in no particular order</li></ul>
		 * 
		 * @see http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
		 * 
		 * @param sortOptions
		 * 
		 * You pass an optional comparison function and/or one or more bitflags
		 * that determine the behavior of the sort method.<br/>
		 * Syntax: myList.sort(compareFunction, flags)<br/><br/>
		 * <i>compareFunction</i> - A comparison function used to determine the
		 *                          sorting order of elements in an array
		 *                          (optional).<br/>
		 *                          It should take two arguments and return a
		 *                          result of -1 if A < B, 0 if A == B and
		 *                          1 if A > B in the sorted sequence.
		 * <br/><br/>
		 * <i>flags</i> - One or more numbers or defined constants, separated by
		 *                the | (bitwise OR) operator, that change the behavior
		 *                of the sort from the default:<br/>
		 *                2  or SortOptions.INSERTION_SORT<br/>
		 *                4  or SortOptions.CHARACTER_STRING<br/>
		 *                8  or SortOptions.CASEINSENSITIVE<br/>
		 *                16 or SortOptions.DESCENDING<br/>
		 **/
		public function sort(...sortOptions):void
		{
			if (_count <= 1) return;
			if (sortOptions.length > 0)
			{
				var b:int = 0;
				var cmp:Function = null;
				
				var o:* = sortOptions[0];
				if (o is Function)
				{
					cmp = o;
					if (sortOptions.length > 1)
					{
						o = sortOptions[1];
						if (o is int)
							b = o;
					}
				}
				else
				if (o is int)
					b = o;
				
				if (Boolean(cmp))
				{
					if (b & 2)
						head = sLinkedInsertionSortCmp(head, cmp, b == 18);
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="173">
<file line="254" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\ptolemy\geom3D\core\JoinedFace.as"/>
<file line="206" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\ptolemy\geom3D\core\RegularFace.as"/>
<codefragment>
<![CDATA[
				w.update(arr[0],arr[1],arr[2]);
			}
		}
		
		protected function paddingCalculate(t:Transformation, e:Eye):void
		{
			if (_padding==1) return;
			
			var l:Logic;
			for each (l in _padded) { l.calculate(t,e); }
		}
		
		protected function doPaddingDraw(g:Graphics):void
		{
			var i:int;
			var p:Point;
			
			p = _padded[_padded.length-1] as Point;
			
			g.beginFill(_fillColor>>>8,(_fillColor&0xFF)/0xFF);
			if (_outlineWidth>=0)
				g.lineStyle(_outlineWidth,_outlineColor>>>8,(_outlineColor&0xFF)/0xFF);
			else
				g.lineStyle();
				
			p.moveTo(g);
			for (i=0;i<_padded.length;i++)
			{
				p = _padded[i] as Point;
				p.lineTo(g);
			}
			
			g.endFill();
]]>
</codefragment>
</duplication>
<duplication lines="62" tokens="170">
<file line="65" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\sLinkedMergeSort.as"/>
<file line="65" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\sLinkedMergeSortCmp.as"/>
<codefragment>
<![CDATA[
						if (cmp(p.data, q.data) >= 0)
						{
							e = p; p = p.next; psize--;
						} 
						else
						{
							e = q; q = q.next; qsize--;
						}
						
						if (tail)
							tail.next = e;
						else
							h = e;
						
						tail = e;
					}
					p = q;
				}
				
				tail.next = null;
				if (nmerges <= 1)
				{
					return h;
					break;
				}
				insize <<= 1;
			}
		}
		else
		{
			while (true)
			{
				p = h;
				h = tail = null;
				nmerges = 0;
				
				while (p)
				{
					nmerges++;
					
					for (i = 0, psize = 0, q = p; i < insize; i++)
					{
						psize++;
						q = q.next;
						if (!q) break;
					}
					
					qsize = insize;
					
					while (psize > 0 || (qsize > 0 && q))
					{
						if (psize == 0)
						{
							e = q; q = q.next; qsize--;
						}
						else
						if (qsize == 0 || !q)
						{
							e = p; p = p.next; psize--;
						}
						else
						if (cmp(p.data, q.data) <= 0)
]]>
</codefragment>
</duplication>
<duplication lines="37" tokens="168">
<file line="50" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\graph\searcher\DFSsearcher.as"/>
<file line="12" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\jp\dip\hael\gameai\graph\searcher\DFS.as"/>
<codefragment>
<![CDATA[
		public function DFS(graph:GraphEx)
		{
			super(graph);
		}
		
		override public function search(src:int, dst:int) : Boolean
		{
			var queue:Array /* of Edge */ = [];
			queue.push(new Edge(src, src));
			
			var visited:Array /* of Boolean */ = new Array(graphRef_.size);
			visited[src] = true;
			
			var route:Array /* of int */ = new Array(graphRef_.size);
			
			while(queue.length > 0){
				var next:Edge = queue.pop();
				route[next.dst] = next.src;
				
				if(next.dst == dst){
					src_ = src;
					dst_ = dst;
					route_ = route;
					found_ = true;
					return true;
				}
				
				var dsts:Array = graphRef_.edge(next.dst);
				for each(var e:Edge in dsts){
					if(!visited[e.dst]){
						queue.push(e);
						visited[e.dst] = true;
					}
				}
			}
			
			return false;
]]>
</codefragment>
</duplication>
<duplication lines="52" tokens="166">
<file line="2113" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<file line="889" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\ListDataViewPort.as"/>
<codefragment>
<![CDATA[
		private function removedFromStageHandler(event:Event):void
		{
			this.touchPointID = -1;
		}

		private function touchHandler(event:TouchEvent):void
		{
			if(!this._isEnabled)
			{
				this.touchPointID = -1;
				return;
			}

			const touches:Vector.<Touch> = event.getTouches(this, null, HELPER_TOUCHES_VECTOR);
			if(touches.length == 0)
			{
				return;
			}
			if(this.touchPointID >= 0)
			{
				var touch:Touch;
				for each(var currentTouch:Touch in touches)
				{
					if(currentTouch.id == this.touchPointID)
					{
						touch = currentTouch;
						break;
					}
				}
				if(!touch)
				{
					HELPER_TOUCHES_VECTOR.length = 0;
					return;
				}
				if(touch.phase == TouchPhase.ENDED)
				{
					this.touchPointID = -1;
				}
			}
			else
			{
				for each(touch in touches)
				{
					if(touch.phase == TouchPhase.BEGAN)
					{
						this.touchPointID = touch.id;
						this._isScrolling = false;
						break;
					}
				}
			}
			HELPER_TOUCHES_VECTOR.length = 0;
]]>
</codefragment>
</duplication>
<duplication lines="39" tokens="166">
<file line="36" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\graph\PriorityEdgeQueueDsc.as"/>
<file line="10" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\jp\dip\hael\gameai\graph\searcher\PriorityEdgeQueueDsc.as"/>
<codefragment>
<![CDATA[
		public function get length():int { return priList_.length; }
		
		public function PriorityEdgeQueueDsc()
		{
			edgList_ = [];
			priList_ = [];
		}
		
		public function insert(edg:Edge, priority:int):void
		{
			var l:int = priList_.length;
			for(var i:int = 0; i < l; i++){
				if(priority >= priList_[i]){
					priList_.splice(i, 0, priority);
					edgList_.splice(i, 0, edg);
					break;
				}
			}
			if(i == l){
				priList_.push(priority);
				edgList_.push(edg);
			}
		}
		
		public function pop():Array
		{
			return [edgList_.pop(), priList_.pop()];
		}
		
		public function popObj():Edge
		{
			priList_.pop();
			return edgList_.pop();
		}
		
		public function popPriority():int
		{
			edgList_.pop();
			return priList_.pop();
]]>
</codefragment>
</duplication>
<duplication lines="32" tokens="161">
<file line="613" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\HorizontalLayout.as"/>
<file line="618" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\VerticalLayout.as"/>
<codefragment>
<![CDATA[
			result.contentHeight = totalHeight;
			result.viewPortWidth = availableWidth;
			result.viewPortHeight = availableHeight;
			return result;
		}

		/**
		 * @inheritDoc
		 */
		public function measureViewPort(itemCount:int, viewPortBounds:ViewPortBounds = null, result:Point = null):Point
		{
			if(!result)
			{
				result = new Point();
			}
			const explicitWidth:Number = viewPortBounds ? viewPortBounds.explicitWidth : NaN;
			const explicitHeight:Number = viewPortBounds ? viewPortBounds.explicitHeight : NaN;
			const needsWidth:Boolean = isNaN(explicitWidth);
			const needsHeight:Boolean = isNaN(explicitHeight);
			if(!needsWidth && !needsHeight)
			{
				result.x = explicitWidth;
				result.y = explicitHeight;
				return result;
			}

			const minWidth:Number = viewPortBounds ? viewPortBounds.minWidth : 0;
			const minHeight:Number = viewPortBounds ? viewPortBounds.minHeight : 0;
			const maxWidth:Number = viewPortBounds ? viewPortBounds.maxWidth : Number.POSITIVE_INFINITY;
			const maxHeight:Number = viewPortBounds ? viewPortBounds.maxHeight : Number.POSITIVE_INFINITY;

			var positionY:Number = 0;
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="161">
<file line="62" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\graph\searcher\DIJKSTRAsearcher.as"/>
<file line="18" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\jp\dip\hael\gameai\graph\searcher\Dijkstra.as"/>
<codefragment>
<![CDATA[
			var pq:PriorityQueueDsc = new PriorityQueueDsc();
			pq.insert(new Edge(src, src), 0);
			
			var route:Array /* of int */ = new Array(graphRef_.size);
			var weight:Array /* of int */ = new Array(graphRef_.size);
			
			while(pq.length > 0){
				var next:Edge = pq.popObj() as Edge;
				route[next.dst] = next.src;
				
				if(next.dst == dst){
					src_ = src;
					dst_ = dst;
					route_ = route;
					found_ = true;
					return true;
				}
				
				var dsts:Array = graphRef_.edge(next.dst);
				for each(var e:WeightedEdge in dsts){
					if(route[e.dst] === undefined){
						var w:int = (weight[next]>>0) + e.weight;
						weight[e.dst] = w;
						pq.insert(e, w);
					}
				}
			}
			
			return false;
]]>
</codefragment>
</duplication>
<duplication lines="32" tokens="161">
<file line="64" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\graph\searcher\BFSsearcher.as"/>
<file line="25" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\jp\dip\hael\gameai\graph\searcher\BFS.as"/>
<codefragment>
<![CDATA[
		public override function search(src:int, dst:int):Boolean
		{
			var queue:Array /* of Edge */ = [];
			queue.push(new Edge(src, src));
			
			var visited:Array /* of Boolean */ = new Array(graphRef_.size);
			visited[src] = true;
			
			var route:Array /* of int */ = new Array(graphRef_.size);
			
			while(queue.length > 0){
				var next:Edge = queue.shift();
				route[next.dst] = next.src;
				
				if(next.dst == dst){
					src_ = src;
					dst_ = dst;
					route_ = route;
					found_ = true;
					return true;
				}
				
				var dsts:Array = graphRef_.edge(next.dst);
				for each(var e:Edge in dsts){
					if(!visited[e.dst]){
						queue.push(e);
						visited[e.dst] = true;
					}
				}
			}
			
			return false;
]]>
</codefragment>
</duplication>
<duplication lines="8" tokens="161">
<file line="301" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<file line="349" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<codefragment>
<![CDATA[
					this.important.setXs(0, [0, 0, 0, 4, 0, 4, 0, 0, 0]);
					//convertedImportant
					this.convertedImportant.setXs(9, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.convertedImportant.setXs(8, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.convertedImportant.setXs(7, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.convertedImportant.setXs(6, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.convertedImportant.setXs(5, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.convertedImportant.setXs(4, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
]]>
</codefragment>
</duplication>
<duplication lines="8" tokens="161">
<file line="277" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<file line="325" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<codefragment>
<![CDATA[
					this.important.setXs(9, [0, 0, 0, 4, 0, 4, 0, 0, 0]);
					//convertedImportant
					this.convertedImportant.setXs(0, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.convertedImportant.setXs(1, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.convertedImportant.setXs(2, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.convertedImportant.setXs(3, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.convertedImportant.setXs(4, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.convertedImportant.setXs(5, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
]]>
</codefragment>
</duplication>
<duplication lines="39" tokens="160">
<file line="27" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\sLinkedMergeSort.as"/>
<file line="27" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\sLinkedMergeSortCmp.as"/>
<codefragment>
<![CDATA[
		if (!node || cmp == null) return null;
		
		var h:SListNode = node, p:SListNode, q:SListNode, e:SListNode, tail:SListNode;
		var insize:int = 1, nmerges:int, psize:int, qsize:int, i:int;
		
		if (descending)
		{
			while (true)
			{
				p = h;
				h = tail = null;
				nmerges = 0;
				
				while (p)
				{
					nmerges++;
					
					for (i = 0, psize = 0, q = p; i < insize; i++)
					{
						psize++;
						q = q.next;
						if (!q) break;
					}
					
					qsize = insize;
					
					while (psize > 0 || (qsize > 0 && q))
					{
						if (psize == 0)
						{
							e = q; q = q.next; qsize--;
						}
						else
						if (qsize == 0 || !q)
						{
							e = p; p = p.next; psize--;
						}
						else
						if (cmp(p.data, q.data) >= 0)
]]>
</codefragment>
</duplication>
<duplication lines="39" tokens="160">
<file line="27" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedMergeSort.as"/>
<file line="27" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedMergeSortCmp.as"/>
<codefragment>
<![CDATA[
		if (!node || cmp == null) return null;
		
		var h:DListNode = node, p:DListNode, q:DListNode, e:DListNode, tail:DListNode;
		var insize:int = 1, nmerges:int, psize:int, qsize:int, i:int;
		
		if (descending)
		{
			while (true)
			{
				p = h;
				h = tail = null;
				nmerges = 0;
				
				while (p)
				{
					nmerges++;
					
					for (i = 0, psize = 0, q = p; i < insize; i++)
					{
						psize++;
						q = q.next;
						if (!q) break;
					}
					
					qsize = insize;
					
					while (psize > 0 || (qsize > 0 && q))
					{
						if (psize == 0)
						{
							e = q; q = q.next; qsize--;
						}
						else
						if (qsize == 0 || !q)
						{
							e = p; p = p.next; psize--;
						}
						else
						if (cmp(p.data, q.data) >= 0)
]]>
</codefragment>
</duplication>
<duplication lines="84" tokens="154">
<file line="147" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollText.as"/>
<file line="155" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\TextFieldTextRenderer.as"/>
<codefragment>
<![CDATA[
			this._text = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
		}

		/**
		 * @private
		 */
		protected var _textFormat:TextFormat;

		/**
		 * The font and styles used to draw the text.
		 *
		 * @see flash.text.TextFormat
		 */
		public function get textFormat():TextFormat
		{
			return this._textFormat;
		}

		/**
		 * @private
		 */
		public function set textFormat(value:TextFormat):void
		{
			if(this._textFormat == value)
			{
				return;
			}
			this._textFormat = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _styleSheet:StyleSheet;

		/**
		 * The <code>StyleSheet</code> object to pass to the TextField.
		 *
		 * @see flash.text.StyleSheet
		 */
		public function get styleSheet():StyleSheet
		{
			return this._styleSheet;
		}

		/**
		 * @private
		 */
		public function set styleSheet(value:StyleSheet):void
		{
			if(this._styleSheet == value)
			{
				return;
			}
			this._styleSheet = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _embedFonts:Boolean = false;

		/**
		 * Determines if the TextField should use an embedded font or not.
		 */
		public function get embedFonts():Boolean
		{
			return this._embedFonts;
		}

		/**
		 * @private
		 */
		public function set embedFonts(value:Boolean):void
		{
			if(this._embedFonts == value)
			{
				return;
			}
			this._embedFonts = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="150">
<file line="939" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<file line="942" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledRowsLayout.as"/>
<codefragment>
<![CDATA[
				else if(this._paging == PAGING_VERTICAL)
				{
					totalHeight = Math.ceil(itemCount / perPage) * availableHeight;
				}
			}

			result.x = needsWidth ? Math.max(minWidth, totalWidth) : explicitWidth;
			result.y = needsHeight ? Math.max(minHeight, totalHeight) : explicitHeight;
			return result;
		}

		/**
		 * @inheritDoc
		 */
		public function getVisibleIndicesAtScrollPosition(scrollX:Number, scrollY:Number, width:Number, height:Number, itemCount:int, result:Vector.<int> = null):Vector.<int>
		{
			if(!result)
			{
				result = new <int>[];
			}
			result.length = 0;

			const tileWidth:Number = this._useSquareTiles ? Math.max(0, this._typicalItemWidth, this._typicalItemHeight) : this._typicalItemWidth;
			const tileHeight:Number = this._useSquareTiles ? tileWidth : this._typicalItemHeight;
			const horizontalTileCount:int = Math.max(1, (width - this._paddingLeft - this._paddingRight + this._horizontalGap) / (tileWidth + this._horizontalGap));
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="147">
<file line="907" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<file line="477" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\ListDataViewPort.as"/>
<codefragment>
<![CDATA[
			return this._layout.getScrollPositionForIndex(index, this._layoutItems, 0, 0, this.actualVisibleWidth, this.actualVisibleHeight, result);
		}

		override protected function draw():void
		{
			const dataInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_DATA);
			const scrollInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_SCROLL);
			const sizeInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_SIZE);
			const selectionInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_SELECTED);
			const itemRendererInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_ITEM_RENDERER_FACTORY);
			const stylesInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_STYLES);
			const stateInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_STATE);

			if(stylesInvalid || dataInvalid || itemRendererInvalid)
			{
				this.calculateTypicalValues();
			}

			if(scrollInvalid || sizeInvalid || dataInvalid || itemRendererInvalid)
			{
				this.refreshRenderers(itemRendererInvalid);
			}
			if(scrollInvalid || sizeInvalid || dataInvalid || stylesInvalid || itemRendererInvalid)
			{
				this.refreshItemRendererStyles();
]]>
</codefragment>
</duplication>
<duplication lines="54" tokens="146">
<file line="716" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<file line="715" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledRowsLayout.as"/>
<codefragment>
<![CDATA[
						positionY = startY + availableHeight * pageIndex;
					}
				}
				if(item)
				{
					switch(this._tileHorizontalAlign)
					{
						case TILE_HORIZONTAL_ALIGN_JUSTIFY:
						{
							item.x = positionX;
							item.width = tileWidth;
							break;
						}
						case TILE_HORIZONTAL_ALIGN_LEFT:
						{
							item.x = positionX;
							break;
						}
						case TILE_HORIZONTAL_ALIGN_RIGHT:
						{
							item.x = positionX + tileWidth - item.width;
							break;
						}
						default: //center or unknown
						{
							item.x = positionX + (tileWidth - item.width) / 2;
						}
					}
					switch(this._tileVerticalAlign)
					{
						case TILE_VERTICAL_ALIGN_JUSTIFY:
						{
							item.y = positionY;
							item.height = tileHeight;
							break;
						}
						case TILE_VERTICAL_ALIGN_TOP:
						{
							item.y = positionY;
							break;
						}
						case TILE_VERTICAL_ALIGN_BOTTOM:
						{
							item.y = positionY + tileHeight - item.height;
							break;
						}
						default: //middle or unknown
						{
							item.y = positionY + (tileHeight - item.height) / 2;
						}
					}
					if(this._useVirtualLayout)
					{
						this._discoveredItemsCache.push(item);
]]>
</codefragment>
</duplication>
<duplication lines="54" tokens="146">
<file line="364" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<file line="250" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\ListDataViewPort.as"/>
<codefragment>
<![CDATA[
		private var _itemRendererType:Class;

		public function get itemRendererType():Class
		{
			return this._itemRendererType;
		}

		public function set itemRendererType(value:Class):void
		{
			if(this._itemRendererType == value)
			{
				return;
			}

			this._itemRendererType = value;
			this.invalidate(INVALIDATION_FLAG_ITEM_RENDERER_FACTORY);
		}

		private var _itemRendererFactory:Function;

		public function get itemRendererFactory():Function
		{
			return this._itemRendererFactory;
		}

		public function set itemRendererFactory(value:Function):void
		{
			if(this._itemRendererFactory === value)
			{
				return;
			}

			this._itemRendererFactory = value;
			this.invalidate(INVALIDATION_FLAG_ITEM_RENDERER_FACTORY);
		}

		private var _itemRendererName:String;

		public function get itemRendererName():String
		{
			return this._itemRendererName;
		}

		public function set itemRendererName(value:String):void
		{
			if(this._itemRendererName == value)
			{
				return;
			}
			this._itemRendererName = value;
			this.invalidate(INVALIDATION_FLAG_ITEM_RENDERER_FACTORY);
		}

		private var _typicalItemWidth:Number = NaN;
]]>
</codefragment>
</duplication>
<duplication lines="63" tokens="146">
<file line="518" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ButtonGroup.as"/>
<file line="435" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\PickerList.as"/>
<codefragment>
<![CDATA[
			this.invalidate(INVALIDATION_FLAG_BUTTON_FACTORY);
		}
		
		/**
		 * @private
		 */
		protected var _buttonProperties:PropertyProxy;
		
		/**
		 * A set of key/value pairs to be passed down to the picker's button
		 * sub-component. It is a <code>feathers.controls.Button</code>
		 * instance.
		 *
		 * <p>If the subcomponent has its own subcomponents, their properties
		 * can be set too, using attribute <code>&#64;</code> notation. For example,
		 * to set the skin on the thumb of a <code>SimpleScrollBar</code>
		 * which is in a <code>Scroller</code> which is in a <code>List</code>,
		 * you can use the following syntax:</p>
		 * <pre>list.scrollerProperties.&#64;verticalScrollBarProperties.&#64;thumbProperties.defaultSkin = new Image(texture);</pre>
		 * 
		 * @see feathers.controls.Button
		 */
		public function get buttonProperties():Object
		{
			if(!this._buttonProperties)
			{
				this._buttonProperties = new PropertyProxy(childProperties_onChange);
			}
			return this._buttonProperties;
		}
		
		/**
		 * @private
		 */
		public function set buttonProperties(value:Object):void
		{
			if(this._buttonProperties == value)
			{
				return;
			}
			if(!value)
			{
				value = new PropertyProxy();
			}
			if(!(value is PropertyProxy))
			{
				const newValue:PropertyProxy = new PropertyProxy();
				for(var propertyName:String in value)
				{
					newValue[propertyName] = value[propertyName];
				}
				value = newValue;
			}
			if(this._buttonProperties)
			{
				this._buttonProperties.removeOnChangeCallback(childProperties_onChange);
			}
			this._buttonProperties = PropertyProxy(value);
			if(this._buttonProperties)
			{
				this._buttonProperties.addOnChangeCallback(childProperties_onChange);
			}
			this.invalidate(INVALIDATION_FLAG_STYLES);
]]>
</codefragment>
</duplication>
<duplication lines="48" tokens="143">
<file line="54" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<file line="54" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\ListDataViewPort.as"/>
<codefragment>
<![CDATA[
			this.addEventListener(TouchEvent.TOUCH, touchHandler);
		}

		private var touchPointID:int = -1;

		private var _minVisibleWidth:Number = 0;

		public function get minVisibleWidth():Number
		{
			return this._minVisibleWidth;
		}

		public function set minVisibleWidth(value:Number):void
		{
			if(this._minVisibleWidth == value)
			{
				return;
			}
			if(isNaN(value))
			{
				throw new ArgumentError("minVisibleWidth cannot be NaN");
			}
			this._minVisibleWidth = value;
			this.invalidate(INVALIDATION_FLAG_SIZE);
		}

		private var _maxVisibleWidth:Number = Number.POSITIVE_INFINITY;

		public function get maxVisibleWidth():Number
		{
			return this._maxVisibleWidth;
		}

		public function set maxVisibleWidth(value:Number):void
		{
			if(this._maxVisibleWidth == value)
			{
				return;
			}
			if(isNaN(value))
			{
				throw new ArgumentError("maxVisibleWidth cannot be NaN");
			}
			this._maxVisibleWidth = value;
			this.invalidate(INVALIDATION_FLAG_SIZE);
		}

		private var actualVisibleWidth:Number = 0;
]]>
</codefragment>
</duplication>
<duplication lines="104" tokens="142">
<file line="31" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<file line="31" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledRowsLayout.as"/>
<codefragment>
<![CDATA[
	public class TiledRowsLayout extends EventDispatcher implements IVirtualLayout
	{
		/**
		 * If the total item height is smaller than the height of the bounds,
		 * the items will be aligned to the top.
		 */
		public static const VERTICAL_ALIGN_TOP:String = "top";

		/**
		 * If the total item height is smaller than the height of the bounds,
		 * the items will be aligned to the middle.
		 */
		public static const VERTICAL_ALIGN_MIDDLE:String = "middle";

		/**
		 * If the total item height is smaller than the height of the bounds,
		 * the items will be aligned to the bottom.
		 */
		public static const VERTICAL_ALIGN_BOTTOM:String = "bottom";

		/**
		 * If the total item width is smaller than the width of the bounds, the
		 * items will be aligned to the left.
		 */
		public static const HORIZONTAL_ALIGN_LEFT:String = "left";

		/**
		 * If the total item width is smaller than the width of the bounds, the
		 * items will be aligned to the center.
		 */
		public static const HORIZONTAL_ALIGN_CENTER:String = "center";

		/**
		 * If the total item width is smaller than the width of the bounds, the
		 * items will be aligned to the right.
		 */
		public static const HORIZONTAL_ALIGN_RIGHT:String = "right";

		/**
		 * If an item height is smaller than the height of a tile, the item will
		 * be aligned to the top edge of the tile.
		 */
		public static const TILE_VERTICAL_ALIGN_TOP:String = "top";

		/**
		 * If an item height is smaller than the height of a tile, the item will
		 * be aligned to the middle of the tile.
		 */
		public static const TILE_VERTICAL_ALIGN_MIDDLE:String = "middle";

		/**
		 * If an item height is smaller than the height of a tile, the item will
		 * be aligned to the bottom edge of the tile.
		 */
		public static const TILE_VERTICAL_ALIGN_BOTTOM:String = "bottom";

		/**
		 * The item will be resized to fit the height of the tile.
		 */
		public static const TILE_VERTICAL_ALIGN_JUSTIFY:String = "justify";

		/**
		 * If an item width is smaller than the width of a tile, the item will
		 * be aligned to the left edge of the tile.
		 */
		public static const TILE_HORIZONTAL_ALIGN_LEFT:String = "left";

		/**
		 * If an item width is smaller than the width of a tile, the item will
		 * be aligned to the center of the tile.
		 */
		public static const TILE_HORIZONTAL_ALIGN_CENTER:String = "center";

		/**
		 * If an item width is smaller than the width of a tile, the item will
		 * be aligned to the right edge of the tile.
		 */
		public static const TILE_HORIZONTAL_ALIGN_RIGHT:String = "right";

		/**
		 * The item will be resized to fit the width of the tile.
		 */
		public static const TILE_HORIZONTAL_ALIGN_JUSTIFY:String = "justify";

		/**
		 * The items will be positioned in pages horizontally from left to right.
		 */
		public static const PAGING_HORIZONTAL:String = "horizontal";

		/**
		 * The items will be positioned in pages vertically from top to bottom.
		 */
		public static const PAGING_VERTICAL:String = "vertical";

		/**
		 * The items will not be paged. In other words, they will be positioned
		 * in a continuous set of rows without gaps.
		 */
		public static const PAGING_NONE:String = "none";

		/**
		 * Constructor.
		 */
		public function TiledRowsLayout()
]]>
</codefragment>
</duplication>
<duplication lines="6" tokens="139">
<file line="366" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<file line="390" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<codefragment>
<![CDATA[
					this.important.setXs(7, [0, 0, 0, 1, 2, 1, 0, 0, 0]);
					this.important.setXs(3, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(4, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(5, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(6, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(0, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
]]>
</codefragment>
</duplication>
<duplication lines="47" tokens="138">
<file line="116" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<file line="96" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\LayoutViewPort.as"/>
<codefragment>
<![CDATA[
			this._visibleWidth = value;
			this.invalidate(INVALIDATION_FLAG_SIZE);
		}

		private var _minVisibleHeight:Number = 0;

		public function get minVisibleHeight():Number
		{
			return this._minVisibleHeight;
		}

		public function set minVisibleHeight(value:Number):void
		{
			if(this._minVisibleHeight == value)
			{
				return;
			}
			if(isNaN(value))
			{
				throw new ArgumentError("minVisibleHeight cannot be NaN");
			}
			this._minVisibleHeight = value;
			this.invalidate(INVALIDATION_FLAG_SIZE);
		}

		private var _maxVisibleHeight:Number = Number.POSITIVE_INFINITY;

		public function get maxVisibleHeight():Number
		{
			return this._maxVisibleHeight;
		}

		public function set maxVisibleHeight(value:Number):void
		{
			if(this._maxVisibleHeight == value)
			{
				return;
			}
			if(isNaN(value))
			{
				throw new ArgumentError("maxVisibleHeight cannot be NaN");
			}
			this._maxVisibleHeight = value;
			this.invalidate(INVALIDATION_FLAG_SIZE);
		}

		private var _visibleHeight:Number = NaN;
]]>
</codefragment>
</duplication>
<duplication lines="36" tokens="135">
<file line="30" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedMergeSort.as"/>
<file line="30" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\sLinkedMergeSortCmp.as"/>
<codefragment>
<![CDATA[
		var insize:int = 1, nmerges:int, psize:int, qsize:int, i:int;
		
		if (descending)
		{
			while (true)
			{
				p = h;
				h = tail = null;
				nmerges = 0;
				
				while (p)
				{
					nmerges++;
					
					for (i = 0, psize = 0, q = p; i < insize; i++)
					{
						psize++;
						q = q.next;
						if (!q) break;
					}
					
					qsize = insize;
					
					while (psize > 0 || (qsize > 0 && q))
					{
						if (psize == 0)
						{
							e = q; q = q.next; qsize--;
						}
						else
						if (qsize == 0 || !q)
						{
							e = p; p = p.next; psize--;
						}
						else
						if (cmp(p.data, q.data) >= 0)
]]>
</codefragment>
</duplication>
<duplication lines="6" tokens="135">
<file line="318" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<file line="366" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<codefragment>
<![CDATA[
					this.important.setXs(2, [0, 0, 0, 1, 2, 1, 0, 0, 0]);
					this.important.setXs(3, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(4, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(5, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(6, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(7, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
]]>
</codefragment>
</duplication>
<duplication lines="47" tokens="133">
<file line="1299" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="993" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<codefragment>
<![CDATA[
				this._thumbProperties.addOnChangeCallback(thumbProperties_onChange);
			}
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _touchPointID:int = -1;

		/**
		 * @private
		 */
		protected var _touchStartX:Number = NaN;

		/**
		 * @private
		 */
		protected var _touchStartY:Number = NaN;

		/**
		 * @private
		 */
		protected var _thumbStartX:Number = NaN;

		/**
		 * @private
		 */
		protected var _thumbStartY:Number = NaN;

		/**
		 * @private
		 */
		protected var _touchValue:Number;
		
		/**
		 * @private
		 */
		override protected function draw():void
		{
			const dataInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_DATA);
			const stylesInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_STYLES);
			var sizeInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_SIZE);
			const stateInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_STATE);
			const thumbFactoryInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_THUMB_FACTORY);
			const minimumTrackFactoryInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_MINIMUM_TRACK_FACTORY);
			const maximumTrackFactoryInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_MAXIMUM_TRACK_FACTORY);
]]>
</codefragment>
</duplication>
<duplication lines="48" tokens="133">
<file line="80" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedMergeSort.as"/>
<file line="79" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\sLinkedMergeSortCmp.as"/>
<codefragment>
<![CDATA[
						tail = e;
					}
					p = q;
				}
				
				tail.next = null;
				if (nmerges <= 1)
				{
					return h;
					break;
				}
				insize <<= 1;
			}
		}
		else
		{
			while (true)
			{
				p = h;
				h = tail = null;
				nmerges = 0;
				
				while (p)
				{
					nmerges++;
					
					for (i = 0, psize = 0, q = p; i < insize; i++)
					{
						psize++;
						q = q.next;
						if (!q) break;
					}
					
					qsize = insize;
					
					while (psize > 0 || (qsize > 0 && q))
					{
						if (psize == 0)
						{
							e = q; q = q.next; qsize--;
						}
						else
						if (qsize == 0 || !q)
						{
							e = p; p = p.next; psize--;
						}
						else
						if (cmp(p.data, q.data) <= 0)
]]>
</codefragment>
</duplication>
<duplication lines="40" tokens="133">
<file line="568" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\DLinkedList.as"/>
<file line="525" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\SLinkedList.as"/>
<codefragment>
<![CDATA[
				var c:SLinkedList = new SLinkedList();
				var i:int, k:int;
				
				if (deleteCount == 0xffffffff)
				{
					if (start.node == tail) return c;
					while (start.node)
					{
						c.append(start.node.data);
						start.remove();
					}
					start.list = c;
					start.node = s;
					return c;
				}
				else
				{
					for (i = 0; i < deleteCount; i++)
					{
						if (start.node)
						{
							c.append(start.node.data);
							start.remove();
						}
						else
							break;
					}
				}
				
				k = args.length;
				if (k > 0)
				{
					if (_count == 0)
					{
						for (i = 0; i < k; i++)
							append(args[i]);
					}
					else
					{
						var n:SListNode;
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="132">
<file line="146" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\org\osflash\signals\natives\NativeRelaySignal.as"/>
<file line="155" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\org\osflash\signals\natives\NativeSignal.as"/>
<codefragment>
<![CDATA[
		public function dispatch(...valueObjects):void
		{
			//TODO: check if ...valueObjects can ever be null.
			if (null == valueObjects) throw new ArgumentError('Event object expected.');

			if (valueObjects.length != 1) throw new ArgumentError('No more than one Event object expected.');

			dispatchEvent(valueObjects[0] as Event);
		}

		/**
		 * Unlike other signals, NativeSignal does not dispatch null
		 * because it causes an exception in EventDispatcher.
		 * @inheritDoc
		 * @throws ArgumentError <code>ArgumentError</code>: Target object cannot be <code>null</code>.
		 * @throws ArgumentError <code>ArgumentError</code>: Event object cannot be <code>null</code>.
		 * @throws ArgumentError <code>ArgumentError</code>: Event object [event] is not an instance of [eventClass].
		 * @throws ArgumentError <code>ArgumentError</code>: Event object has incorrect type. Expected [eventType] but was [event.type].
		 */
		public function dispatchEvent(event:Event):Boolean
		{
			if (!target) throw new ArgumentError('Target object cannot be null.');
			if (!event)  throw new ArgumentError('Event object cannot be null.');
			
			if (!(event is eventClass))
				throw new ArgumentError('Event object '+event+' is not an instance of '+eventClass+'.');
				
			if (event.type != eventType)
				throw new ArgumentError('Event object has incorrect type. Expected <'+eventType+'> but was <'+event.type+'>.');
			
			return target.dispatchEvent(event);
		}
		
		protected function registerListenerWithPriority(listener:Function, once:Boolean = false, priority:int = 0):ISlot
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="132">
<file line="582" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<file line="470" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\VerticalLayout.as"/>
<codefragment>
<![CDATA[
			this._scrollPositionVerticalAlign = value;
		}

		/**
		 * @inheritDoc
		 */
		public function layout(items:Vector.<DisplayObject>, viewPortBounds:ViewPortBounds = null, result:LayoutBoundsResult = null):LayoutBoundsResult
		{
			const boundsX:Number = viewPortBounds ? viewPortBounds.x : 0;
			const boundsY:Number = viewPortBounds ? viewPortBounds.y : 0;
			const minWidth:Number = viewPortBounds ? viewPortBounds.minWidth : 0;
			const minHeight:Number = viewPortBounds ? viewPortBounds.minHeight : 0;
			const maxWidth:Number = viewPortBounds ? viewPortBounds.maxWidth : Number.POSITIVE_INFINITY;
			const maxHeight:Number = viewPortBounds ? viewPortBounds.maxHeight : Number.POSITIVE_INFINITY;
			const explicitWidth:Number = viewPortBounds ? viewPortBounds.explicitWidth : NaN;
			const explicitHeight:Number = viewPortBounds ? viewPortBounds.explicitHeight : NaN;

			if(!this._useVirtualLayout || this._hasVariableItemDimensions ||
]]>
</codefragment>
</duplication>
<duplication lines="36" tokens="131">
<file line="2082" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="1660" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<codefragment>
<![CDATA[
				else if(touch.phase == TouchPhase.ENDED)
				{
					this._touchPointID = -1;
					this.isDragging = false;
					if(!this.liveDragging)
					{
						this.dispatchEventWith(Event.CHANGE);
					}
					this.dispatchEventWith(FeathersEventType.END_INTERACTION);
				}
			}
			else
			{
				for each(touch in touches)
				{
					if(touch.phase == TouchPhase.BEGAN)
					{
						touch.getLocation(this, HELPER_POINT);
						this._touchPointID = touch.id;
						this._thumbStartX = this.thumb.x;
						this._thumbStartY = this.thumb.y;
						this._touchStartX = HELPER_POINT.x;
						this._touchStartY = HELPER_POINT.y;
						this.isDragging = true;
						this.dispatchEventWith(FeathersEventType.BEGIN_INTERACTION);
						break;
					}
				}
			}
			HELPER_TOUCHES_VECTOR.length = 0;
		}

		/**
		 * @private
		 */
		protected function stage_keyDownHandler(event:KeyboardEvent):void
]]>
</codefragment>
</duplication>
<duplication lines="43" tokens="130">
<file line="59" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<file line="41" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\LayoutViewPort.as"/>
<codefragment>
<![CDATA[
		private var _minVisibleWidth:Number = 0;

		public function get minVisibleWidth():Number
		{
			return this._minVisibleWidth;
		}

		public function set minVisibleWidth(value:Number):void
		{
			if(this._minVisibleWidth == value)
			{
				return;
			}
			if(isNaN(value))
			{
				throw new ArgumentError("minVisibleWidth cannot be NaN");
			}
			this._minVisibleWidth = value;
			this.invalidate(INVALIDATION_FLAG_SIZE);
		}

		private var _maxVisibleWidth:Number = Number.POSITIVE_INFINITY;

		public function get maxVisibleWidth():Number
		{
			return this._maxVisibleWidth;
		}

		public function set maxVisibleWidth(value:Number):void
		{
			if(this._maxVisibleWidth == value)
			{
				return;
			}
			if(isNaN(value))
			{
				throw new ArgumentError("maxVisibleWidth cannot be NaN");
			}
			this._maxVisibleWidth = value;
			this.invalidate(INVALIDATION_FLAG_SIZE);
		}

		private var _visibleWidth:Number = NaN;
]]>
</codefragment>
</duplication>
<duplication lines="95" tokens="130">
<file line="915" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="1030" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ToggleSwitch.as"/>
<codefragment>
<![CDATA[
				this._offTrackProperties.addOnChangeCallback(childProperties_onChange);
			}
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _thumbFactory:Function;

		/**
		 * A function used to generate the toggle switch's thumb sub-component.
		 * This can be used to change properties on the thumb when it is first
		 * created. For instance, if you are skinning Feathers components
		 * without a theme, you might use <code>thumbFactory</code> to set
		 * skins and text styles on the thumb.
		 *
		 * <p>The function should have the following signature:</p>
		 * <pre>function():Button</pre>
		 *
		 * @see #thumbProperties
		 */
		public function get thumbFactory():Function
		{
			return this._thumbFactory;
		}

		/**
		 * @private
		 */
		public function set thumbFactory(value:Function):void
		{
			if(this._thumbFactory == value)
			{
				return;
			}
			this._thumbFactory = value;
			this.invalidate(INVALIDATION_FLAG_THUMB_FACTORY);
		}

		/**
		 * @private
		 */
		protected var _customThumbName:String;

		/**
		 * A name to add to the toggle switch's thumb sub-component. Typically
		 * used by a theme to provide different skins to different toggle switches.
		 *
		 * @see feathers.core.FeathersControl#nameList
		 * @see #thumbFactory
		 * @see #thumbProperties
		 */
		public function get customThumbName():String
		{
			return this._customThumbName;
		}

		/**
		 * @private
		 */
		public function set customThumbName(value:String):void
		{
			if(this._customThumbName == value)
			{
				return;
			}
			this._customThumbName = value;
			this.invalidate(INVALIDATION_FLAG_THUMB_FACTORY);
		}

		/**
		 * @private
		 */
		protected var _thumbProperties:PropertyProxy;

		/**
		 * A set of key/value pairs to be passed down to the toggle switch's
		 * thumb sub-component. The thumb is a
		 * <code>feathers.controls.Button</code> instance.
		 *
		 * <p>If the subcomponent has its own subcomponents, their properties
		 * can be set too, using attribute <code>&#64;</code> notation. For example,
		 * to set the skin on the thumb of a <code>SimpleScrollBar</code>
		 * which is in a <code>Scroller</code> which is in a <code>List</code>,
		 * you can use the following syntax:</p>
		 * <pre>list.scrollerProperties.&#64;verticalScrollBarProperties.&#64;thumbProperties.defaultSkin = new Image(texture);</pre>
		 * 
		 * @see feathers.controls.Button
		 */
		public function get thumbProperties():Object
		{
			if(!this._thumbProperties)
			{
				this._thumbProperties = new PropertyProxy(childProperties_onChange);
]]>
</codefragment>
</duplication>
<duplication lines="30" tokens="129">
<file line="32" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\org\osflash\signals\MonoSignal.as"/>
<file line="38" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\org\osflash\signals\OnceSignal.as"/>
<codefragment>
<![CDATA[
		public function OnceSignal(...valueClasses)
		{
			// Cannot use super.apply(null, valueClasses), so allow the subclass to call super(valueClasses).
			this.valueClasses = (valueClasses.length == 1 && valueClasses[0] is Array) ? valueClasses[0] : valueClasses;
		}
		
		/**
		 * @inheritDoc
		 * @throws ArgumentError <code>ArgumentError</code>: Invalid valueClasses argument: item at index should be a Class but was not.
		 */
		[ArrayElementType("Class")]
		public function get valueClasses():Array { return _valueClasses; }
		
		public function set valueClasses(value:Array):void
		{
			// Clone so the Array cannot be affected from outside.
			_valueClasses = value ? value.slice() : [];
			for (var i:int = _valueClasses.length; i--; )
			{
				if (!(_valueClasses[i] is Class))
				{
					throw new ArgumentError('Invalid valueClasses argument: ' +
						'item at index ' + i + ' should be a Class but was:<' +
						_valueClasses[i] + '>.' + getQualifiedClassName(_valueClasses[i]));
				}
			}
		}
		
		/** @inheritDoc */
		public function get numListeners():uint { return slots.length; }
]]>
</codefragment>
</duplication>
<duplication lines="40" tokens="127">
<file line="417" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<file line="317" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\ListDataViewPort.as"/>
<codefragment>
<![CDATA[
		private var _typicalItem:Object = null;

		public function get typicalItem():Object
		{
			return this._typicalItem;
		}

		public function set typicalItem(value:Object):void
		{
			if(this._typicalItem == value)
			{
				return;
			}
			this._typicalItem = value;
			this.invalidate(INVALIDATION_FLAG_SCROLL);
		}

		private var _itemRendererProperties:PropertyProxy;

		public function get itemRendererProperties():PropertyProxy
		{
			return this._itemRendererProperties;
		}

		public function set itemRendererProperties(value:PropertyProxy):void
		{
			if(this._itemRendererProperties == value)
			{
				return;
			}
			if(this._itemRendererProperties)
			{
				this._itemRendererProperties.removeOnChangeCallback(childProperties_onChange);
			}
			this._itemRendererProperties = PropertyProxy(value);
			if(this._itemRendererProperties)
			{
				this._itemRendererProperties.addOnChangeCallback(childProperties_onChange);
			}
			this.invalidate(INVALIDATION_FLAG_SCROLL);
]]>
</codefragment>
</duplication>
<duplication lines="43" tokens="127">
<file line="85" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedMergeSort.as"/>
<file line="86" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedMergeSortCmp.as"/>
<codefragment>
<![CDATA[
				tail.next = null;
				if (nmerges <= 1)
				{
					return h;
					break;
				}
				insize <<= 1;
			}
		}
		else
		{
			while (true)
			{
				p = h;
				h = tail = null;
				nmerges = 0;
				
				while (p)
				{
					nmerges++;
					
					for (i = 0, psize = 0, q = p; i < insize; i++)
					{
						psize++;
						q = q.next;
						if (!q) break;
					}
					
					qsize = insize;
					
					while (psize > 0 || (qsize > 0 && q))
					{
						if (psize == 0)
						{
							e = q; q = q.next; qsize--;
						}
						else
						if (qsize == 0 || !q)
						{
							e = p; p = p.next; psize--;
						}
						else
						if (cmp(p.data, q.data) <= 0)
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="127">
<file line="234" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\business\factory\ChessFactoryBase.as"/>
<file line="123" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\tic_tac_toe\busniess\factory\ChessFactory_TicTacToe.as"/>
<codefragment>
<![CDATA[
		override public function generateOmenVO(conductVO:ConductVO):OmenVO
		{
			//Your omenVO under construction.
			var omenVO:OmenVO;
			//TODO:importance initialization.
			// LOG.info(omenVO.dump());
			switch ((conductVO.target as ChessPiece).label)
			{
				case DefaultPiecesConstants.BLUE.label:
					omenVO=new OmenVO(DefaultPiecesConstants.BLUE_BISHOP.strength, DefaultPiecesConstants.BLUE.important, conductVO.target.chessVO.moves.celled, conductVO.target.chessVO.captures.celled, -1);
					break;
				case DefaultPiecesConstants.RED.label:
					omenVO=new OmenVO(DefaultPiecesConstants.RED_BISHOP.strength, DefaultPiecesConstants.RED.important, conductVO.target.chessVO.moves.celled, conductVO.target.chessVO.captures.celled, -1);
					break;
				default:
					break;
			}
			return omenVO;
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="126">
<file line="61" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\AnchorLayout.as"/>
<file line="114" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\MultiColumnGridLayout.as"/>
<codefragment>
<![CDATA[
		public function layout(items:Vector.<DisplayObject>, viewPortBounds:ViewPortBounds = null, result:LayoutBoundsResult = null):LayoutBoundsResult
		{
			const boundsX:Number = viewPortBounds ? viewPortBounds.x : 0;
			const boundsY:Number = viewPortBounds ? viewPortBounds.y : 0;
			const minWidth:Number = viewPortBounds ? viewPortBounds.minWidth : 0;
			const minHeight:Number = viewPortBounds ? viewPortBounds.minHeight : 0;
			const maxWidth:Number = viewPortBounds ? viewPortBounds.maxWidth : Number.POSITIVE_INFINITY;
			const maxHeight:Number = viewPortBounds ? viewPortBounds.maxHeight : Number.POSITIVE_INFINITY;
			const explicitWidth:Number = viewPortBounds ? viewPortBounds.explicitWidth : NaN;
			const explicitHeight:Number = viewPortBounds ? viewPortBounds.explicitHeight : NaN;

			var viewPortWidthPixels:Number = isNaN(explicitWidth) ? minWidth : explicitWidth;
]]>
</codefragment>
</duplication>
<duplication lines="55" tokens="126">
<file line="42" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ProgressBar.as"/>
<file line="293" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<codefragment>
<![CDATA[
		protected var _direction:String = DIRECTION_HORIZONTAL;

		[Inspectable(type="String",enumeration="horizontal,vertical")]
		/**
		 * Determines if the scroll bar's thumb can be dragged horizontally or
		 * vertically. When this value changes, the scroll bar's width and
		 * height values do not change automatically.
		 *
		 * @default DIRECTION_HORIZONTAL
		 * @see #DIRECTION_HORIZONTAL
		 * @see #DIRECTION_VERTICAL
		 */
		public function get direction():String
		{
			return this._direction;
		}

		/**
		 * @private
		 */
		public function set direction(value:String):void
		{
			if(this._direction == value)
			{
				return;
			}
			this._direction = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
		}

		/**
		 * @private
		 */
		protected var _value:Number = 0;

		/**
		 * @inheritDoc
		 */
		public function get value():Number
		{
			return this._value;
		}

		/**
		 * @private
		 */
		public function set value(newValue:Number):void
		{
			newValue = clamp(newValue, this._minimum, this._maximum);
			if(this._value == newValue)
			{
				return;
			}
			this._value = newValue;
			this.invalidate(INVALIDATION_FLAG_DATA);
]]>
</codefragment>
</duplication>
<duplication lines="6" tokens="126">
<file line="318" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<file line="390" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<codefragment>
<![CDATA[
					this.important.setXs(7, [0, 0, 0, 1, 2, 1, 0, 0, 0]);
					this.important.setXs(3, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(4, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(5, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(6, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(0, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="125">
<file line="61" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\AnchorLayout.as"/>
<file line="588" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<codefragment>
<![CDATA[
		public function layout(items:Vector.<DisplayObject>, viewPortBounds:ViewPortBounds = null, result:LayoutBoundsResult = null):LayoutBoundsResult
		{
			const boundsX:Number = viewPortBounds ? viewPortBounds.x : 0;
			const boundsY:Number = viewPortBounds ? viewPortBounds.y : 0;
			const minWidth:Number = viewPortBounds ? viewPortBounds.minWidth : 0;
			const minHeight:Number = viewPortBounds ? viewPortBounds.minHeight : 0;
			const maxWidth:Number = viewPortBounds ? viewPortBounds.maxWidth : Number.POSITIVE_INFINITY;
			const maxHeight:Number = viewPortBounds ? viewPortBounds.maxHeight : Number.POSITIVE_INFINITY;
			const explicitWidth:Number = viewPortBounds ? viewPortBounds.explicitWidth : NaN;
			const explicitHeight:Number = viewPortBounds ? viewPortBounds.explicitHeight : NaN;
]]>
</codefragment>
</duplication>
<duplication lines="87" tokens="123">
<file line="478" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\SimpleScrollBar.as"/>
<file line="1038" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ToggleSwitch.as"/>
<codefragment>
<![CDATA[
		protected var _thumbFactory:Function;

		/**
		 * A function used to generate the toggle switch's thumb sub-component.
		 * This can be used to change properties on the thumb when it is first
		 * created. For instance, if you are skinning Feathers components
		 * without a theme, you might use <code>thumbFactory</code> to set
		 * skins and text styles on the thumb.
		 *
		 * <p>The function should have the following signature:</p>
		 * <pre>function():Button</pre>
		 *
		 * @see #thumbProperties
		 */
		public function get thumbFactory():Function
		{
			return this._thumbFactory;
		}

		/**
		 * @private
		 */
		public function set thumbFactory(value:Function):void
		{
			if(this._thumbFactory == value)
			{
				return;
			}
			this._thumbFactory = value;
			this.invalidate(INVALIDATION_FLAG_THUMB_FACTORY);
		}

		/**
		 * @private
		 */
		protected var _customThumbName:String;

		/**
		 * A name to add to the toggle switch's thumb sub-component. Typically
		 * used by a theme to provide different skins to different toggle switches.
		 *
		 * @see feathers.core.FeathersControl#nameList
		 * @see #thumbFactory
		 * @see #thumbProperties
		 */
		public function get customThumbName():String
		{
			return this._customThumbName;
		}

		/**
		 * @private
		 */
		public function set customThumbName(value:String):void
		{
			if(this._customThumbName == value)
			{
				return;
			}
			this._customThumbName = value;
			this.invalidate(INVALIDATION_FLAG_THUMB_FACTORY);
		}

		/**
		 * @private
		 */
		protected var _thumbProperties:PropertyProxy;

		/**
		 * A set of key/value pairs to be passed down to the toggle switch's
		 * thumb sub-component. The thumb is a
		 * <code>feathers.controls.Button</code> instance.
		 *
		 * <p>If the subcomponent has its own subcomponents, their properties
		 * can be set too, using attribute <code>&#64;</code> notation. For example,
		 * to set the skin on the thumb of a <code>SimpleScrollBar</code>
		 * which is in a <code>Scroller</code> which is in a <code>List</code>,
		 * you can use the following syntax:</p>
		 * <pre>list.scrollerProperties.&#64;verticalScrollBarProperties.&#64;thumbProperties.defaultSkin = new Image(texture);</pre>
		 * 
		 * @see feathers.controls.Button
		 */
		public function get thumbProperties():Object
		{
			if(!this._thumbProperties)
			{
				this._thumbProperties = new PropertyProxy(childProperties_onChange);
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="123">
<file line="181" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\PanelScreen.as"/>
<file line="349" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Screen.as"/>
<codefragment>
<![CDATA[
		protected function screen_stage_keyDownHandler(event:KeyboardEvent):void
		{
			//we're accessing Keyboard.BACK (and others) using a string because
			//this code may be compiled for both Flash Player and AIR.
			if(this.backButtonHandler != null &&
				Object(Keyboard).hasOwnProperty("BACK") &&
				event.keyCode == Keyboard["BACK"])
			{
				event.stopImmediatePropagation();
				event.preventDefault();
				this.backButtonHandler();
			}
			
			if(this.menuButtonHandler != null &&
				Object(Keyboard).hasOwnProperty("MENU") &&
				event.keyCode == Keyboard["MENU"])
			{
				event.preventDefault();
				this.menuButtonHandler();
			}
			
			if(this.searchButtonHandler != null &&
				Object(Keyboard).hasOwnProperty("SEARCH") &&
				event.keyCode == Keyboard["SEARCH"])
			{
				event.preventDefault();
				this.searchButtonHandler();
]]>
</codefragment>
</duplication>
<duplication lines="52" tokens="122">
<file line="232" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\GroupedList.as"/>
<file line="173" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\List.as"/>
<codefragment>
<![CDATA[
		public function set dataProvider(value:ListCollection):void
		{
			if(this._dataProvider == value)
			{
				return;
			}
			if(this._dataProvider)
			{
				this._dataProvider.removeEventListener(CollectionEventType.RESET, dataProvider_resetHandler);
			}
			this._dataProvider = value;
			if(this._dataProvider)
			{
				this._dataProvider.addEventListener(CollectionEventType.RESET, dataProvider_resetHandler);
			}

			//reset the scroll position because this is a drastic change and
			//the data is probably completely different
			this.horizontalScrollPosition = 0;
			this.verticalScrollPosition = 0;

			this.invalidate(INVALIDATION_FLAG_DATA);
		}
		
		/**
		 * @private
		 */
		protected var _isSelectable:Boolean = true;
		
		/**
		 * Determines if an item in the list may be selected.
		 * 
		 * @default true
		 */
		public function get isSelectable():Boolean
		{
			return this._isSelectable;
		}
		
		/**
		 * @private
		 */
		public function set isSelectable(value:Boolean):void
		{
			if(this._isSelectable == value)
			{
				return;
			}
			this._isSelectable = value;
			if(!this._isSelectable)
			{
				this.selectedIndex = -1;
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="121">
<file line="690" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<file line="689" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledRowsLayout.as"/>
<codefragment>
<![CDATA[
				if(itemIndex == nextPageStartIndex)
				{
					//we're starting a new page, so handle alignment of the
					//items on the current page and update the positions
					if(this._paging != PAGING_NONE)
					{
						var discoveredItems:Vector.<DisplayObject> = this._useVirtualLayout ? this._discoveredItemsCache : items;
						var discoveredItemsFirstIndex:int = this._useVirtualLayout ? 0 : (itemIndex - perPage);
						var discoveredItemsLastIndex:int = this._useVirtualLayout ? (this._discoveredItemsCache.length - 1) : (itemIndex - 1);
						this.applyHorizontalAlign(discoveredItems, discoveredItemsFirstIndex, discoveredItemsLastIndex, totalPageWidth, availablePageWidth);
						this.applyVerticalAlign(discoveredItems, discoveredItemsFirstIndex, discoveredItemsLastIndex, totalPageHeight, availablePageHeight);
						this._discoveredItemsCache.length = 0;
					}
					pageIndex++;
					nextPageStartIndex += perPage;

					//we can use availableWidth and availableHeight here without
					//checking if they're NaN because we will never reach a
					//new page without them already being calculated.
					if(this._paging == PAGING_HORIZONTAL)
					{
						positionX = pageStartX = startX + availableWidth * pageIndex;
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="120">
<file line="743" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\SimpleScrollBar.as"/>
<file line="1169" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<file line="1277" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ToggleSwitch.as"/>
<codefragment>
<![CDATA[
			return this.setSizeInternal(newWidth, newHeight, false);
		}

		/**
		 * @private
		 */
		protected function createThumb():void
		{
			if(this.thumb)
			{
				this.thumb.removeFromParent(true);
				this.thumb = null;
			}

			const factory:Function = this._thumbFactory != null ? this._thumbFactory : defaultThumbFactory;
			const thumbName:String = this._customThumbName != null ? this._customThumbName : this.thumbName;
			this.thumb = Button(factory());
			this.thumb.nameList.add(thumbName);
			this.thumb.keepDownStateOnRollOut = true;
			this.thumb.addEventListener(TouchEvent.TOUCH, thumb_touchHandler);
			this.addChild(this.thumb);
		}

		/**
		 * @private
		 */
		protected function createOnTrack():void
]]>
</codefragment>
</duplication>
<duplication lines="39" tokens="120">
<file line="2123" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="2180" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<codefragment>
<![CDATA[
			const touches:Vector.<Touch> = event.getTouches(this.incrementButton, null, HELPER_TOUCHES_VECTOR);
			if(touches.length == 0)
			{
				return;
			}

			if(this._touchPointID >= 0)
			{
				var touch:Touch;
				for each(var currentTouch:Touch in touches)
				{
					if(currentTouch.id == this._touchPointID)
					{
						touch = currentTouch;
						break;
					}
				}

				if(!touch)
				{
					//end of hover
					HELPER_TOUCHES_VECTOR.length = 0;
					return;
				}
				if(touch.phase == TouchPhase.ENDED)
				{
					this._touchPointID = -1;
					this._repeatTimer.stop();
					this.dispatchEventWith(FeathersEventType.END_INTERACTION);
				}
			}
			else //if we get here, we don't have a saved touch ID yet
			{
				for each(touch in touches)
				{
					if(touch.phase == TouchPhase.BEGAN)
					{
						this.dispatchEventWith(FeathersEventType.BEGIN_INTERACTION);
						this.increment();
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="120">
<file line="1508" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="743" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\SimpleScrollBar.as"/>
<codefragment>
<![CDATA[
			return this.setSizeInternal(newWidth, newHeight, false);
		}

		/**
		 * @private
		 */
		protected function createThumb():void
		{
			if(this.thumb)
			{
				this.thumb.removeFromParent(true);
				this.thumb = null;
			}

			const factory:Function = this._thumbFactory != null ? this._thumbFactory : defaultThumbFactory;
			const thumbName:String = this._customThumbName != null ? this._customThumbName : this.thumbName;
			this.thumb = Button(factory());
			this.thumb.nameList.add(thumbName);
			this.thumb.keepDownStateOnRollOut = true;
			this.thumb.addEventListener(TouchEvent.TOUCH, thumb_touchHandler);
			this.addChild(this.thumb);
		}

		/**
		 * @private
		 */
		protected function refreshThumbStyles():void
]]>
</codefragment>
</duplication>
<duplication lines="32" tokens="119">
<file line="34" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedMergeSortCmp.as"/>
<file line="97" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedMergeSortCmp.as"/>
<codefragment>
<![CDATA[
			while (true)
			{
				p = h;
				h = tail = null;
				nmerges = 0;
				
				while (p)
				{
					nmerges++;
					
					for (i = 0, psize = 0, q = p; i < insize; i++)
					{
						psize++;
						q = q.next;
						if (!q) break;
					}
					
					qsize = insize;
					
					while (psize > 0 || (qsize > 0 && q))
					{
						if (psize == 0)
						{
							e = q; q = q.next; qsize--;
						}
						else
						if (qsize == 0 || !q)
						{
							e = p; p = p.next; psize--;
						}
						else
						if (cmp(p.data, q.data) <= 0)
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="117">
<file line="29" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\AI\fuzzyLogicSystem\InverseTrapezoidalMemberShipFunction.as"/>
<file line="24" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\AI\fuzzyLogicSystem\TrapezoidalMemberShipFunction.as"/>
<codefragment>
<![CDATA[
		public function TrapezoidalMemberShipFunction(a:Number,b:Number,c:Number,d:Number)
		{
			this.a = a;
			this.b = b;
			this.c = c;
			this.d = d;
		}
		
		public function memberShipOf(value:Number):Number
		{
			var result:Number=0;
			
			if( ((a==b)&&(value==a))
				|| ((c==d)&&(value==c))
			)
			{
				result = 1.0;
			}
			if( value>=a && value<b)
			{
				result = (b - value) / (b - a);
			}
			else if(value>=b && value<c)
]]>
</codefragment>
</duplication>
<duplication lines="53" tokens="116">
<file line="118" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\Scale3Image.as"/>
<file line="64" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\TiledImage.as"/>
<codefragment>
<![CDATA[
		private var _width:Number = NaN;
		
		/**
		 * @private
		 */
		override public function get width():Number
		{
			return this._width;
		}
		
		/**
		 * @private
		 */
		override public function set width(value:Number):void
		{
			if(this._width == value)
			{
				return;
			}
			this._width = this._hitArea.width = value;
			this._layoutChanged = true;
		}
		
		/**
		 * @private
		 */
		private var _height:Number = NaN;
		
		/**
		 * @private
		 */
		override public function get height():Number
		{
			return this._height;
		}
		
		/**
		 * @private
		 */
		override public function set height(value:Number):void
		{
			if(this._height == value)
			{
				return;
			}
			this._height = this._hitArea.height = value;
			this._layoutChanged = true;
		}
		
		/**
		 * @private
		 */
		private var _texture:Texture;
]]>
</codefragment>
</duplication>
<duplication lines="32" tokens="116">
<file line="34" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedMergeSort.as"/>
<file line="96" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedMergeSort.as"/>
<codefragment>
<![CDATA[
			while (true)
			{
				p = h;
				h = tail = null;
				nmerges = 0;
				
				while (p)
				{
					nmerges++;
					
					for (i = 0, psize = 0, q = p; i < insize; i++)
					{
						psize++;
						q = q.next;
						if (!q) break;
					}
					
					qsize = insize;
					
					while (psize > 0 || (qsize > 0 && q))
					{
						if (psize == 0)
						{
							e = q; q = q.next; qsize--;
						}
						else
						if (qsize == 0 || !q)
						{
							e = p; p = p.next; psize--;
						}
						else
						if (p.data - q.data <= 0)
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="115">
<file line="464" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiAd.as"/>
<file line="618" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiAd.as"/>
<codefragment>
<![CDATA[
            if (!MochiAd.load(options)) {
                options.ad_failed();
                options.ad_finished();
                return;
            }

            options.ad_started();

            var mc:MovieClip = clip._mochiad;
            mc["onUnload"] = function ():void {
                MochiAd._cleanup(mc);
                options.ad_finished();
            }


            /* Center the clip */
            var wh:Array = MochiAd._getRes(options, clip);
            var w:Number = wh[0];
            var h:Number = wh[1];
            mc.x = w * 0.5;
            mc.y = h * 0.5;

            var chk:MovieClip = createEmptyMovieClip(mc, "_mochiad_wait", 3);
            chk.ad_msec = ad_msec;
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="114">
<file line="827" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<file line="617" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\VerticalLayout.as"/>
<codefragment>
<![CDATA[
			result.contentWidth = this._horizontalAlign == HORIZONTAL_ALIGN_JUSTIFY ? availableWidth : totalWidth;
			result.contentHeight = totalHeight;
			result.viewPortWidth = availableWidth;
			result.viewPortHeight = availableHeight;
			return result;
		}

		/**
		 * @inheritDoc
		 */
		public function measureViewPort(itemCount:int, viewPortBounds:ViewPortBounds = null, result:Point = null):Point
		{
			if(!result)
			{
				result = new Point();
			}
			const explicitWidth:Number = viewPortBounds ? viewPortBounds.explicitWidth : NaN;
			const explicitHeight:Number = viewPortBounds ? viewPortBounds.explicitHeight : NaN;
			const needsWidth:Boolean = isNaN(explicitWidth);
			const needsHeight:Boolean = isNaN(explicitHeight);
			if(!needsWidth && !needsHeight)
			{
				result.x = explicitWidth;
				result.y = explicitHeight;
				return result;
			}

			const minWidth:Number = viewPortBounds ? viewPortBounds.minWidth : 0;
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="114">
<file line="451" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\BitmapFontTextRenderer.as"/>
<file line="647" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\BitmapFontTextRenderer.as"/>
<codefragment>
<![CDATA[
					wordCountForLine = 0;
					continue;
				}

				var charData:BitmapChar = font.getChar(charID);
				if(!charData)
				{
					trace("Missing character " + String.fromCharCode(charID) + " in font " + font.name + ".");
					continue;
				}

				if(isKerningEnabled && !isNaN(previousCharID))
				{
					currentX += charData.getKerning(previousCharID);
				}

				var offsetX:Number = charData.xAdvance * scale;
				if(this._wordWrap)
				{
					var previousCharIsWhitespace:Boolean = previousCharID == CHARACTER_ID_SPACE || previousCharID == CHARACTER_ID_TAB;
					if(charID == CHARACTER_ID_SPACE || charID == CHARACTER_ID_TAB)
					{
						if(!previousCharIsWhitespace)
						{
							widthOfWhitespaceAfterWord = 0;
						}
						widthOfWhitespaceAfterWord += offsetX;
					}
					else if(previousCharIsWhitespace)
					{
						startXOfPreviousWord = currentX;
]]>
</codefragment>
</duplication>
<duplication lines="51" tokens="114">
<file line="487" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Header.as"/>
<file line="1103" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Scroller.as"/>
<codefragment>
<![CDATA[
			this._interactionMode = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var originalBackgroundWidth:Number = NaN;

		/**
		 * @private
		 */
		protected var originalBackgroundHeight:Number = NaN;

		/**
		 * @private
		 */
		protected var currentBackgroundSkin:DisplayObject;

		/**
		 * @private
		 */
		protected var _backgroundSkin:DisplayObject;

		/**
		 * The default background to display.
		 */
		public function get backgroundSkin():DisplayObject
		{
			return this._backgroundSkin;
		}

		/**
		 * @private
		 */
		public function set backgroundSkin(value:DisplayObject):void
		{
			if(this._backgroundSkin == value)
			{
				return;
			}

			if(this._backgroundSkin && this._backgroundSkin != this._backgroundDisabledSkin)
			{
				this.removeChild(this._backgroundSkin);
			}
			this._backgroundSkin = value;
			if(this._backgroundSkin && this._backgroundSkin.parent != this)
			{
				this._backgroundSkin.visible = false;
				this.addChildAt(this._backgroundSkin, 0);
]]>
</codefragment>
</duplication>
<duplication lines="32" tokens="113">
<file line="653" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\PageIndicator.as"/>
<file line="2118" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<codefragment>
<![CDATA[
		private function touchHandler(event:TouchEvent):void
		{
			if(!this._isEnabled)
			{
				this.touchPointID = -1;
				return;
			}

			const touches:Vector.<Touch> = event.getTouches(this, null, HELPER_TOUCHES_VECTOR);
			if(touches.length == 0)
			{
				return;
			}
			if(this.touchPointID >= 0)
			{
				var touch:Touch;
				for each(var currentTouch:Touch in touches)
				{
					if(currentTouch.id == this.touchPointID)
					{
						touch = currentTouch;
						break;
					}
				}
				if(!touch)
				{
					HELPER_TOUCHES_VECTOR.length = 0;
					return;
				}
				if(touch.phase == TouchPhase.ENDED)
				{
					this.touchPointID = -1;
]]>
</codefragment>
</duplication>
<duplication lines="38" tokens="112">
<file line="1991" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="2123" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<codefragment>
<![CDATA[
			const touches:Vector.<Touch> = event.getTouches(this.decrementButton, null, HELPER_TOUCHES_VECTOR);
			if(touches.length == 0)
			{
				return;
			}

			if(this._touchPointID >= 0)
			{
				var touch:Touch;
				for each(var currentTouch:Touch in touches)
				{
					if(currentTouch.id == this._touchPointID)
					{
						touch = currentTouch;
						break;
					}
				}

				if(!touch)
				{
					//end of hover
					HELPER_TOUCHES_VECTOR.length = 0;
					return;
				}
				if(touch.phase == TouchPhase.ENDED)
				{
					this._touchPointID = -1;
					this._repeatTimer.stop();
					this.dispatchEventWith(FeathersEventType.END_INTERACTION);
				}
			}
			else //if we get here, we don't have a saved touch ID yet
			{
				for each(touch in touches)
				{
					if(touch.phase == TouchPhase.BEGAN)
					{
						this.dispatchEventWith(FeathersEventType.BEGIN_INTERACTION);
]]>
</codefragment>
</duplication>
<duplication lines="50" tokens="112">
<file line="488" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Header.as"/>
<file line="742" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\renderers\DefaultGroupedListHeaderOrFooterRenderer.as"/>
<codefragment>
<![CDATA[
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var originalBackgroundWidth:Number = NaN;

		/**
		 * @private
		 */
		protected var originalBackgroundHeight:Number = NaN;

		/**
		 * @private
		 */
		protected var currentBackgroundSkin:DisplayObject;

		/**
		 * @private
		 */
		protected var _backgroundSkin:DisplayObject;

		/**
		 * A background to behind the component's content.
		 */
		public function get backgroundSkin():DisplayObject
		{
			return this._backgroundSkin;
		}

		/**
		 * @private
		 */
		public function set backgroundSkin(value:DisplayObject):void
		{
			if(this._backgroundSkin == value)
			{
				return;
			}

			if(this._backgroundSkin && this._backgroundSkin != this._backgroundDisabledSkin)
			{
				this.removeChild(this._backgroundSkin);
			}
			this._backgroundSkin = value;
			if(this._backgroundSkin && this._backgroundSkin.parent != this)
			{
				this._backgroundSkin.visible = false;
				this.addChildAt(this._backgroundSkin, 0);
]]>
</codefragment>
</duplication>
<duplication lines="60" tokens="110">
<file line="469" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\StageTextTextEditor.as"/>
<file line="330" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\TextFieldTextEditor.as"/>
<codefragment>
<![CDATA[
			this._displayAsPassword = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _maxChars:int = int.MAX_VALUE;

		/**
		 * Same as the <code>flash.text.TextField</code> property with the same name.
		 */
		public function get maxChars():int
		{
			return this._maxChars;
		}

		/**
		 * @private
		 */
		public function set maxChars(value:int):void
		{
			if(this._maxChars == value)
			{
				return;
			}
			this._maxChars = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _restrict:String;

		/**
		 * Same as the <code>flash.text.TextField</code> property with the same name.
		 */
		public function get restrict():String
		{
			return this._restrict;
		}

		/**
		 * @private
		 */
		public function set restrict(value:String):void
		{
			if(this._restrict == value)
			{
				return;
			}
			this._restrict = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _textFieldHasFocus:Boolean = false;
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="109">
<file line="613" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\HorizontalLayout.as"/>
<file line="828" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<codefragment>
<![CDATA[
			result.contentHeight = totalHeight;
			result.viewPortWidth = availableWidth;
			result.viewPortHeight = availableHeight;

			return result;
		}

		/**
		 * @inheritDoc
		 */
		public function measureViewPort(itemCount:int, viewPortBounds:ViewPortBounds = null, result:Point = null):Point
		{
			if(!result)
			{
				result = new Point();
			}
			const explicitWidth:Number = viewPortBounds ? viewPortBounds.explicitWidth : NaN;
			const explicitHeight:Number = viewPortBounds ? viewPortBounds.explicitHeight : NaN;
			const needsWidth:Boolean = isNaN(explicitWidth);
			const needsHeight:Boolean = isNaN(explicitHeight);
			if(!needsWidth && !needsHeight)
			{
				result.x = explicitWidth;
				result.y = explicitHeight;
				return result;
			}

			const boundsX:Number = viewPortBounds ? viewPortBounds.x : 0;
]]>
</codefragment>
</duplication>
<duplication lines="32" tokens="109">
<file line="96" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedMergeSort.as"/>
<file line="34" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedMergeSortCmp.as"/>
<codefragment>
<![CDATA[
			while (true)
			{
				p = h;
				h = tail = null;
				nmerges = 0;
				
				while (p)
				{
					nmerges++;
					
					for (i = 0, psize = 0, q = p; i < insize; i++)
					{
						psize++;
						q = q.next;
						if (!q) break;
					}
					
					qsize = insize;
					
					while (psize > 0 || (qsize > 0 && q))
					{
						if (psize == 0)
						{
							e = q; q = q.next; qsize--;
						}
						else
						if (qsize == 0 || !q)
						{
							e = p; p = p.next; psize--;
						}
						else
						if (cmp(p.data, q.data) >= 0)
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="107">
<file line="13" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\ptolemy\ui\color\Mixer.as"/>
<file line="50" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\ptolemy\ui\color\Mixer.as"/>
<codefragment>
<![CDATA[
			var aR:int = (a&0xFF000000)>>>24;
			var aG:int = (a&0x00FF0000)>>>16;
			var aB:int = (a&0x0000FF00)>>>8;
			var aA:int = (a&0x000000FF);
						
			var dR:int = ((b&0xFF000000)>>>24) - aR;
			var dG:int = ((b&0x00FF0000)>>>16) - aG;
			var dB:int = ((b&0x0000FF00)>>>8) - aB;
			var dA:int = (b&0x000000FF) - aA;
			
			var c:uint;
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="107">
<file line="902" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Header.as"/>
<file line="1856" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Scroller.as"/>
<codefragment>
<![CDATA[
		protected function refreshBackgroundSkin():void
		{
			this.currentBackgroundSkin = this._backgroundSkin;
			if(!this._isEnabled && this._backgroundDisabledSkin)
			{
				if(this._backgroundSkin)
				{
					this._backgroundSkin.visible = false;
				}
				this.currentBackgroundSkin = this._backgroundDisabledSkin;
			}
			else if(this._backgroundDisabledSkin)
			{
				this._backgroundDisabledSkin.visible = false;
			}
			if(this.currentBackgroundSkin)
			{
				this.currentBackgroundSkin.visible = true;

				if(isNaN(this.originalBackgroundWidth))
				{
					this.originalBackgroundWidth = this.currentBackgroundSkin.width;
				}
				if(isNaN(this.originalBackgroundHeight))
				{
					this.originalBackgroundHeight = this.currentBackgroundSkin.height;
				}
			}
		}

		/**
		 * @private
		 */
		protected function refreshScrollBarStyles():void
]]>
</codefragment>
</duplication>
<duplication lines="38" tokens="105">
<file line="537" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Header.as"/>
<file line="790" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\renderers\DefaultGroupedListHeaderOrFooterRenderer.as"/>
<codefragment>
<![CDATA[
				this._backgroundSkin.visible = false;
				this.addChildAt(this._backgroundSkin, 0);
			}
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _backgroundDisabledSkin:DisplayObject;

		/**
		 * A background to display when the component is disabled.
		 */
		public function get backgroundDisabledSkin():DisplayObject
		{
			return this._backgroundDisabledSkin;
		}

		/**
		 * @private
		 */
		public function set backgroundDisabledSkin(value:DisplayObject):void
		{
			if(this._backgroundDisabledSkin == value)
			{
				return;
			}

			if(this._backgroundDisabledSkin && this._backgroundDisabledSkin != this._backgroundSkin)
			{
				this.removeChild(this._backgroundDisabledSkin);
			}
			this._backgroundDisabledSkin = value;
			if(this._backgroundDisabledSkin && this._backgroundDisabledSkin.parent != this)
			{
				this._backgroundDisabledSkin.visible = false;
				this.addChildAt(this._backgroundDisabledSkin, 0);
]]>
</codefragment>
</duplication>
<duplication lines="36" tokens="104">
<file line="53" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\views\components\jewels\Jewel.as"/>
<file line="56" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\views\components\jewels\Jewel__.as"/>
<codefragment>
<![CDATA[
		private var _size:int = 40;
		
		public function get size():int
		{
			return _size;
		}
		
		public function set size(i:int):void
		{
			if (_size == i) return;
			_size = i;
			
			invalidate();
		}
		//
		private var _playing:Boolean = true;
		
		public function get playing():Boolean
		{
			return _playing;
		}
		
		public function set playing(b:Boolean):void
		{
			if (_playing == b) return;
			_playing = b;
			updateEnterFrameListener();
		}
		//
		public override function set visible(b:Boolean):void
		{
			super.visible = b;
			updateEnterFrameListener();
		}
		//
		public function get graphics():Graphics
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="103">
<file line="16" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\org\osflash\signals\natives\sets\URLLoaderSignalSet.as"/>
<file line="16" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\org\osflash\signals\natives\sets\URLStreamSignalSet.as"/>
<codefragment>
<![CDATA[
		public function URLStreamSignalSet(target:URLStream) {
			super(target);
		}

		public function get complete():NativeSignal {
			return getNativeSignal(Event.COMPLETE);
		}

		public function get httpStatus():NativeSignal {
			return getNativeSignal(HTTPStatusEvent.HTTP_STATUS, HTTPStatusEvent);
		}

		public function get ioError():NativeSignal {
			return getNativeSignal(IOErrorEvent.IO_ERROR, IOErrorEvent);
		}

		public function get open():NativeSignal {
			return getNativeSignal(Event.OPEN);
		}

		public function get progress():NativeSignal {
			return getNativeSignal(ProgressEvent.PROGRESS, ProgressEvent);
		}

		public function get securityError():NativeSignal {
			return getNativeSignal(SecurityErrorEvent.SECURITY_ERROR, SecurityErrorEvent);
]]>
</codefragment>
</duplication>
<duplication lines="38" tokens="103">
<file line="837" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<file line="394" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\ListDataViewPort.as"/>
<codefragment>
<![CDATA[
			return Math.min(this._typicalItemWidth, this._typicalItemHeight);
		}

		private var _horizontalScrollPosition:Number = 0;

		public function get horizontalScrollPosition():Number
		{
			return this._horizontalScrollPosition;
		}

		public function set horizontalScrollPosition(value:Number):void
		{
			if(this._horizontalScrollPosition == value)
			{
				return;
			}
			this._horizontalScrollPosition = value;
			this.invalidate(INVALIDATION_FLAG_SCROLL);
		}

		private var _verticalScrollPosition:Number = 0;

		public function get verticalScrollPosition():Number
		{
			return this._verticalScrollPosition;
		}

		public function set verticalScrollPosition(value:Number):void
		{
			if(this._verticalScrollPosition == value)
			{
				return;
			}
			this._verticalScrollPosition = value;
			this.invalidate(INVALIDATION_FLAG_SCROLL);
		}

		private var _ignoreSelectionChanges:Boolean = false;
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="102">
<file line="61" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\org\osflash\signals\DeluxeSignal.as"/>
<file line="100" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\org\osflash\signals\OnceSignal.as"/>
<codefragment>
<![CDATA[
		public function dispatch(...valueObjects):void
		{
			
			// If valueClasses is empty, value objects are not type-checked. 
			const numValueClasses:int = _valueClasses.length;
			const numValueObjects:int = valueObjects.length;

			// Cannot dispatch fewer objects than declared classes.
			if (numValueObjects < numValueClasses)
			{
				throw new ArgumentError('Incorrect number of arguments. '+
					'Expected at least '+numValueClasses+' but received '+
					numValueObjects+'.');
			}
			
			// Cannot dispatch differently typed objects than declared classes.
			for (var i:int = 0; i < numValueClasses; i++)
			{
				// Optimized for the optimistic case that values are correct.
				if (valueObjects[i] is _valueClasses[i] || valueObjects[i] === null) 
					continue;
					
				throw new ArgumentError('Value object <'+valueObjects[i]
					+'> is not an instance of <'+_valueClasses[i]+'>.');
			}

			// Broadcast to listeners.
			var slotsToProcess:SlotList = slots;
]]>
</codefragment>
</duplication>
<duplication lines="35" tokens="102">
<file line="840" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<file line="596" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\TextFieldViewPort.as"/>
<codefragment>
<![CDATA[
		private var _horizontalScrollPosition:Number = 0;

		public function get horizontalScrollPosition():Number
		{
			return this._horizontalScrollPosition;
		}

		public function set horizontalScrollPosition(value:Number):void
		{
			if(this._horizontalScrollPosition == value)
			{
				return;
			}
			this._horizontalScrollPosition = value;
			this.invalidate(INVALIDATION_FLAG_SCROLL);
		}

		private var _verticalScrollPosition:Number = 0;

		public function get verticalScrollPosition():Number
		{
			return this._verticalScrollPosition;
		}

		public function set verticalScrollPosition(value:Number):void
		{
			if(this._verticalScrollPosition == value)
			{
				return;
			}
			this._verticalScrollPosition = value;
			this.invalidate(INVALIDATION_FLAG_SCROLL);
		}

		private var _paddingTop:Number = 0;
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="101">
<file line="61" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\org\osflash\signals\DeluxeSignal.as"/>
<file line="107" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\org\osflash\signals\MonoSignal.as"/>
<codefragment>
<![CDATA[
		public function dispatch(...valueObjects):void
		{
			// If valueClasses is empty, value objects are not type-checked. 
			const numValueClasses:int = _valueClasses.length;
			const numValueObjects:int = valueObjects.length;

			// Cannot dispatch fewer objects than declared classes.
			if (numValueObjects < numValueClasses)
			{
				throw new ArgumentError('Incorrect number of arguments. '+
					'Expected at least '+numValueClasses+' but received '+
					numValueObjects+'.');
			}
			
			// Cannot dispatch differently typed objects than declared classes.
			for (var i:int = 0; i < numValueClasses; i++)
			{
				// Optimized for the optimistic case that values are correct.
				if (valueObjects[i] is _valueClasses[i] || valueObjects[i] === null) 
					continue;
					
				throw new ArgumentError('Value object <'+valueObjects[i]
					+'> is not an instance of <'+_valueClasses[i]+'>.');
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="100">
<file line="792" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\core\FeathersControl.as"/>
<file line="341" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\Scale3Image.as"/>
<codefragment>
<![CDATA[
				MatrixUtil.transformCoords(HELPER_MATRIX, this._hitArea.x + this._hitArea.width, this._hitArea.y + this._hitArea.height, HELPER_POINT);
				minX = minX < HELPER_POINT.x ? minX : HELPER_POINT.x;
				maxX = maxX > HELPER_POINT.x ? maxX : HELPER_POINT.x;
				minY = minY < HELPER_POINT.y ? minY : HELPER_POINT.y;
				maxY = maxY > HELPER_POINT.y ? maxY : HELPER_POINT.y;
			}

			resultRect.x = minX;
			resultRect.y = minY;
			resultRect.width  = maxX - minX;
			resultRect.height = maxY - minY;

			return resultRect;
		}

		/**
		 * @private
		 */
		override public function hitTest(localPoint:Point, forTouch:Boolean=false):DisplayObject
		{
			if(forTouch && (!this.visible || !this.touchable))
]]>
</codefragment>
</duplication>
<duplication lines="7" tokens="99">
<file line="34" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\ptolemy\geom3D\unfolding\Icosahedron.as"/>
<file line="34" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\ptolemy\geom3D\unfolding\Octahedron.as"/>
<codefragment>
<![CDATA[
			_controller = new RegularFace(3,sideLength,_angle,dihedralProportion);
			
			var B:Face = new JoinedFace(_controller,_controller.points[0],_controller.points[1],3,_angle);
			var C:Face = new JoinedFace(_controller,_controller.points[1],_controller.points[2],3,_angle);
			var D:Face = new JoinedFace(_controller,_controller.points[2],_controller.points[0],3,_angle);
			
			var E:Face = new JoinedFace(B,B.points[2],B.points[0],3,_angle,true);
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="99">
<file line="22" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\org\osflash\signals\natives\sets\FileReferenceSignalSet.as"/>
<file line="17" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\org\osflash\signals\natives\sets\URLLoaderSignalSet.as"/>
<codefragment>
<![CDATA[
			super(target);
		}

		public function get complete():NativeSignal {
			return getNativeSignal(Event.COMPLETE);
		}

		public function get httpStatus():NativeSignal {
			return getNativeSignal(HTTPStatusEvent.HTTP_STATUS, HTTPStatusEvent);
		}

		public function get ioError():NativeSignal {
			return getNativeSignal(IOErrorEvent.IO_ERROR, IOErrorEvent);
		}

		public function get open():NativeSignal {
			return getNativeSignal(Event.OPEN);
		}

		public function get progress():NativeSignal {
			return getNativeSignal(ProgressEvent.PROGRESS, ProgressEvent);
		}

		public function get securityError():NativeSignal {
			return getNativeSignal(SecurityErrorEvent.SECURITY_ERROR, SecurityErrorEvent);
]]>
</codefragment>
</duplication>
<duplication lines="32" tokens="99">
<file line="2039" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="1732" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ToggleSwitch.as"/>
<codefragment>
<![CDATA[
			HELPER_TOUCHES_VECTOR.length = 0;
		}

		/**
		 * @private
		 */
		protected function thumb_touchHandler(event:TouchEvent):void
		{
			if(!this._isEnabled)
			{
				return;
			}
			const touches:Vector.<Touch> = event.getTouches(this.thumb, null, HELPER_TOUCHES_VECTOR);
			if(touches.length == 0)
			{
				return;
			}
			if(this._touchPointID >= 0)
			{
				var touch:Touch;
				for each(var currentTouch:Touch in touches)
				{
					if(currentTouch.id == this._touchPointID)
					{
						touch = currentTouch;
						break;
					}
				}
				if(!touch)
				{
					HELPER_TOUCHES_VECTOR.length = 0;
					return;
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="99">
<file line="166" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\AI\searching\PVS.as"/>
<file line="121" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\AI\searching\Quiescence.as"/>
<codefragment>
<![CDATA[
		private function quiesence(alpha:int, beta:int):int
		{
			//standPat:@see http://chessprogramming.wikispaces.com/Quiescence+Search
			var standPat:int = doEvaluation(tempMove,gamePosition);
			if(standPat>=beta)
			{
				return beta;
			}
			if(alpha<standPat)
			{
				alpha = standPat;
			}
			//MakeCapture;
			for(var i:int=0;i<captures.length;i++)
			{
				tempCapture = captures[i];
				//
				makeMove(tempCapture);
				var score:int = -quiesence(-beta,-alpha);
				unmakeMove(tempCapture);
				if(score>=beta)
				{
					bestMove = tempCapture;
					LOG.debug("beta:{0},bestMove:{1}",beta.toString(),bestMove.dump());
]]>
</codefragment>
</duplication>
<duplication lines="6" tokens="99">
<file line="226" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<file line="370" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<codefragment>
<![CDATA[
					this.important.setXs(6, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(7, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(8, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(9, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					//convertedImportant
					this.convertedImportant.setXs(0, [-2, -2, -2, 2, 2, 2, -2, -2, -2]);
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="97">
<file line="1256" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<file line="609" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\ListDataViewPort.as"/>
<codefragment>
<![CDATA[
			this._layoutItems.length = 0;

			HELPER_BOUNDS.x = HELPER_BOUNDS.y = 0;
			HELPER_BOUNDS.scrollX = this._horizontalScrollPosition;
			HELPER_BOUNDS.scrollY = this._verticalScrollPosition;
			HELPER_BOUNDS.explicitWidth = this.explicitVisibleWidth;
			HELPER_BOUNDS.explicitHeight = this.explicitVisibleHeight;
			HELPER_BOUNDS.minWidth = this._minVisibleWidth;
			HELPER_BOUNDS.minHeight = this._minVisibleHeight;
			HELPER_BOUNDS.maxWidth = this._maxVisibleWidth;
			HELPER_BOUNDS.maxHeight = this._maxVisibleHeight;

			this.findUnrenderedData();
			this.recoverInactiveRenderers();
			this.renderUnrenderedData();
			this.freeInactiveRenderers();
		}

		private function findUnrenderedData():void
		{
			const itemCount:int = this._dataProvider ? this._dataProvider.length : 0;
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="97">
<file line="1416" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="1083" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<codefragment>
<![CDATA[
				this.layoutChildren();
			}
		}

		/**
		 * @private
		 */
		protected function autoSizeIfNeeded():Boolean
		{
			if(isNaN(this.minimumTrackOriginalWidth) || isNaN(this.minimumTrackOriginalHeight))
			{
				this.minimumTrack.validate();
				this.minimumTrackOriginalWidth = this.minimumTrack.width;
				this.minimumTrackOriginalHeight = this.minimumTrack.height;
			}
			if(this.maximumTrack)
			{
				if(isNaN(this.maximumTrackOriginalWidth) || isNaN(this.maximumTrackOriginalHeight))
				{
					this.maximumTrack.validate();
					this.maximumTrackOriginalWidth = this.maximumTrack.width;
					this.maximumTrackOriginalHeight = this.maximumTrack.height;
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="96">
<file line="678" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\TextFieldTextEditor.as"/>
<file line="806" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\TextFieldTextRenderer.as"/>
<codefragment>
<![CDATA[
			if(this._textField.width == 0 || this._textField.height == 0)
			{
				return;
			}
			if(this._needsNewBitmap || !this._textSnapshotBitmapData)
			{
				if(this._textSnapshotBitmapData)
				{
					this._textSnapshotBitmapData.dispose();
				}
				this._textSnapshotBitmapData = new BitmapData(this._snapshotWidth, this._snapshotHeight, true, 0x00ff00ff);
			}
			if(!this._textSnapshotBitmapData)
			{
				return;
			}
			HELPER_MATRIX.identity();
			HELPER_MATRIX.scale(Starling.contentScaleFactor, Starling.contentScaleFactor);
			this._textSnapshotBitmapData.fillRect(this._textSnapshotBitmapData.rect, 0x00ff00ff);
			this._textSnapshotBitmapData.draw(this._textField, HELPER_MATRIX);
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="95">
<file line="48" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\ptolemy\geom3D\unfolding\Dodecahedron.as"/>
<file line="62" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\ptolemy\geom3D\unfolding\Icosahedron.as"/>
<file line="46" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\ptolemy\geom3D\unfolding\Octahedron.as"/>
<codefragment>
<![CDATA[
			super(_controller,B,C,D,E,F,G,H);
			/**/
		}
		
		public function get proportion():Number { return _proportion; }
		public function set proportion(n:Number):void
		{
			if (_proportion==n) return;
			_proportion = n;
			
			// update the z position of the controller so that the center of rotation is always in the center of the
			// polyhedron
			_controller.z = _distance*_proportion;
			
			var i:int;
			var dj:JoinedFace;
			
			n = Math.PI - (Math.PI - _angle)*_proportion;
			
			//	update the dihedral angles which are used to derive the position of the face from its joinedTo face
			for (i=0;i<faces.length;i++)
			{
				dj = faces[i] as JoinedFace;
				if (dj==null) continue;
				
				dj.dihedral = n;
]]>
</codefragment>
</duplication>
<duplication lines="51" tokens="95">
<file line="105" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\TextFieldViewPort.as"/>
<file line="162" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\TextFieldTextRenderer.as"/>
<codefragment>
<![CDATA[
		protected var _textFormat:TextFormat;

		/**
		 * The font and styles used to draw the text.
		 *
		 * @see flash.text.TextFormat
		 */
		public function get textFormat():TextFormat
		{
			return this._textFormat;
		}

		/**
		 * @private
		 */
		public function set textFormat(value:TextFormat):void
		{
			if(this._textFormat == value)
			{
				return;
			}
			this._textFormat = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _styleSheet:StyleSheet;

		/**
		 * The <code>StyleSheet</code> object to pass to the TextField.
		 *
		 * @see flash.text.StyleSheet
		 */
		public function get styleSheet():StyleSheet
		{
			return this._styleSheet;
		}

		/**
		 * @private
		 */
		public function set styleSheet(value:StyleSheet):void
		{
			if(this._styleSheet == value)
			{
				return;
			}
			this._styleSheet = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="95">
<file line="992" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\SimpleScrollBar.as"/>
<file line="1632" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<codefragment>
<![CDATA[
				return;
			}
			const touches:Vector.<Touch> = event.getTouches(this.thumb, null, HELPER_TOUCHES_VECTOR);
			if(touches.length == 0)
			{
				return;
			}
			if(this._touchPointID >= 0)
			{
				var touch:Touch;
				for each(var currentTouch:Touch in touches)
				{
					if(currentTouch.id == this._touchPointID)
					{
						touch = currentTouch;
						break;
					}
				}
				if(!touch)
				{
					HELPER_TOUCHES_VECTOR.length = 0;
					return;
				}
				if(touch.phase == TouchPhase.MOVED)
				{
					touch.getLocation(this, HELPER_POINT);
]]>
</codefragment>
</duplication>
<duplication lines="51" tokens="95">
<file line="154" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollText.as"/>
<file line="105" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\TextFieldViewPort.as"/>
<codefragment>
<![CDATA[
		private var _textFormat:TextFormat;

		/**
		 * The font and styles used to draw the text.
		 *
		 * @see flash.text.TextFormat
		 */
		public function get textFormat():TextFormat
		{
			return this._textFormat;
		}

		/**
		 * @private
		 */
		public function set textFormat(value:TextFormat):void
		{
			if(this._textFormat == value)
			{
				return;
			}
			this._textFormat = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _styleSheet:StyleSheet;

		/**
		 * The <code>StyleSheet</code> object to pass to the TextField.
		 *
		 * @see flash.text.StyleSheet
		 */
		public function get styleSheet():StyleSheet
		{
			return this._styleSheet;
		}

		/**
		 * @private
		 */
		public function set styleSheet(value:StyleSheet):void
		{
			if(this._styleSheet == value)
			{
				return;
			}
			this._styleSheet = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="95">
<file line="2049" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="1632" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<codefragment>
<![CDATA[
				return;
			}
			const touches:Vector.<Touch> = event.getTouches(this.thumb, null, HELPER_TOUCHES_VECTOR);
			if(touches.length == 0)
			{
				return;
			}
			if(this._touchPointID >= 0)
			{
				var touch:Touch;
				for each(var currentTouch:Touch in touches)
				{
					if(currentTouch.id == this._touchPointID)
					{
						touch = currentTouch;
						break;
					}
				}
				if(!touch)
				{
					HELPER_TOUCHES_VECTOR.length = 0;
					return;
				}
				if(touch.phase == TouchPhase.MOVED)
				{
					touch.getLocation(this, HELPER_POINT);
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="94">
<file line="76" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\ptolemy\geom3D\unfolding\Cube.as"/>
<file line="51" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\ptolemy\geom3D\unfolding\Dodecahedron.as"/>
<codefragment>
<![CDATA[
		public function get proportion():Number { return _proportion; }
		public function set proportion(n:Number):void
		{
			if (_proportion==n) return;
			_proportion = n;
			
			// update the z position of the controller so that the center of rotation is always in the center of the
			// polyhedron
			_controller.z = _distance*_proportion;
			
			var i:int;
			var dj:JoinedFace;
			
			n = Math.PI - (Math.PI - _angle)*_proportion;
			
			//	update the dihedral angles which are used to derive the position of the face from its joinedTo face
			for (i=0;i<faces.length;i++)
			{
				dj = faces[i] as JoinedFace;
				if (dj==null) continue;
				
				dj.dihedral = n;
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="94">
<file line="1756" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="800" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\SimpleScrollBar.as"/>
<codefragment>
<![CDATA[
			const contentHeight:Number = this.actualHeight - this._paddingTop - this._paddingBottom;
			const adjustedPageStep:Number = Math.min(range, this._page == 0 ? range : this._page);
			var valueOffset:Number = 0;
			if(this._value < this._minimum)
			{
				valueOffset = (this._minimum - this._value);
			}
			if(this._value > this._maximum)
			{
				valueOffset = (this._value - this._maximum);
			}
			if(this._direction == DIRECTION_VERTICAL)
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="93">
<file line="625" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\StageTextTextEditor.as"/>
<file line="415" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\TextFieldTextEditor.as"/>
<codefragment>
<![CDATA[
			super.dispose();
		}

		/**
		 * @private
		 */
		override public function render(support:RenderSupport, parentAlpha:Number):void
		{
			HELPER_POINT.x = HELPER_POINT.y = 0;
			this.getTransformationMatrix(this.stage, HELPER_MATRIX);
			MatrixUtil.transformCoords(HELPER_MATRIX, 0, 0, HELPER_POINT);
			if(HELPER_POINT.x != this._oldGlobalX || HELPER_POINT.y != this._oldGlobalY)
			{
				this._oldGlobalX = HELPER_POINT.x;
				this._oldGlobalY = HELPER_POINT.y;
				const starlingViewPort:Rectangle = Starling.current.viewPort;
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="93">
<file line="183" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\views\plugin\PGN_PluginButtonBar.as"/>
<file line="181" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\views\plugin\PluginButtonBar.as"/>
<codefragment>
<![CDATA[
			this.addEventListener(starling.events.Event.CHANGE,tabBarChangeHandler);
			//
			this.relayout(this.stage.stageWidth, this.stage.stageHeight);
			//
			this.stage.addEventListener(ResizeEvent.RESIZE, stageResizeHandler);
		}
		//
		private function stageResizeHandler(event:ResizeEvent):void
		{
			this.relayout(event.width, event.height);
		}
		//
		private function relayout(w:Number, h:Number):void
		{
			this.width = w;
			this.x = (w - this.width) / 2;
			this.y = h - this.height;
		}
		//
//		private function tabBarChangeHandler(tabBar:TabBar):void
		private function tabBarChangeHandler(event:starling.events.Event):void
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="92">
<file line="637" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<file line="636" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledRowsLayout.as"/>
<codefragment>
<![CDATA[
			if(!isNaN(explicitWidth))
			{
				availableWidth = explicitWidth;
				horizontalTileCount = Math.max(1, (explicitWidth - this._paddingLeft - this._paddingRight + this._horizontalGap) / (tileWidth + this._horizontalGap));
			}
			else if(!isNaN(maxWidth))
			{
				availableWidth = maxWidth;
				horizontalTileCount = Math.max(1, (maxWidth - this._paddingLeft - this._paddingRight + this._horizontalGap) / (tileWidth + this._horizontalGap));
			}
			var verticalTileCount:int = 1;
]]>
</codefragment>
</duplication>
<duplication lines="47" tokens="92">
<file line="42" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ProgressBar.as"/>
<file line="239" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<codefragment>
<![CDATA[
		protected var _direction:String = DIRECTION_HORIZONTAL;

		[Inspectable(type="String",enumeration="horizontal,vertical")]
		/**
		 * Determines if the slider's thumb can be dragged horizontally or
		 * vertically. When this value changes, the slider's width and height
		 * values do not change automatically.
		 *
		 * @default DIRECTION_HORIZONTAL
		 * @see #DIRECTION_HORIZONTAL
		 * @see #DIRECTION_VERTICAL
		 */
		public function get direction():String
		{
			return this._direction;
		}
		
		/**
		 * @private
		 */
		public function set direction(value:String):void
		{
			if(this._direction == value)
			{
				return;
			}
			this._direction = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
		}
		
		/**
		 * @private
		 */
		protected var _value:Number = 0;
		
		/**
		 * The value of the slider, between the minimum and maximum.
		 */
		public function get value():Number
		{
			return this._value;
		}
		
		/**
		 * @private
		 */
		public function set value(newValue:Number):void
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="91">
<file line="29" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\compare\compareStringCaseInSensitiveDesc.as"/>
<file line="26" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\compare\compareStringCaseSensitiveDesc.as"/>
<codefragment>
<![CDATA[
		if (a.length + b.length > 2)
		{
			var r:int = 0;
			var k:int = a.length > b.length ? a.length : b.length;
			for (var i:int = 0; i < k; i++)
			{		
				r = b.charCodeAt(i) - a.charCodeAt(i);
				if (r != 0)	break;
			}
			return r;
		}
		else
			return b.charCodeAt(0) - a.charCodeAt(0);
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="91">
<file line="29" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\compare\compareStringCaseInSensitive.as"/>
<file line="26" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\compare\compareStringCaseSensitive.as"/>
<codefragment>
<![CDATA[
		if (a.length + b.length > 2)
		{
			var r:int = 0;
			var k:int = a.length > b.length ? a.length : b.length;
			for (var i:int = 0; i < k; i++)
			{		
				r = a.charCodeAt(i) - b.charCodeAt(i);
				if (r != 0)	break;
			}
			return r;
		}
		else
			return a.charCodeAt(0) - b.charCodeAt(0);
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="90">
<file line="237" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\themes\MinimalTheme.as"/>
<file line="263" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\themes\MinimalTheme.as"/>
<codefragment>
<![CDATA[
				height: 60 * this._scale,
				textureScale: this._scale
			};
			button.stateToSkinFunction = skinSelector.updateValue;

			button.defaultLabelProperties.textFormat = new BitmapFontTextFormat(BITMAP_FONT, this._fontSize, PRIMARY_TEXT_COLOR);
			button.defaultSelectedLabelProperties.textFormat = new BitmapFontTextFormat(BITMAP_FONT, this._fontSize, SELECTED_TEXT_COLOR);

			button.paddingTop = button.paddingBottom = 8 * this._scale;
			button.paddingLeft = button.paddingRight = 16 * this._scale;
			button.gap = 12 * this._scale;
			button.minWidth = button.minHeight = 60 * this._scale;
]]>
</codefragment>
</duplication>
<duplication lines="8" tokens="90">
<file line="420" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\BitmapFontTextRenderer.as"/>
<file line="599" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\BitmapFontTextRenderer.as"/>
<codefragment>
<![CDATA[
			const font:BitmapFont = this.currentTextFormat.font;
			const customSize:Number = this.currentTextFormat.size;
			const customLetterSpacing:Number = this.currentTextFormat.letterSpacing;
			const isKerningEnabled:Boolean = this.currentTextFormat.isKerningEnabled;
			const scale:Number = isNaN(customSize) ? 1 : (customSize / font.size);
			const lineHeight:Number = font.lineHeight * scale;
			const maxLineWidth:Number = !isNaN(this.explicitWidth) ? this.explicitWidth : this._maxWidth;
			const textToDraw:String = this.getTruncatedText();
]]>
</codefragment>
</duplication>
<duplication lines="49" tokens="90">
<file line="454" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Button.as"/>
<file line="108" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\HorizontalLayout.as"/>
<codefragment>
<![CDATA[
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * Quickly sets all padding properties to the same value. The
		 * <code>padding</code> getter always returns the value of
		 * <code>paddingTop</code>, but the other padding values may be
		 * different.
		 */
		public function get padding():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set padding(value:Number):void
		{
			this.paddingTop = value;
			this.paddingRight = value;
			this.paddingBottom = value;
			this.paddingLeft = value;
		}

		/**
		 * @private
		 */
		protected var _paddingTop:Number = 0;

		/**
		 * The minimum space, in pixels, above the items.
		 */
		public function get paddingTop():Number
		{
			return this._paddingTop;
		}

		/**
		 * @private
		 */
		public function set paddingTop(value:Number):void
		{
			if(this._paddingTop == value)
			{
				return;
			}
			this._paddingTop = value;
			this.dispatchEventWith(Event.CHANGE);
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="89">
<file line="1456" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="1115" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<codefragment>
<![CDATA[
			var newWidth:Number = this.explicitWidth;
			var newHeight:Number = this.explicitHeight;
			if(needsWidth)
			{
				if(this._direction == DIRECTION_VERTICAL)
				{
					if(this.maximumTrack)
					{
						newWidth = Math.max(this.minimumTrackOriginalWidth, this.maximumTrackOriginalWidth);
					}
					else
					{
						newWidth = this.minimumTrackOriginalWidth;
					}
				}
				else //horizontal
				{
					if(this.maximumTrack)
					{
						newWidth = Math.min(this.minimumTrackOriginalWidth, this.maximumTrackOriginalWidth) + this.thumb.width / 2;
					}
					else
					{
						newWidth = this.minimumTrackOriginalWidth;
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="89">
<file line="36" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\AI\fuzzyLogicSystem\InverseTrapezoidalFlip90MemberShipFunction.as"/>
<file line="29" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\AI\fuzzyLogicSystem\InverseTrapezoidalMemberShipFunction.as"/>
<codefragment>
<![CDATA[
		public function InverseTrapezoidalMemberShipFunction(a:Number,b:Number,c:Number,d:Number)
		{
			this.a = a;
			this.b = b;
			this.c = c;
			this.d = d;
		}
		
		public function memberShipOf(value:Number):Number
		{
			var result:Number=0;
			
			if( ((a==b)&&(value==a))
				|| ((c==d)&&(value==c))
			)
			{
				result = 1.0;
			}
			if( value>=a && value<b)
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="89">
<file line="96" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\views\popups\EnterUpIndicatory.as"/>
<file line="102" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\views\popups\HumanWinIndicatory.as"/>
<codefragment>
<![CDATA[
		public function HumanWinIndicatory()
		{
			super();
		}     	
		//--------------------------------------------------------------------------
		//
		//  Public methods
		//
		//--------------------------------------------------------------------------
		
		//--------------------------------------------------------------------------
		//
		//  Protected methods
		//
		//--------------------------------------------------------------------------
		override protected function initialize():void
		{
			super.initialize();
			//_buttonsContainer
			this._inputsContainer = new ScrollContainer();
			this._inputsContainer.layout = this.vLayout;
			this._container.addChild(this._inputsContainer);
			this._buttonsContainer = new ScrollContainer();
			this._buttonsContainer.layout = this.hLayout;
			this._container.addChild(this._buttonsContainer);
			//text inputs
			this._nameInput = new TextInput();
			this._nameInput.height = 25;
			this._scoreInput = new TextInput();
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="88">
<file line="38" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\ScrollRectManager.as"/>
<file line="64" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\ScrollRectManager.as"/>
<codefragment>
<![CDATA[
		public static function toStageCoordinates(location:Point, target:DisplayObject):void
		{
			var matrix:Matrix;
			var newTarget:DisplayObject = target;
			while(newTarget.parent)
			{
				newTarget = newTarget.parent;
				if(newTarget is IDisplayObjectWithScrollRect)
				{
					var targetWithScrollRect:IDisplayObjectWithScrollRect = IDisplayObjectWithScrollRect(newTarget);
					var scrollRect:Rectangle = targetWithScrollRect.scrollRect;
					if(!scrollRect || (scrollRect.x == 0 && scrollRect.y == 0))
					{
						continue;
					}
					matrix = newTarget.getTransformationMatrix(target, matrix);
					location.x -= scrollRect.x * matrix.a;
]]>
</codefragment>
</duplication>
<duplication lines="53" tokens="88">
<file line="97" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\LinkedQueue.as"/>
<file line="83" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\LinkedStack.as"/>
<codefragment>
<![CDATA[
		public function contains(obj:*):Boolean
		{
			return _list.contains(obj);
		}
		
		/**
		 * @inheritDoc
		 */
		public function clear():void
		{
			_list.clear();
		}
		
		/**
		 * @inheritDoc
		 */
		public function getIterator():Iterator
		{
			return _list.getIterator();
		}
		
		/**
		 * @inheritDoc
		 */
		public function get size():int
		{
			return _list.size;
		}
		
		/**
		 * @inheritDoc
		 */
		public function isEmpty():Boolean
		{
			return _list.size == 0;
		}
		
		/**
		 * @inheritDoc
		 */
		public function toArray():Array
		{
			return _list.toArray();
		}
		
		/**
		 * Prints out a string representing the current object.
		 * 
		 * @return A string representing the current object.
		 */
		public function toString():String
		{
			return "[LinkedStack > " + _list + "]";
]]>
</codefragment>
</duplication>
<duplication lines="46" tokens="88">
<file line="61" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\DListIterator.as"/>
<file line="61" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\SListIterator.as"/>
<codefragment>
<![CDATA[
			if (list) node = list.head;
		}
		
		/**
		 * @inheritDoc
		 */
		public function next():*
		{
			if (hasNext())
			{
				var obj:* = node.data;
				node = node.next;
				return obj;
			}
			return null;
		}
		
		/**
		 * @inheritDoc
		 */
		public function hasNext():Boolean
		{
			return Boolean(node);
		}
		
		/**
		 * @inheritDoc
		 */
		public function get data():*
		{
			if (node) return node.data;
			return null;
		}
		
		/**
		 * @private
		 */
		public function set data(obj:*):void
		{
			node.data = obj;
		}
		
		/**
		 * Moves the iterator to the tail node.
		 */
		public function end():void
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="88">
<file line="51" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\graph\searcher\BFSsearcher.as"/>
<file line="50" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\graph\searcher\DFSsearcher.as"/>
<codefragment>
<![CDATA[
		public function DFSsearcher(graph:GraphBoard)
		{
			super(graph);
		}

		//--------------------------------------------------------------------------
		//
		//  Public methods
		//
		//--------------------------------------------------------------------------
		override public function search(src:int, dst:int):Boolean
		{
			var queue:Array /* of Edge */=[];
			queue.push(new Edge(src, src));

			var visited:Array /* of Boolean */=new Array(graphRef_.size);
			visited[src]=true;

			var route:Array /* of int */=new Array(graphRef_.size);

			while (queue.length > 0)
			{
				var next:Edge=queue.pop();
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="88">
<file line="97" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\AI\searching\MinMax.as"/>
<file line="162" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\AI\searching\MinMax.as"/>
<codefragment>
<![CDATA[
			LOG.debug("Min orderingMoves.len:{0}",orderingMoves.length);
			var len:int = orderingMoves.length;
			var tempMoveValue:int;
			var bestMoveValue:int;
			for(var i:int=0;i<len;i++)
			{
				var conductVO:ConductVO = orderingMoves[i];
//				tempMove = MinMove(makeMove(conductVO));//FIXME:makeMove return void to be value assigned.
				var positionVO:PositionVO = new PositionVO();
				tempMove = MinMove(positionVO);
				tempMoveValue = doEvaluation(tempMove,positionVO);
				bestMoveValue = doEvaluation(bestMove,positionVO);
				if(tempMoveValue>bestMoveValue)
				{
					bestMove = tempMove;
					LOG.debug("Min bestMove:{0}",bestMove.dump());
]]>
</codefragment>
</duplication>
<duplication lines="47" tokens="88">
<file line="71" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\plugins\platogo\PlatogoModel.as"/>
<file line="73" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\plugins\playerIO\PlayerIoModel.as"/>
<codefragment>
<![CDATA[
		public function PlayerIoModel()
		{
			//TODO: implement function
		}
		
		public function set gameID(value:String):void
		{
			_gameID = value;
		}
		
		public function get gameID():String
		{
			return _gameID;
		}
		
		public function set boardID(value:String):void
		{
			_boardID = value;
		}
		
		public function get boardID():String
		{
			return _boardID;
		}
		
		public function get hasCaptureIndicator():Boolean
		{
			//TODO: implement function
			return false;
		}
		
		public function get hasCheckIndicator():Boolean
		{
			//TODO: implement function
			return false;
		}
		
		public function get hasMoveIndicator():Boolean
		{
			//TODO: implement function
			return false;
		}
		
		public function toString():String
		{
			//TODO: implement function
			return null;
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="87">
<file line="88" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\data\ArrayChildrenHierarchicalCollectionDataDescriptor.as"/>
<file line="105" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\data\ArrayChildrenHierarchicalCollectionDataDescriptor.as"/>
<codefragment>
<![CDATA[
		public function addItemAt(data:Object, item:Object, index:int, ...rest:Array):void
		{
			rest.unshift(index);
			var branch:Array = data as Array;
			const indexCount:int = rest.length - 1;
			for(var i:int = 0; i < indexCount; i++)
			{
				index = rest[i] as int;
				branch = branch[index][childrenField] as Array;
			}
			const lastIndex:int = rest[indexCount];
			branch.splice(lastIndex, 0, item);
]]>
</codefragment>
</duplication>
<duplication lines="30" tokens="87">
<file line="1009" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="1124" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ToggleSwitch.as"/>
<codefragment>
<![CDATA[
				this._thumbProperties = new PropertyProxy(childProperties_onChange);
			}
			return this._thumbProperties;
		}

		/**
		 * @private
		 */
		public function set thumbProperties(value:Object):void
		{
			if(this._thumbProperties == value)
			{
				return;
			}
			if(!value)
			{
				value = new PropertyProxy();
			}
			if(!(value is PropertyProxy))
			{
				const newValue:PropertyProxy = new PropertyProxy();
				for(var propertyName:String in value)
				{
					newValue[propertyName] = value[propertyName];
				}
				value = newValue;
			}
			if(this._thumbProperties)
			{
				this._thumbProperties.removeOnChangeCallback(childProperties_onChange);
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="86">
<file line="105" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\views\popups\AnewGameIndicatory.as"/>
<file line="98" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\views\popups\EnterUpIndicatory.as"/>
<codefragment>
<![CDATA[
			super();
		}     	
		//--------------------------------------------------------------------------
		//
		//  Public methods
		//
		//--------------------------------------------------------------------------
		
		//--------------------------------------------------------------------------
		//
		//  Protected methods
		//
		//--------------------------------------------------------------------------
		override protected function initialize():void
		{
			super.initialize();
			//_buttonsContainer
			this._inputsContainer = new ScrollContainer();
			this._inputsContainer.layout = this.vLayout;
			this._container.addChild(this._inputsContainer);
			this._buttonsContainer = new ScrollContainer();
			this._buttonsContainer.layout = this.hLayout;
			this._container.addChild(this._buttonsContainer);
			//text inputs
			this._nameInput = new TextInput();
			this._nameInput.height = 25;
			this._inputsContainer.addChild(this._nameInput);
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="86">
<file line="145" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\views\components\jewels\Jewel.as"/>
<file line="170" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\views\components\jewels\Jewel__.as"/>
<codefragment>
<![CDATA[
			removeEventListener(starling.events.Event.ENTER_FRAME, doUpdate);
			update();
		}
		//
		protected function update():void
		{
		}
		//
		protected function solid(s:Solid, colors:Array, glow:uint, size:int):void
		{
			if (s == null || _solid != null) return;
			
			_solid = s;
			_solid.about = new SpatialVector(0.2, 1, 0.2);
			_solid.colors = colors;
			_solid.outlineWidth = -1;
			
			var n:Number = size * 4 / 5;
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="85">
<file line="605" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<file line="1097" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<codefragment>
<![CDATA[
			const itemCount:int = items.length;
			var tileWidth:Number = this._useSquareTiles ? Math.max(0, this._typicalItemWidth, this._typicalItemHeight) : this._typicalItemWidth;
			var tileHeight:Number = this._useSquareTiles ? tileWidth : this._typicalItemHeight;
			//a virtual layout assumes that all items are the same size as
			//the typical item, so we don't need to measure every item in
			//that case
			if(!this._useVirtualLayout)
			{
				for(var i:int = 0; i < itemCount; i++)
				{
					var item:DisplayObject = items[i];
					if(!item)
					{
						continue;
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="85">
<file line="45" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedInsertionSort.as"/>
<file line="93" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedInsertionSort.as"/>
<codefragment>
<![CDATA[
						if (i.prev.data > n.data)
							i = i.prev;
						else
							break;
					}
					if (m)
					{
						p.next = m;
						m.prev = p;
					}
					else
						p.next = null;
					
					if (i == h)
					{
						n.prev = null;
						n.next = i;
						
						i.prev = n;
						h = n;
					}
					else
					{
						n.prev = i.prev;
						i.prev.next = n;
						
						n.next = i;
						i.prev = n;
					}
				}
				n = m;
			}
			return h;
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="84">
<file line="784" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledRowsLayout.as"/>
<file line="930" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledRowsLayout.as"/>
<codefragment>
<![CDATA[
			var totalWidth:Number = totalPageWidth;
			if(!isNaN(availableWidth) && this._paging == PAGING_HORIZONTAL)
			{
				totalWidth = Math.ceil(itemCount / perPage) * availableWidth;
			}
			var totalHeight:Number = positionY + tileHeight + this._paddingBottom;
			if(!isNaN(availableHeight))
			{
				if(this._paging == PAGING_HORIZONTAL)
				{
					totalHeight = availableHeight;
				}
				else if(this._paging == PAGING_VERTICAL)
				{
					totalHeight = Math.ceil(itemCount / perPage) * availableHeight;
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="84">
<file line="785" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<file line="926" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<codefragment>
<![CDATA[
			var totalWidth:Number = positionX + tileWidth + this._paddingRight;
			if(!isNaN(availableWidth))
			{
				if(this._paging == PAGING_VERTICAL)
				{
					totalWidth = availableWidth;
				}
				else if(this._paging == PAGING_HORIZONTAL)
				{
					totalWidth = Math.ceil(itemCount / perPage) * availableWidth;
				}
			}
			var totalHeight:Number = totalPageHeight;
			if(!isNaN(availableHeight) && this._paging == PAGING_VERTICAL)
			{
				totalHeight = Math.ceil(itemCount / perPage) * availableHeight;
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="84">
<file line="805" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<file line="356" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\ListDataViewPort.as"/>
<codefragment>
<![CDATA[
			this.invalidate(INVALIDATION_FLAG_SCROLL);
		}

		private var _ignoreLayoutChanges:Boolean = false;
		private var _ignoreRendererResizing:Boolean = false;

		private var _layout:ILayout;

		public function get layout():ILayout
		{
			return this._layout;
		}

		public function set layout(value:ILayout):void
		{
			if(this._layout == value)
			{
				return;
			}
			if(this._layout)
			{
				EventDispatcher(this._layout).removeEventListener(Event.CHANGE, layout_changeHandler);
			}
			this._layout = value;
			if(this._layout)
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="84">
<file line="1991" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="936" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\SimpleScrollBar.as"/>
<codefragment>
<![CDATA[
			const touches:Vector.<Touch> = event.getTouches(this.track, null, HELPER_TOUCHES_VECTOR);
			if(touches.length == 0)
			{
				return;
			}
			if(this._touchPointID >= 0)
			{
				var touch:Touch;
				for each(var currentTouch:Touch in touches)
				{
					if(currentTouch.id == this._touchPointID)
					{
						touch = currentTouch;
						break;
					}
				}
				if(!touch)
				{
					HELPER_TOUCHES_VECTOR.length = 0;
					return;
				}
				if(touch.phase == TouchPhase.ENDED)
				{
					this._touchPointID = -1;
					this._repeatTimer.stop();
]]>
</codefragment>
</duplication>
<duplication lines="46" tokens="84">
<file line="179" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ButtonGroup.as"/>
<file line="199" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TabBar.as"/>
<codefragment>
<![CDATA[
			return this._direction;
		}

		/**
		 * @private
		 */
		public function set direction(value:String):void
		{
			if(this._direction == value)
			{
				return;
			}
			this._direction = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _gap:Number = 0;

		/**
		 * Space, in pixels, between tabs.
		 */
		public function get gap():Number
		{
			return this._gap;
		}

		/**
		 * @private
		 */
		public function set gap(value:Number):void
		{
			if(this._gap == value)
			{
				return;
			}
			this._gap = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _tabFactory:Function = defaultTabFactory;
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="84">
<file line="51" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\graph\searcher\BFSsearcher.as"/>
<file line="12" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\jp\dip\hael\gameai\graph\searcher\DFS.as"/>
<codefragment>
<![CDATA[
		public function DFS(graph:GraphEx)
		{
			super(graph);
		}
		
		override public function search(src:int, dst:int) : Boolean
		{
			var queue:Array /* of Edge */ = [];
			queue.push(new Edge(src, src));
			
			var visited:Array /* of Boolean */ = new Array(graphRef_.size);
			visited[src] = true;
			
			var route:Array /* of int */ = new Array(graphRef_.size);
			
			while(queue.length > 0){
				var next:Edge = queue.pop();
]]>
</codefragment>
</duplication>
<duplication lines="30" tokens="84">
<file line="127" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\views\screens\HandshakeScreen.as"/>
<file line="101" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\views\screens\SettingsScreen.as"/>
<codefragment>
<![CDATA[
		public function SettingsScreen()
		{
			super();
		}     	
		//--------------------------------------------------------------------------
		//
		//  Public methods
		//
		//--------------------------------------------------------------------------
		
		//--------------------------------------------------------------------------
		//
		//  Protected methods
		//
		//--------------------------------------------------------------------------
		override protected function initialize():void
		{
			const vLayout:VerticalLayout = new VerticalLayout();
			vLayout.gap = 10;
			vLayout.paddingTop = 10;
			vLayout.paddingRight = 10;
			vLayout.paddingBottom = 10;
			vLayout.paddingLeft = 10;
			vLayout.horizontalAlign = HorizontalLayout.HORIZONTAL_ALIGN_CENTER;
			vLayout.verticalAlign = VerticalLayout.VERTICAL_ALIGN_MIDDLE;
			//
			this._container = new ScrollContainer();
			this._container.layout = vLayout;
			//			this._container.verticalScrollPolicy = Scroller.SCROLL_POLICY_OFF;
			this.addChild(this._container);
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="83">
<file line="36" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\jp\dip\hael\gameai\graph\searcher\BFS.as"/>
<file line="28" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\jp\dip\hael\gameai\graph\searcher\DFS.as"/>
<codefragment>
<![CDATA[
				var next:Edge = queue.pop();
				route[next.dst] = next.src;
				
				if(next.dst == dst){
					src_ = src;
					dst_ = dst;
					route_ = route;
					found_ = true;
					return true;
				}
				
				var dsts:Array = graphRef_.edge(next.dst);
				for each(var e:Edge in dsts){
					if(!visited[e.dst]){
						queue.push(e);
						visited[e.dst] = true;
					}
				}
			}
			
			return false;
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="83">
<file line="1909" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="1439" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<codefragment>
<![CDATA[
		protected function startRepeatTimer(action:Function):void
		{
			this.currentRepeatAction = action;
			if(this._repeatDelay > 0)
			{
				if(!this._repeatTimer)
				{
					this._repeatTimer = new Timer(this._repeatDelay * 1000);
					this._repeatTimer.addEventListener(TimerEvent.TIMER, repeatTimer_timerHandler);
				}
				else
				{
					this._repeatTimer.reset();
					this._repeatTimer.delay = this._repeatDelay * 1000;
				}
				this._repeatTimer.start();
			}
		}

		/**
		 * @private
		 */
		protected function adjustPage():void
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="83">
<file line="1491" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\GroupedList.as"/>
<file line="882" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<codefragment>
<![CDATA[
		public function setSelectedLocation(groupIndex:int, itemIndex:int):void
		{
			if(this._selectedGroupIndex == groupIndex && this._selectedItemIndex == itemIndex)
			{
				return;
			}
			if((groupIndex < 0 && itemIndex >= 0) || (groupIndex >= 0 && itemIndex < 0))
			{
				throw new ArgumentError("To deselect items, group index and item index must both be < 0.");
			}
			this._selectedGroupIndex = groupIndex;
			this._selectedItemIndex = itemIndex;

			this.invalidate(INVALIDATION_FLAG_SELECTED);
			this.dispatchEventWith(Event.CHANGE);
		}

		public function getScrollPositionForIndex(groupIndex:int, itemIndex:int, result:Point = null):Point
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="83">
<file line="76" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\graph\searcher\BFSsearcher.as"/>
<file line="72" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\graph\searcher\DFSsearcher.as"/>
<codefragment>
<![CDATA[
				var next:Edge=queue.pop();
				route[next.dst]=next.src;

				if (next.dst == dst)
				{
					src_=src;
					dst_=dst;
					route_=route;
					found_=true;
					return true;
				}

				var dsts:Array=graphRef_.edge(next.dst);
				for each (var e:Edge in dsts)
				{
					if (!visited[e.dst])
					{
						queue.push(e);
						visited[e.dst]=true;
					}
				}
			}

			return false;
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="82">
<file line="71" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\data\ArrayChildrenHierarchicalCollectionDataDescriptor.as"/>
<file line="122" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\data\ArrayChildrenHierarchicalCollectionDataDescriptor.as"/>
<codefragment>
<![CDATA[
		public function removeItemAt(data:Object, index:int, ...rest:Array):Object
		{
			rest.unshift(index);
			var branch:Array = data as Array;
			const indexCount:int = rest.length - 1;
			for(var i:int = 0; i < indexCount; i++)
			{
				index = rest[i] as int;
				branch = branch[index][childrenField] as Array;
			}
			const lastIndex:int = rest[indexCount];
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="82">
<file line="1963" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="909" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\SimpleScrollBar.as"/>
<codefragment>
<![CDATA[
		protected function thumbProperties_onChange(proxy:PropertyProxy, name:Object):void
		{
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected function removedFromStageHandler(event:Event):void
		{
			this._touchPointID = -1;
			if(this._repeatTimer)
			{
				this._repeatTimer.stop();
			}
		}

		/**
		 * @private
		 */
		protected function track_touchHandler(event:TouchEvent):void
		{
			if(!this._isEnabled)
			{
				this._touchPointID = -1;
				return;
			}
			const touches:Vector.<Touch> = event.getTouches(this.track, null, HELPER_TOUCHES_VECTOR);
]]>
</codefragment>
</duplication>
<duplication lines="35" tokens="82">
<file line="45" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedInsertionSort.as"/>
<file line="92" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedInsertionSortCmp.as"/>
<codefragment>
<![CDATA[
						if (cmp(i.prev.data, n.data) > 0)
							i = i.prev;
						else
							break;
					}
					if (m)
					{
						p.next = m;
						m.prev = p;
					}
					else
						p.next = null;
					
					if (i == h)
					{
						n.prev = null;
						n.next = i;
						
						i.prev = n;
						h = n;
					}
					else
					{
						n.prev = i.prev;
						i.prev.next = n;
						
						n.next = i;
						i.prev = n;
					}
				}
				n = m;
			}
		}
		
		return h;
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="81">
<file line="45" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedInsertionSortCmp.as"/>
<file line="92" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedInsertionSortCmp.as"/>
<codefragment>
<![CDATA[
						if (cmp(i.prev.data, n.data) > 0)
							i = i.prev;
						else
							break;
					}
					if (m)
					{
						p.next = m;
						m.prev = p;
					}
					else
						p.next = null;
					
					if (i == h)
					{
						n.prev = null;
						n.next = i;
						
						i.prev = n;
						h = n;
					}
					else
					{
						n.prev = i.prev;
						i.prev.next = n;
						
						n.next = i;
						i.prev = n;
					}
				}
				n = m;
]]>
</codefragment>
</duplication>
<duplication lines="68" tokens="80">
<file line="21" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\data\HierarchicalCollection.as"/>
<file line="21" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\data\ListCollection.as"/>
<codefragment>
<![CDATA[
	[Event(name="change",type="starling.events.Event")]

	/**
	 * Dispatched when the collection has changed drastically, such as when
	 * the underlying data source is replaced completely.
	 *
	 * @eventType feathers.events.CollectionEventType.RESET
	 */
	[Event(name="reset",type="starling.events.Event")]

	/**
	 * Dispatched when an item is added to the collection.
	 *
	 * <p>The <code>data</code> property of the event is the index of the
	 * item that has been updated. It is of type <code>int</code>.</p>
	 *
	 * @eventType feathers.events.CollectionEventType.ADD_ITEM
	 */
	[Event(name="addItem",type="starling.events.Event")]

	/**
	 * Dispatched when an item is removed from the collection.
	 *
	 * <p>The <code>data</code> property of the event is the index of the
	 * item that has been updated. It is of type <code>int</code>.</p>
	 *
	 * @eventType feathers.events.CollectionEventType.REMOVE_ITEM
	 */
	[Event(name="removeItem",type="starling.events.Event")]

	/**
	 * Dispatched when an item is replaced in the collection.
	 *
	 * <p>The <code>data</code> property of the event is the index of the
	 * item that has been updated. It is of type <code>int</code>.</p>
	 *
	 * @eventType feathers.events.CollectionEventType.REPLACE_ITEM
	 */
	[Event(name="replaceItem",type="starling.events.Event")]

	/**
	 * Dispatched when a property of an item in the collection has changed
	 * and the item doesn't have its own change event or signal. This event
	 * is only dispatched when the <code>updateItemAt()</code> function is
	 * called on the <code>ListCollection</code>.
	 *
	 * <p>In general, it's better for the items themselves to dispatch events
	 * or signals when their properties change.</p>
	 *
	 * <p>The <code>data</code> property of the event is the index of the
	 * item that has been updated. It is of type <code>int</code>.</p>
	 *
	 * @eventType feathers.events.CollectionEventType.UPDATE_ITEM
	 */
	[Event(name="updateItem",type="starling.events.Event")]

	[DefaultProperty("data")]
	/**
	 * Wraps a data source with a common API for use with UI controls, like
	 * lists, that support one dimensional collections of data. Supports custom
	 * "data descriptors" so that unexpected data sources may be used. Supports
	 * Arrays, Vectors, and XMLLists automatically.
	 * 
	 * @see ArrayListCollectionDataDescriptor
	 * @see VectorListCollectionDataDescriptor
	 * @see XMLListListCollectionDataDescriptor
	 */
	public class ListCollection extends EventDispatcher
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="80">
<file line="45" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedInsertionSort.as"/>
<file line="45" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedInsertionSortCmp.as"/>
<codefragment>
<![CDATA[
						if (cmp(i.prev.data, n.data) < 0)
							i = i.prev;
						else
							break;
					}
					if (m)
					{
						p.next = m;
						m.prev = p;
					}
					else
						p.next = null;
					
					if (i == h)
					{
						n.prev = null;
						n.next = i;
						
						i.prev = n;
						h = n;
					}
					else
					{
						n.prev = i.prev;
						i.prev.next = n;
						
						n.next = i;
						i.prev = n;
					}
				}
				n = m;
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="79">
<file line="40" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<file line="40" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\ListDataViewPort.as"/>
<codefragment>
<![CDATA[
	public final class ListDataViewPort extends FeathersControl implements IViewPort
	{
		private static const INVALIDATION_FLAG_ITEM_RENDERER_FACTORY:String = "itemRendererFactory";

		private static const HELPER_POINT:Point = new Point();
		private static const HELPER_BOUNDS:ViewPortBounds = new ViewPortBounds();
		private static const HELPER_LAYOUT_RESULT:LayoutBoundsResult = new LayoutBoundsResult();
		private static const HELPER_VECTOR:Vector.<int> = new <int>[];
		private static const HELPER_TOUCHES_VECTOR:Vector.<Touch> = new <Touch>[];

		public function ListDataViewPort()
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="79">
<file line="24" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\compare\compareStringCaseInSensitive.as"/>
<file line="24" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\compare\compareStringCaseInSensitiveDesc.as"/>
<codefragment>
<![CDATA[
	public function compareStringCaseInSensitiveDesc(a:String, b:String):int
	{
		a = a.toLowerCase();
		b = b.toLowerCase();
		
		if (a.length + b.length > 2)
		{
			var r:int = 0;
			var k:int = a.length > b.length ? a.length : b.length;
			for (var i:int = 0; i < k; i++)
			{		
				r = b.charCodeAt(i) - a.charCodeAt(i);
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="79">
<file line="61" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\gskinner\motion\plugins\SmartRotationPlugin.as"/>
<file line="60" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\gskinner\motion\plugins\SnappingPlugin.as"/>
<codefragment>
<![CDATA[
			instance = new SnappingPlugin();
			GTween.installPlugin(instance, properties || tweenProperties, true);
		}
		
	// Public methods:
		/** @private **/
		public function init(tween:GTween, name:String, value:Number):Number {
			return value;
		}
		
		/** @private **/
		public function tween(tween:GTween, name:String, value:Number, initValue:Number, rangeValue:Number, ratio:Number, end:Boolean):Number {
			if (!((enabled && tween.pluginData.SnappingEnabled == null) || tween.pluginData.SnappingEnabled)) { return value; }
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="78">
<file line="44" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\starling\extensions\ColorArgb.as"/>
<file line="54" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\starling\extensions\ColorArgb.as"/>
<codefragment>
<![CDATA[
            var r:Number = red;   if (r < 0.0) r = 0.0; else if (r > 1.0) r = 1.0;
            var g:Number = green; if (g < 0.0) g = 0.0; else if (g > 1.0) g = 1.0;
            var b:Number = blue;  if (b < 0.0) b = 0.0; else if (b > 1.0) b = 1.0;
            
            return int(a * 255) << 24 | int(r * 255) << 16 | int(g * 255) << 8 | int(b * 255);
]]>
</codefragment>
</duplication>
<duplication lines="7" tokens="78">
<file line="329" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\Scale3Image.as"/>
<file line="335" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\Scale3Image.as"/>
<codefragment>
<![CDATA[
				MatrixUtil.transformCoords(HELPER_MATRIX, this._hitArea.x + this._hitArea.width, this._hitArea.y, HELPER_POINT);
				minX = minX < HELPER_POINT.x ? minX : HELPER_POINT.x;
				maxX = maxX > HELPER_POINT.x ? maxX : HELPER_POINT.x;
				minY = minY < HELPER_POINT.y ? minY : HELPER_POINT.y;
				maxY = maxY > HELPER_POINT.y ? maxY : HELPER_POINT.y;

				MatrixUtil.transformCoords(HELPER_MATRIX, this._hitArea.x + this._hitArea.width, this._hitArea.y + this._hitArea.height, HELPER_POINT);
]]>
</codefragment>
</duplication>
<duplication lines="67" tokens="78">
<file line="242" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\PickerList.as"/>
<file line="452" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\renderers\BaseDefaultItemRenderer.as"/>
<codefragment>
<![CDATA[
		protected var _labelField:String = "label";

		/**
		 * The field in the item that contains the label text to be displayed by
		 * the renderer. If the item does not have this field, and a
		 * <code>labelFunction</code> is not defined, then the renderer will
		 * default to calling <code>toString()</code> on the item. To omit the
		 * label completely, either provide a custom item renderer without a
		 * label or define a <code>labelFunction</code> that returns an empty
		 * string.
		 *
		 * <p>All of the label fields and functions, ordered by priority:</p>
		 * <ol>
		 *     <li><code>labelFunction</code></li>
		 *     <li><code>labelField</code></li>
		 * </ol>
		 *
		 * @see #labelFunction
		 */
		public function get labelField():String
		{
			return this._labelField;
		}

		/**
		 * @private
		 */
		public function set labelField(value:String):void
		{
			if(this._labelField == value)
			{
				return;
			}
			this._labelField = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
		}

		/**
		 * @private
		 */
		protected var _labelFunction:Function;

		/**
		 * A function used to generate label text for a specific item. If this
		 * function is not null, then the <code>labelField</code> will be
		 * ignored.
		 *
		 * <p>The function is expected to have the following signature:</p>
		 * <pre>function( item:Object ):String</pre>
		 *
		 * <p>All of the label fields and functions, ordered by priority:</p>
		 * <ol>
		 *     <li><code>labelFunction</code></li>
		 *     <li><code>labelField</code></li>
		 * </ol>
		 *
		 * @see #labelField
		 */
		public function get labelFunction():Function
		{
			return this._labelFunction;
		}

		/**
		 * @private
		 */
		public function set labelFunction(value:Function):void
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="78">
<file line="25" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\AI\fuzzyLogicSystem\LeftShoulderFlip270MemberShipFunction.as"/>
<file line="25" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\AI\fuzzyLogicSystem\RightShoulderFlip90MemberShipFunction.as"/>
<codefragment>
<![CDATA[
        public function RightShoulderFlip90MemberShipFunction(upOffset:Number,peakPoint:Number,downOffset:Number)
        {
            this.peakPoint = peakPoint;
            this.upOffset = upOffset;
            this.downOffset = downOffset;
        }

        public function memberShipOf(value:Number):Number
        {
            //check offset equal 0;
            if( (this.downOffset==0) && (value==this.peakPoint)
				||(this.upOffset==0) && (value==this.peakPoint)  
			  )
            {
                return 1.0;
            }
            //check value more than peak
            if( (value>this.peakPoint) && (value<=(this.peakPoint+this.upOffset)) )
]]>
</codefragment>
</duplication>
<duplication lines="65" tokens="77">
<file line="45" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\org\osflash\signals\MonoSignal.as"/>
<file line="57" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\org\osflash\signals\natives\NativeMappedSignal.as"/>
<codefragment>
<![CDATA[
		override public function set valueClasses(value:Array):void
		{
			_valueClasses = value ? value.slice() : [];
			
			for (var i:int = _valueClasses.length; i--; )
			{
				if (!(_valueClasses[i] is Class))
				{
					throw new ArgumentError('Invalid valueClasses argument: ' +
						'item at index ' + i + ' should be a Class but was:<' +
						_valueClasses[i] + '>.' + getQualifiedClassName(_valueClasses[i]));
				}
			}
		}
		
		/**
		 * Sets the mapping function or literal object list.
		 * If the argument is a list of object literals then this list is dispatched to listeners.
		 * 
		 * <listing version="3.0">
		 *  signal = new NativeMappedSignal(button, MouseEvent.CLICK, MouseEvent, String).mapTo("ping")
		 *  signal.add(function(arg:String):void { trace(arg) }) // prints "ping"
		 * </listing>
		 * 
		 * And an example passing a list of literals:
		 * 
		 * <listing version="3.0">
		 *  signal = new NativeMappedSignal(button, MouseEvent.CLICK, MouseEvent, String, int, Number).mapTo("ping", 3, 3.1415)
		 *  signal.add(function(arg1:String, arg2:int, arg3:Number):void { trace(arg1, arg2, arg3) }) // prints "ping", 3, 3.1415
		 * </listing>
		 * 
		 * If the argument is a function then it is called when the event this NativeMappedSignal is listening for is dispatched.
		 * The function should return an Array or a single object. The data returned from the function is passed along as arguments in the Signal dispatch.
		 * Lets look at some examples of mapping functions and the function that is called back:
		 * 
		 * <listing version="3.0">
		 *  signal = new NativeMappedSignal(button, MouseEvent.CLICK, MouseEvent, String).mapTo(function():void { 
		 *    return "ping"
		 *  })
		 *  signal.add(function(arg:String):void { trace(arg) }) // prints "ping"
		 * </listing>
		 * 
		 * and here's an example using a list of arguments:
		 * 
		 * <listing version="3.0">
		 *  signal = new NativeMappedSignal(button, MouseEvent.CLICK, MouseEvent, String, int, Number).mapTo(function():void { 
		 *    return ["ping", 3, 3.1415] 
		 *  })
		 * 	signal.add(function(arg1:String, arg2:int, arg3:Number):void { trace(arg1, arg2, arg3) }) // prints "ping", 3, 3.1415
		 * </listing>
		 * 
		 * You can also state your wish to receive the native Event in th mapping function by simply including an argument of type Event:
		 * 
		 * <listing version="3.0">
		 *  signal = new NativeMappedSignal(button, MouseEvent.CLICK, MouseEvent, Point).mapTo(function(event:MouseEvent):void { 
		 *    return new Point(event.localX, event.localY)
		 *  })
		 *  signal.add(function(arg:Point):void { trace(arg) }) // prints "(x=128, y=256)"
		 * </listing> 
		 * 
		 * @param objectListOrFunction This can either be a list of object literals or a function that returns list of objects. 
		 * @return The NativeMappedSignal object this method was called on. This allows the Signal to be defined and mapped in one statement.
		 * @throws ArgumentError <code>ArgumentError</code>: Mapping function needs zero or one arguments of type Event
		 */		
		public function mapTo(...objectListOrFunction):NativeMappedSignal
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="77">
<file line="25" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\jp\dip\hael\gameai\graph\searcher\BFS.as"/>
<file line="17" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\jp\dip\hael\gameai\graph\searcher\DFS.as"/>
<codefragment>
<![CDATA[
		override public function search(src:int, dst:int) : Boolean
		{
			var queue:Array /* of Edge */ = [];
			queue.push(new Edge(src, src));
			
			var visited:Array /* of Boolean */ = new Array(graphRef_.size);
			visited[src] = true;
			
			var route:Array /* of int */ = new Array(graphRef_.size);
			
			while(queue.length > 0){
				var next:Edge = queue.pop();
]]>
</codefragment>
</duplication>
<duplication lines="8" tokens="77">
<file line="63" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\AnchorLayout.as"/>
<file line="855" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<codefragment>
<![CDATA[
			const boundsX:Number = viewPortBounds ? viewPortBounds.x : 0;
			const boundsY:Number = viewPortBounds ? viewPortBounds.y : 0;
			const minWidth:Number = viewPortBounds ? viewPortBounds.minWidth : 0;
			const minHeight:Number = viewPortBounds ? viewPortBounds.minHeight : 0;
			const maxWidth:Number = viewPortBounds ? viewPortBounds.maxWidth : Number.POSITIVE_INFINITY;
			const maxHeight:Number = viewPortBounds ? viewPortBounds.maxHeight : Number.POSITIVE_INFINITY;

			const tileWidth:Number = this._useSquareTiles ? Math.max(0, this._typicalItemWidth, this._typicalItemHeight) : this._typicalItemWidth;
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="77">
<file line="1632" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<file line="1742" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ToggleSwitch.as"/>
<codefragment>
<![CDATA[
				return;
			}
			const touches:Vector.<Touch> = event.getTouches(this.thumb, null, HELPER_TOUCHES_VECTOR);
			if(touches.length == 0)
			{
				return;
			}
			if(this._touchPointID >= 0)
			{
				var touch:Touch;
				for each(var currentTouch:Touch in touches)
				{
					if(currentTouch.id == this._touchPointID)
					{
						touch = currentTouch;
						break;
					}
				}
				if(!touch)
				{
					HELPER_TOUCHES_VECTOR.length = 0;
					return;
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="77">
<file line="60" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\graph\searcher\DFSsearcher.as"/>
<file line="25" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\jp\dip\hael\gameai\graph\searcher\BFS.as"/>
<codefragment>
<![CDATA[
		public override function search(src:int, dst:int):Boolean
		{
			var queue:Array /* of Edge */ = [];
			queue.push(new Edge(src, src));
			
			var visited:Array /* of Boolean */ = new Array(graphRef_.size);
			visited[src] = true;
			
			var route:Array /* of int */ = new Array(graphRef_.size);
			
			while(queue.length > 0){
				var next:Edge = queue.shift();
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="76">
<file line="735" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\StageTextTextEditor.as"/>
<file line="537" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\TextFieldTextEditor.as"/>
<codefragment>
<![CDATA[
		override protected function draw():void
		{
			const stateInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_STATE);
			const stylesInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_STYLES);
			const dataInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_DATA);
			const positionInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_POSITION);
			const skinInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_SKIN);
			var sizeInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_SIZE);

			if(dataInvalid || stylesInvalid)
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="76">
<file line="408" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\Array3.as"/>
<file line="284" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\Heap.as"/>
<file line="311" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\PriorityQueue.as"/>
<codefragment>
<![CDATA[
		_values = pq.toArray();
		_length = _values.length;
		_cursor = 0;
	}
	
	public function get data():*
	{
		return _values[_cursor];
	}
	
	public function set data(obj:*):void
	{
		_values[_cursor] = obj;
	}
	
	public function start():void
	{
		_cursor = 0;
	}
	
	public function hasNext():Boolean
	{
		return _cursor < _length;
	}
	
	public function next():*
	{
		return _values[_cursor++];
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="76">
<file line="16" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\graph\WeightedEdge.as"/>
<file line="3" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\jp\dip\hael\gameai\graph\WeightedEdge.as"/>
<codefragment>
<![CDATA[
	public class WeightedEdge extends Edge
	{
		public var weight:int;
		
		public function WeightedEdge(src:int, dst:int, weight:int = 1)
		{
			this.weight = weight;
			super(src, dst);
		}
		
		/**
		 * Prints out all elements (for debug/demo purposes).
		 * 
		 * @return A human-readable representation of the structure.
		 */		
		override public function dump():String
		{
			var s:String = "GraphEdge";
			s += "["+this.src + "--"+this.weight+"-->"+this.dst+"]";
			return s;
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="75">
<file line="44" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\motion\transitions\OldFadeNewSlideTransitionManager.as"/>
<file line="44" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\motion\transitions\ScreenSlidingStackTransitionManager.as"/>
<codefragment>
<![CDATA[
		public function ScreenSlidingStackTransitionManager(navigator:ScreenNavigator, quickStack:Class = null)
		{
			if(!navigator)
			{
				throw new ArgumentError("ScreenNavigator cannot be null.");
			}
			this.navigator = navigator;
			if(quickStack)
			{
				this._stack.push(quickStack);
			}
			this.navigator.transition = this.onTransition;
		}

		/**
		 * The <code>ScreenNavigator</code> being managed.
		 */
		protected var navigator:ScreenNavigator;

		/**
		 * @private
		 */
		protected var _stack:Vector.<String> = new <String>[];

		/**
		 * @private
		 */
		protected var _activeTransition:Tween;

		/**
		 * @private
		 */
		protected var _savedOtherTarget:DisplayObject;
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="75">
<file line="811" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<file line="197" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\LayoutViewPort.as"/>
<codefragment>
<![CDATA[
		private var _layout:ILayout;

		public function get layout():ILayout
		{
			return this._layout;
		}

		public function set layout(value:ILayout):void
		{
			if(this._layout == value)
			{
				return;
			}
			if(this._layout)
			{
				EventDispatcher(this._layout).removeEventListener(Event.CHANGE, layout_changeHandler);
			}
			this._layout = value;
			if(this._layout)
			{
				if(this._layout is IVirtualLayout)
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="75">
<file line="27" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\arrayedInsertionSort.as"/>
<file line="40" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\sLinkedInsertionSort.as"/>
<codefragment>
<![CDATA[
		var j:int, val:Number;
		for (var i:int = 1; i < k; i++)
		{
			val = a[i]; j = i;
			while ((j > 0) && (a[int(j - 1)] > val))
			{
				a[j] = a[int(j - 1)];
				j--;
			}
			a[j] = val;
]]>
</codefragment>
</duplication>
<duplication lines="30" tokens="75">
<file line="113" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\views\components\jewels\Jewel.as"/>
<file line="135" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\views\components\jewels\Jewel__.as"/>
<codefragment>
<![CDATA[
			switch (code)
			{
				case AIR:
					j = new Air();
					j.size = 100;
					break;
				case EARTH:
					j = new Earth();
					j.size = 90;
					break;
				case FIRE:
					j = new Fire();
					j.size = 120;
					break;
				case WATER:
					j = new Water();
					j.size = 60;
					break;
			}
			return j;
		}
		//--------------------------------------------------------------------------
		//
		//  Protected methods
		//
		//--------------------------------------------------------------------------
		protected function invalidate():void
		{
			//			addEventListener(Event.ENTER_FRAME, doUpdate);
			addEventListener(starling.events.Event.ENTER_FRAME,update);
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="74">
<file line="848" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\SimpleScrollBar.as"/>
<file line="1425" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<codefragment>
<![CDATA[
			else //horizontal
			{
				const trackScrollableWidth:Number = this.actualWidth - this.thumb.width;
				const xOffset:Number = location.x - this._touchStartX;
				const xPosition:Number = Math.min(Math.max(0, this._thumbStartX + xOffset), trackScrollableWidth);
				percentage = xPosition / trackScrollableWidth;
			}

			return this._minimum + percentage * (this._maximum - this._minimum);
		}

		/**
		 * @private
		 */
		protected function startRepeatTimer(action:Function):void
]]>
</codefragment>
</duplication>
<duplication lines="9" tokens="74">
<file line="838" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\SimpleScrollBar.as"/>
<file line="1415" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<codefragment>
<![CDATA[
		protected function locationToValue(location:Point):Number
		{
			var percentage:Number;
			if(this._direction == DIRECTION_VERTICAL)
			{
				const trackScrollableHeight:Number = this.actualHeight - this.thumb.height;
				const yOffset:Number = location.y - this._touchStartY;
				const yPosition:Number = Math.min(Math.max(0, this._thumbStartY + yOffset), trackScrollableHeight);
				percentage = 1 - (yPosition / trackScrollableHeight);
]]>
</codefragment>
</duplication>
<duplication lines="36" tokens="74">
<file line="226" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\List.as"/>
<file line="156" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\PickerList.as"/>
<codefragment>
<![CDATA[
			this.invalidate(INVALIDATION_FLAG_DATA);
		}
		
		/**
		 * @private
		 */
		protected var _selectedIndex:int = -1;
		
		/**
		 * @copy List#selectedIndex
		 */
		public function get selectedIndex():int
		{
			return this._selectedIndex;
		}
		
		/**
		 * @private
		 */
		public function set selectedIndex(value:int):void
		{
			if(this._selectedIndex == value)
			{
				return;
			}
			this._selectedIndex = value;
			this.invalidate(INVALIDATION_FLAG_SELECTED);
			this.dispatchEventWith(Event.CHANGE);
		}
		
		/**
		 * @copy List#selectedItem
		 */
		public function get selectedItem():Object
		{
			if(!this._dataProvider)
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="74">
<file line="62" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\BitVectors.as"/>
<file line="90" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\BitVectors.as"/>
<codefragment>
<![CDATA[
		public function AND( bitVector:BitVectors ) : BitVectors
		{
			
			var result:Vector.<uint>;
			var min:Vector.<uint>;
			
			if( length < bitVector.length ) 
			{
				min = vector;
				result = bitVector.vector.slice();
			}
			else 
			{
				min = bitVector.vector;
				result = vector.slice();
			}
			
			var n:int = min.length;
			while( --n > -1 )
			{
				result[ n ] &= min[ n ];
]]>
</codefragment>
</duplication>
<duplication lines="6" tokens="74">
<file line="54" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\AI\evaluation\fuzzy\FuzzyImportantEvaluation.as"/>
<file line="208" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\AI\searching\MinMax.as"/>
<codefragment>
<![CDATA[
		override public function doEvaluation(conductVO:ConductVO,gamePosition:PositionVO):int
		{
//			return MathUtil.transactRandomNumberInRange(0,100);
			//Todo:doEvaluation about assumpted conductVO;
			var importantValue:int = DefaultPiecesConstants[conductVO.target.type].important.gett(conductVO.nextPosition.x,conductVO.nextPosition.y);
			var fuzzyImportValue:int = DefaultPiecesConstants[conductVO.target.type].convertedImportant.gett(conductVO.nextPosition.x,conductVO.nextPosition.y);
]]>
</codefragment>
</duplication>
<duplication lines="37" tokens="73">
<file line="23" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\skins\ImageStateValueSelector.as"/>
<file line="23" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\skins\Scale9ImageStateValueSelector.as"/>
<codefragment>
<![CDATA[
		public function Scale9ImageStateValueSelector()
		{
		}

		/**
		 * @private
		 */
		protected var _imageProperties:Object;

		/**
		 * Optional properties to set on the Scale9Image instance.
		 *
		 * @see feathers.display.Scale9Image
		 */
		public function get imageProperties():Object
		{
			if(!this._imageProperties)
			{
				this._imageProperties = {};
			}
			return this._imageProperties;
		}

		/**
		 * @private
		 */
		public function set imageProperties(value:Object):void
		{
			this._imageProperties = value;
		}

		/**
		 * @private
		 */
		override public function setValueForState(value:Object, state:Object, isSelected:Boolean = false):void
		{
			if(!(value is Scale9Textures))
]]>
</codefragment>
</duplication>
<duplication lines="38" tokens="73">
<file line="108" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TextInput.as"/>
<file line="144" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\TextFieldTextEditor.as"/>
<codefragment>
<![CDATA[
		protected var _savedSelectionIndex:int = -1;

		/**
		 * @private
		 */
		protected var _text:String = "";

		/**
		 * @inheritDoc
		 */
		public function get text():String
		{
			return this._text;
		}

		/**
		 * @private
		 */
		public function set text(value:String):void
		{
			if(!value)
			{
				//don't allow null or undefined
				value = "";
			}
			if(this._text == value)
			{
				return;
			}
			this._text = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _textFormat:TextFormat;
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="73">
<file line="1246" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<file line="1512" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ToggleSwitch.as"/>
<codefragment>
<![CDATA[
		protected function refreshThumbStyles():void
		{
			for(var propertyName:String in this._thumbProperties)
			{
				if(this.thumb.hasOwnProperty(propertyName))
				{
					var propertyValue:Object = this._thumbProperties[propertyName];
					this.thumb[propertyName] = propertyValue;
				}
			}
			this.thumb.visible = this._showThumb;
		}

		/**
		 * @private
		 */
		protected function refreshTrackStyles():void
		{
			for(var propertyName:String in this._onTrackProperties)
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="73">
<file line="1483" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="1143" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<codefragment>
<![CDATA[
			if(needsHeight)
			{
				if(this._direction == DIRECTION_VERTICAL)
				{
					if(this.maximumTrack)
					{
						newHeight = Math.min(this.minimumTrackOriginalHeight, this.maximumTrackOriginalHeight) + this.thumb.height / 2;
					}
					else
					{
						newHeight = this.minimumTrackOriginalHeight;
					}
				}
				else //horizontal
				{
					if(this.maximumTrack)
					{
						newHeight = Math.max(this.minimumTrackOriginalHeight, this.maximumTrackOriginalHeight);
					}
					else
					{
						newHeight = this.minimumTrackOriginalHeight;
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="72">
<file line="722" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\HorizontalLayout.as"/>
<file line="726" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\VerticalLayout.as"/>
<codefragment>
<![CDATA[
			this._heightCache.splice(index, 1);
		}

		/**
		 * @inheritDoc
		 */
		public function getVisibleIndicesAtScrollPosition(scrollX:Number, scrollY:Number, width:Number, height:Number, itemCount:int, result:Vector.<int> = null):Vector.<int>
		{
			if(!result)
			{
				result = new <int>[];
			}
			result.length = 0;
			const visibleTypicalItemCount:int = Math.ceil(height / (this._typicalItemHeight + this._gap));
]]>
</codefragment>
</duplication>
<duplication lines="7" tokens="72">
<file line="323" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\Scale3Image.as"/>
<file line="335" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\Scale3Image.as"/>
<codefragment>
<![CDATA[
				MatrixUtil.transformCoords(HELPER_MATRIX, this._hitArea.x + this._hitArea.width, this._hitArea.y, HELPER_POINT);
				minX = minX < HELPER_POINT.x ? minX : HELPER_POINT.x;
				maxX = maxX > HELPER_POINT.x ? maxX : HELPER_POINT.x;
				minY = minY < HELPER_POINT.y ? minY : HELPER_POINT.y;
				maxY = maxY > HELPER_POINT.y ? maxY : HELPER_POINT.y;

				MatrixUtil.transformCoords(HELPER_MATRIX, this._hitArea.x + this._hitArea.width, this._hitArea.y + this._hitArea.height, HELPER_POINT);
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="72">
<file line="765" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\TextFieldViewPort.as"/>
<file line="666" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\TextFieldTextRenderer.as"/>
<codefragment>
<![CDATA[
			const dataInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_DATA);

			if(stylesInvalid)
			{
				this._textField.antiAliasType = this._antiAliasType;
				this._textField.background = this._background;
				this._textField.backgroundColor = this._backgroundColor;
				this._textField.border = this._border;
				this._textField.borderColor = this._borderColor;
				this._textField.condenseWhite = this._condenseWhite;
				this._textField.displayAsPassword = this._displayAsPassword;
				this._textField.gridFitType = this._gridFitType;
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="72">
<file line="940" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<file line="507" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\ListDataViewPort.as"/>
<codefragment>
<![CDATA[
			if(stateInvalid || dataInvalid || scrollInvalid || itemRendererInvalid)
			{
				this.refreshEnabled();
			}

			if(scrollInvalid || dataInvalid || itemRendererInvalid || sizeInvalid)
			{
				this._ignoreRendererResizing = true;
				this._layout.layout(this._layoutItems, HELPER_BOUNDS, HELPER_LAYOUT_RESULT);
				this._ignoreRendererResizing = false;
				this.setSizeInternal(HELPER_LAYOUT_RESULT.contentWidth, HELPER_LAYOUT_RESULT.contentHeight, false);
				this.actualVisibleWidth = HELPER_LAYOUT_RESULT.viewPortWidth;
				this.actualVisibleHeight = HELPER_LAYOUT_RESULT.viewPortHeight;
			}
		}
		
		private function invalidateParent():void
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="72">
<file line="625" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\PickerList.as"/>
<file line="1209" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\renderers\BaseDefaultItemRenderer.as"/>
<codefragment>
<![CDATA[
			super.dispose();
		}

		/**
		 * Using <code>labelField</code> and <code>labelFunction</code>,
		 * generates a label from the item.
		 *
		 * <p>All of the label fields and functions, ordered by priority:</p>
		 * <ol>
		 *     <li><code>labelFunction</code></li>
		 *     <li><code>labelField</code></li>
		 * </ol>
		 */
		public function itemToLabel(item:Object):String
		{
			if(this._labelFunction != null)
			{
				return this._labelFunction(item) as String;
			}
			else if(this._labelField != null && item && item.hasOwnProperty(this._labelField))
			{
				return item[this._labelField] as String;
			}
			else if(item is Object)
			{
				return item.toString();
			}
			return "";
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="71">
<file line="157" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\graph\searcher\SearcherBase.as"/>
<file line="65" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\jp\dip\hael\gameai\graph\searcher\Searcher.as"/>
<codefragment>
<![CDATA[
		protected function route2path(route:Array, src:int, dst:int):Array
		{
			var path:Array = [];
			var s:int = -1, d:int = dst;
			while(s != src){
				s = route[d];
				path.push(new Edge(s, d));
				d = s;
			}
			return path.reverse();
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="71">
<file line="18" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\graph\Edge.as"/>
<file line="3" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\jp\dip\hael\gameai\graph\Edge.as"/>
<codefragment>
<![CDATA[
	public class Edge
	{
		public var src:int;
		public var dst:int;
		public function Edge(src:int=-1,dst:int=-1)
		{
			this.src = src;
			this.dst = dst;
		}
		/**
		 * Prints out all elements (for debug/demo purposes).
		 * 
		 * @return A human-readable representation of the structure.
		 */		
		public function dump():String
		{
			var s:String = "GraphEdge";
			s += "["+this.src + "---->"+this.dst+"]";
			return s;
]]>
</codefragment>
</duplication>
<duplication lines="8" tokens="71">
<file line="359" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\utils\BitBoardUtil.as"/>
<file line="394" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\utils\BitBoardUtil.as"/>
<codefragment>
<![CDATA[
		public static function getEastNorthMoves(rowIndex:int, colIndex:int, rowMax:int, colMax:int,  flag:int, bluePieces:BitBoard, redPieces:BitBoard):BitBoard
		{
			var bb:BitBoard = new BitBoard(colMax,rowMax);
			//
			for(var i:int=1;i<rowMax;i++)
			{
				if(!(rowIndex-i+1)) break;
				if(colIndex+i>=colMax) break;
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="70">
<file line="119" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiCoins.as"/>
<file line="70" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiEvents.as"/>
<file line="77" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiInventory.as"/>
<codefragment>
<![CDATA[
            MochiUserData.get( CONSUMER_KEY, getConsumableBag );
        }

        // --- Callback system ----------
        public static function addEventListener( eventType:String, delegate:Function ):void
        {
            _dispatcher.addEventListener( eventType, delegate );
        }

        public static function triggerEvent( eventType:String, args:Object ):void
        {
            _dispatcher.triggerEvent( eventType, args );
        }

        public static function removeEventListener( eventType:String, delegate:Function ):void
        {
            _dispatcher.removeEventListener( eventType, delegate );
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="70">
<file line="753" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\core\FeathersControl.as"/>
<file line="302" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\Scale3Image.as"/>
<codefragment>
<![CDATA[
		public override function getBounds(targetSpace:DisplayObject, resultRect:Rectangle=null):Rectangle
		{
			if(!resultRect)
			{
				resultRect = new Rectangle();
			}

			var minX:Number = Number.MAX_VALUE, maxX:Number = -Number.MAX_VALUE;
			var minY:Number = Number.MAX_VALUE, maxY:Number = -Number.MAX_VALUE;

			if (targetSpace == this) // optimization
			{
				minX = this._hitArea.x;
]]>
</codefragment>
</duplication>
<duplication lines="46" tokens="70">
<file line="422" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\SimpleScrollBar.as"/>
<file line="572" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<codefragment>
<![CDATA[
			this._trackScaleMode = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var currentRepeatAction:Function;

		/**
		 * @private
		 */
		protected var _repeatTimer:Timer;

		/**
		 * @private
		 */
		protected var _repeatDelay:Number = 0.05;

		/**
		 * The time, in seconds, before actions are repeated. The first repeat
		 * happens after a delay that is five times longer than the following
		 * repeats.
		 */
		public function get repeatDelay():Number
		{
			return this._repeatDelay;
		}

		/**
		 * @private
		 */
		public function set repeatDelay(value:Number):void
		{
			if(this._repeatDelay == value)
			{
				return;
			}
			this._repeatDelay = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _minimumTrackFactory:Function;
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="70">
<file line="555" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Scroller.as"/>
<file line="650" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Scroller.as"/>
<codefragment>
<![CDATA[
		public function set verticalScrollBarProperties(value:Object):void
		{
			if(this._horizontalScrollBarProperties == value)
			{
				return;
			}
			if(!value)
			{
				value = new PropertyProxy();
			}
			if(!(value is PropertyProxy))
			{
				const newValue:PropertyProxy = new PropertyProxy();
				for(var propertyName:String in value)
				{
					newValue[propertyName] = value[propertyName];
				}
				value = newValue;
			}
			if(this._verticalScrollBarProperties)
]]>
</codefragment>
</duplication>
<duplication lines="46" tokens="70">
<file line="579" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="572" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<codefragment>
<![CDATA[
			this._trackScaleMode = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var currentRepeatAction:Function;

		/**
		 * @private
		 */
		protected var _repeatTimer:Timer;

		/**
		 * @private
		 */
		protected var _repeatDelay:Number = 0.05;

		/**
		 * The time, in seconds, before actions are repeated. The first repeat
		 * happens after a delay that is five times longer than the following
		 * repeats.
		 */
		public function get repeatDelay():Number
		{
			return this._repeatDelay;
		}

		/**
		 * @private
		 */
		public function set repeatDelay(value:Number):void
		{
			if(this._repeatDelay == value)
			{
				return;
			}
			this._repeatDelay = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _minimumTrackFactory:Function;
]]>
</codefragment>
</duplication>
<duplication lines="8" tokens="70">
<file line="81" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\BitBoard.as"/>
<file line="111" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\BitBoard.as"/>
<file line="126" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\BitBoard.as"/>
<codefragment>
<![CDATA[
		public function xor(value:BitBoard):BitBoard
		{
			var bb:BitBoard = new BitBoard(this.column,this.row);
			for(var h:int=0;h<_row;h++)
			{
				for(var w:int=0;w<_column;w++)
				{
					bb.setBitt(h,w,Boolean((value.getBitt(h,w)^this.getBitt(h,w))));
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="69">
<file line="123" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiCoins.as"/>
<file line="710" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiServices.as"/>
<codefragment>
<![CDATA[
        public static function addEventListener( eventType:String, delegate:Function ):void
        {
            _dispatcher.addEventListener( eventType, delegate );
        }

        public static function triggerEvent( eventType:String, args:Object ):void
        {
            _dispatcher.triggerEvent( eventType, args );
        }

        public static function removeEventListener( eventType:String, delegate:Function ):void
        {
            _dispatcher.removeEventListener( eventType, delegate );
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="69">
<file line="197" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\LayoutViewPort.as"/>
<file line="362" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\ListDataViewPort.as"/>
<codefragment>
<![CDATA[
		private var _layout:ILayout;

		public function get layout():ILayout
		{
			return this._layout;
		}

		public function set layout(value:ILayout):void
		{
			if(this._layout == value)
			{
				return;
			}
			if(this._layout)
			{
				EventDispatcher(this._layout).removeEventListener(Event.CHANGE, layout_changeHandler);
			}
			this._layout = value;
			if(this._layout)
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="69">
<file line="1981" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<file line="1994" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<file line="2007" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<codefragment>
<![CDATA[
		private function dataProvider_replaceItemHandler(event:Event, indices:Array):void
		{
			const layout:IVariableVirtualLayout = this._layout as IVariableVirtualLayout;
			if(!layout || !layout.hasVariableItemDimensions)
			{
				return;
			}
			const groupIndex:int = indices[0] as int;
			const itemIndex:int = indices[1] as int;
			const displayIndex:int = this.locationToDisplayIndex(groupIndex, itemIndex);
			layout.resetVariableVirtualCacheAtIndex(displayIndex);
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="69">
<file line="1991" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="2051" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<codefragment>
<![CDATA[
			const touches:Vector.<Touch> = event.getTouches(this.thumb, null, HELPER_TOUCHES_VECTOR);
			if(touches.length == 0)
			{
				return;
			}
			if(this._touchPointID >= 0)
			{
				var touch:Touch;
				for each(var currentTouch:Touch in touches)
				{
					if(currentTouch.id == this._touchPointID)
					{
						touch = currentTouch;
						break;
					}
				}
				if(!touch)
				{
					HELPER_TOUCHES_VECTOR.length = 0;
					return;
				}
				if(touch.phase == TouchPhase.MOVED)
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="69">
<file line="789" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Header.as"/>
<file line="810" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Header.as"/>
<codefragment>
<![CDATA[
				item = this._rightItems[i];
				if(item is IFeathersControl)
				{
					IFeathersControl(item).validate();
				}
				if(needsWidth && !isNaN(item.width))
				{
					totalItemWidth += item.width;
					if(i > 0)
					{
						totalItemWidth += this._gap;
					}
				}
				if(needsHeight && !isNaN(item.height))
				{
					newHeight = Math.max(newHeight, item.height);
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="69">
<file line="320" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Callout.as"/>
<file line="334" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Callout.as"/>
<codefragment>
<![CDATA[
			callout.validate();
			const idealXPosition:Number = globalOrigin.x + (globalOrigin.width - callout.width) / 2;
			const xPosition:Number = Math.max(stagePaddingLeft, Math.min(Starling.current.stage.stageWidth - callout.width - stagePaddingRight, idealXPosition));
			callout.x = xPosition;
			callout.y = globalOrigin.y - callout.height;
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="69">
<file line="870" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ButtonGroup.as"/>
<file line="948" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TabBar.as"/>
<codefragment>
<![CDATA[
			this.removeChild(tab, true);
		}

		/**
		 * @private
		 */
		protected function autoSizeIfNeeded():Boolean
		{
			const needsWidth:Boolean = isNaN(this.explicitWidth);
			const needsHeight:Boolean = isNaN(this.explicitHeight);
			if(!needsWidth && !needsHeight)
			{
				return false;
			}

			var newWidth:Number = this.explicitWidth;
			var newHeight:Number = this.explicitHeight;
			if(needsWidth)
			{
				newWidth = 0;
				for each(var tab:Button in this.activeTabs)
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="69">
<file line="65" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedMergeSortCmp.as"/>
<file line="128" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedMergeSortCmp.as"/>
<codefragment>
<![CDATA[
						if (cmp(p.data, q.data) <= 0)
						{
							e = p; p = p.next; psize--;
						} 
						else
						{
							e = q; q = q.next; qsize--;
						}
						
						if (tail)
							tail.next = e;
						else
							h = e;
						
						e.prev = tail;
						tail = e;
					}
					p = q;
				}
				
				node.prev = tail;
				tail.next = null;
				if (nmerges <= 1)
				{
					return h;
					break;
				}
				insize <<= 1;
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="69">
<file line="48" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\business\fsm\states\game\AnotherHumanWinState.as"/>
<file line="48" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\business\fsm\states\game\HumanWinState.as"/>
<codefragment>
<![CDATA[
		public function HumanWinState(agent:IAgent, resource:Object, description:String=null)
		{
			super(agent, resource, description);
		}     	
		//--------------------------------------------------------------------------
		//
		//  Public methods
		//
		//--------------------------------------------------------------------------
		override public function enter():void
		{
			GameConfig.gameStateManager.isRunning = false;
			IndicatorConfig.submitScore = true;
		}

		override public function update(time:Number=0):void
		{

		}

		override public function exit():void
		{
			//
			IndicatorConfig.submitScore = false;
]]>
</codefragment>
</duplication>
<duplication lines="37" tokens="68">
<file line="86" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\motion\transitions\OldFadeNewSlideTransitionManager.as"/>
<file line="86" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\motion\transitions\ScreenSlidingStackTransitionManager.as"/>
<codefragment>
<![CDATA[
		public var duration:Number = 0.25;

		/**
		 * A delay before the transition starts, measured in seconds. This may
		 * be required on low-end systems that will slow down for a short time
		 * after heavy texture uploads.
		 */
		public var delay:Number = 0.1;
		
		/**
		 * The easing function to use.
		 */
		public var ease:Object = Transitions.EASE_OUT;

		/**
		 * Determines if the next transition should be skipped. After the
		 * transition, this value returns to <code>false</code>.
		 */
		public var skipNextTransition:Boolean = false;
		
		/**
		 * Removes all saved classes from the stack that are used to determine
		 * which side of the <code>ScreenNavigator</code> the new screen will
		 * slide in from.
		 */
		public function clearStack():void
		{
			this._stack.length = 0;
		}

		/**
		 * The function passed to the <code>transition</code> property of the
		 * <code>ScreenNavigator</code>.
		 */
		protected function onTransition(oldScreen:DisplayObject, newScreen:DisplayObject, onComplete:Function):void
		{
			if(this._activeTransition)
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="68">
<file line="633" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\TextFieldTextEditor.as"/>
<file line="756" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\TextFieldTextRenderer.as"/>
<codefragment>
<![CDATA[
				this._textField.height = this.actualHeight;
				this._snapshotWidth = getNextPowerOfTwo(this.actualWidth * Starling.contentScaleFactor);
				this._snapshotHeight = getNextPowerOfTwo(this.actualHeight * Starling.contentScaleFactor);
				this._needsNewBitmap = this._needsNewBitmap || !this._textSnapshotBitmapData || this._snapshotWidth != this._textSnapshotBitmapData.width || this._snapshotHeight != this._textSnapshotBitmapData.height;
			}

			//instead of checking sizeInvalid, which will often be triggered by
			//changing maxWidth or something for measurement, we check against
			//the previous actualWidth/Height used for the snapshot.
			if(stylesInvalid || dataInvalid || this._needsNewBitmap ||
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="68">
<file line="2082" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="1574" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<codefragment>
<![CDATA[
						this._repeatTimer.stop();
					}
					this._touchPointID = -1;
					this.isDragging = false;
					if(!this.liveDragging)
					{
						this.dispatchEventWith(Event.CHANGE);
					}
					this.dispatchEventWith(FeathersEventType.END_INTERACTION);
				}
			}
			else
			{
				for each(touch in touches)
				{
					if(touch.phase == TouchPhase.BEGAN)
					{
						touch.getLocation(this, HELPER_POINT);
						this._touchPointID = touch.id;
]]>
</codefragment>
</duplication>
<duplication lines="43" tokens="68">
<file line="47" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\PanelScreen.as"/>
<file line="138" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Screen.as"/>
<codefragment>
<![CDATA[
		protected var _screenID:String;

		/**
		 * @inheritDoc
		 */
		public function get screenID():String
		{
			return this._screenID;
		}

		/**
		 * @private
		 */
		public function set screenID(value:String):void
		{
			this._screenID = value;
		}

		/**
		 * @private
		 */
		protected var _owner:ScreenNavigator;

		/**
		 * @inheritDoc
		 */
		public function get owner():ScreenNavigator
		{
			return this._owner;
		}

		/**
		 * @private
		 */
		public function set owner(value:ScreenNavigator):void
		{
			this._owner = value;
		}

		/**
		 * @private
		 */
		protected var _pixelScale:Number = 1;
]]>
</codefragment>
</duplication>
<duplication lines="8" tokens="68">
<file line="429" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\utils\BitBoardUtil.as"/>
<file line="465" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\utils\BitBoardUtil.as"/>
<codefragment>
<![CDATA[
		public static function getWestSouthMoves(rowIndex:int, colIndex:int, rowMax:int, colMax:int, flag:int, bluePieces:BitBoard, redPieces:BitBoard):BitBoard
		{
			var bb:BitBoard = new BitBoard(colMax,rowMax);
			//
			for(var i:int=1;i<rowMax;i++)
			{
				if(rowIndex+i>=rowMax) break;
				if(!(colIndex-i+1)) break;
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="67">
<file line="105" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\ptolemy\geom3D\core\RegularFace.as"/>
<file line="57" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\ptolemy\geom3D\core\Solid.as"/>
<codefragment>
<![CDATA[
			_about.removeEventListener(SpatialVector.changed, onAboutChanged);
			_about = v;
			_about.addEventListener(SpatialVector.changed, onAboutChanged);

			invalidate();
		}

		private function onAboutChanged(e:Event):void
		{
			invalidate();
		}

		public function get angle():Number
		{
			return _angle;
		}

		public function set angle(n:Number):void
		{
			if (_angle == n) return;
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="67">
<file line="147" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mx\logging\LogLogger.as"/>
<file line="169" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mx\logging\LogLogger.as"/>
<file line="191" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mx\logging\LogLogger.as"/>
<file line="213" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mx\logging\LogLogger.as"/>
<file line="235" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mx\logging\LogLogger.as"/>
<codefragment>
<![CDATA[
	public function warn(msg:String, ... rest):void
	{
		if (hasEventListener(LogEvent.LOG))
		{
			// replace all of the parameters in the msg string
			for (var i:int = 0; i < rest.length; i++)
			{
				msg = msg.replace(new RegExp("\\{"+i+"\\}", "g"), rest[i]);
			}

			dispatchEvent(new LogEvent(msg, LogEventLevel.WARN));
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="67">
<file line="180" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\motion\transitions\OldFadeNewSlideTransitionManager.as"/>
<file line="176" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\motion\transitions\ScreenSlidingStackTransitionManager.as"/>
<codefragment>
<![CDATA[
			this._savedOtherTarget = oldScreen;
			this._activeTransition = new Tween(newScreen, this.duration, this.ease);
			this._activeTransition.animate("x", 0);
			this._activeTransition.delay = this.delay;
			this._activeTransition.onUpdate = activeTransition_onUpdate;
			this._activeTransition.onComplete = activeTransition_onComplete;
			Starling.juggler.add(this._activeTransition);
		}
		
		/**
		 * @private
		 */
		protected function activeTransitionPush_onUpdate():void
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="67">
<file line="414" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\Scale3Image.as"/>
<file line="488" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\Scale3Image.as"/>
<codefragment>
<![CDATA[
					scaledSecondRegionSize = this._width - scaledFirstRegionSize - scaledThirdRegionSize;

					if(scaledOppositeEdgeSize > 0)
					{
						if(this._useSeparateBatch)
						{
							image = helperImage;
							helperImage.texture = this._textures.first;
							helperImage.readjustSize();
						}
						else
						{
							image = this._firstRegionImage;
							image.smoothing = this._smoothing;
							image.color = this._color;
						}
						image.x = 0;
						image.y = 0;
						image.width = scaledFirstRegionSize;
]]>
</codefragment>
</duplication>
<duplication lines="47" tokens="67">
<file line="28" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Panel.as"/>
<file line="107" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Scroller.as"/>
<codefragment>
<![CDATA[
		public static const SCROLL_POLICY_AUTO:String = "auto";

		/**
		 * The scroller will always scroll. If the interaction mode is touch,
		 * elastic edges will always be active, even when the maximum scroll
		 * position is zero. If the scroll bar display mode is fixed, the scroll
		 * bar will always be visible.
		 */
		public static const SCROLL_POLICY_ON:String = "on";
		
		/**
		 * The scroller does not scroll at all. If the scroll bar display mode
		 * is fixed or float, the scroll bar will never be visible.
		 */
		public static const SCROLL_POLICY_OFF:String = "off";

		/**
		 * The scroll bars appear above the scroller's view port, and fade out
		 * when not in use.
		 */
		public static const SCROLL_BAR_DISPLAY_MODE_FLOAT:String = "float";

		/**
		 * The scroll bars are always visible and appear next to the scroller's
		 * view port, making the view port smaller than the scroller.
		 */
		public static const SCROLL_BAR_DISPLAY_MODE_FIXED:String = "fixed";

		/**
		 * The scroll bars are never visible.
		 */
		public static const SCROLL_BAR_DISPLAY_MODE_NONE:String = "none";

		/**
		 * The user may touch anywhere on the scroller and drag to scroll.
		 */
		public static const INTERACTION_MODE_TOUCH:String = "touch";

		/**
		 * The user may interact with the scroll bars to scroll.
		 */
		public static const INTERACTION_MODE_MOUSE:String = "mouse";
		
		/**
		 * Flag to indicate that the clipping has changed.
		 */
		protected static const INVALIDATION_FLAG_CLIPPING:String = "clipping";
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="67">
<file line="262" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\views\screens\HandshakeScreen.as"/>
<file line="177" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\views\screens\SettingsScreen.as"/>
<codefragment>
<![CDATA[
			this._button_done.addEventListener(starling.events.Event.TRIGGERED,doneButton_onRelease);
			//
			this._button_back = new Button();
//			this._button_back.label = "BACK";
			this._button_back.label = this.resourceManager.getString(this.bundleName,"BTN_BACK");
//			this._button_back.onRelease.add(backButton_onRelease);
			this._button_back.addEventListener(starling.events.Event.TRIGGERED,backButton_onRelease);
			//
			this._header = new Header();
//			this._header.title = "Settings";
			this._header.title = this.resourceManager.getString(this.bundleName,"HEADER_SETTINGS");
]]>
</codefragment>
</duplication>
<duplication lines="9" tokens="67">
<file line="185" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\utils\BitBoardUtil.as"/>
<file line="199" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\utils\BitBoardUtil.as"/>
<codefragment>
<![CDATA[
		public static function getEastNorthOccuipies(rowIndex:int, colIndex:int, rowMax:int, colMax:int):BitBoard
		{
			var bb:BitBoard = new BitBoard(colMax,rowMax);
			//
			for(var i:int=0;i<rowMax;i++)
			{
				if(!rowIndex) break;
				if(!(rowIndex+1-i)) break;
				if(!(colMax-colIndex-i)) break;
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="66">
<file line="99" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\ptolemy\geom3D\core\Face.as"/>
<file line="274" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\ptolemy\geom3D\core\JoinedFace.as"/>
<codefragment>
<![CDATA[
			p = _padded[_padded.length - 1] as Point;

			g.beginFill(_fillColor >>> 8, (_fillColor & 0xFF) / 0xFF);
			if (_outlineWidth >= 0)
				g.lineStyle(_outlineWidth, _outlineColor >>> 8, (_outlineColor & 0xFF) / 0xFF);
			else
				g.lineStyle();

			p.moveTo(g);
			for (i = 0;i < _padded.length;i++)
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="66">
<file line="171" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiAd.as"/>
<file line="613" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiAd.as"/>
<codefragment>
<![CDATA[
            delete options.ad_timeout;
            var fadeout_time:Number = options.fadeout_time;
            delete options.fadeout_time;

            /* Load targeting under clip._mochiad */
            if (!MochiAd.load(options)) {
                options.ad_failed();
                options.ad_finished();
                return;
            }

            options.ad_started();

            var mc:MovieClip = clip._mochiad;
            mc["onUnload"] = function ():void {
                MochiAd._cleanup(mc);
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="66">
<file line="105" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\AnchorLayout.as"/>
<file line="137" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\MultiColumnGridLayout.as"/>
<codefragment>
<![CDATA[
			return result;
		}

		/**
		 * @inheritDoc
		 */
		public function getScrollPositionForIndex(index:int, items:Vector.<DisplayObject>, x:Number, y:Number, width:Number, height:Number, result:Point = null):Point
		{
			if(!result)
			{
				result = new Point();
			}
			result.x = 0;
			result.y = 0;
			return result;
		}

		/**
		 * @private
		 */
		protected function layoutItems(items:Vector.<DisplayObject>, boundsX:Number, boundsY:Number, viewPortWidthPixels:Number):Number
]]>
</codefragment>
</duplication>
<duplication lines="7" tokens="66">
<file line="323" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\Scale3Image.as"/>
<file line="329" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\Scale3Image.as"/>
<codefragment>
<![CDATA[
				MatrixUtil.transformCoords(HELPER_MATRIX, this._hitArea.x, this._hitArea.y + this._hitArea.height, HELPER_POINT);
				minX = minX < HELPER_POINT.x ? minX : HELPER_POINT.x;
				maxX = maxX > HELPER_POINT.x ? maxX : HELPER_POINT.x;
				minY = minY < HELPER_POINT.y ? minY : HELPER_POINT.y;
				maxY = maxY > HELPER_POINT.y ? maxY : HELPER_POINT.y;

				MatrixUtil.transformCoords(HELPER_MATRIX, this._hitArea.x + this._hitArea.width, this._hitArea.y, HELPER_POINT);
]]>
</codefragment>
</duplication>
<duplication lines="9" tokens="66">
<file line="73" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\data\ArrayChildrenHierarchicalCollectionDataDescriptor.as"/>
<file line="90" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\data\ArrayChildrenHierarchicalCollectionDataDescriptor.as"/>
<codefragment>
<![CDATA[
			rest.unshift(index);
			var branch:Array = data as Array;
			const indexCount:int = rest.length - 1;
			for(var i:int = 0; i < indexCount; i++)
			{
				index = rest[i] as int;
				branch = branch[index][childrenField] as Array;
			}
			const lastIndex:int = rest[indexCount];
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="66">
<file line="1848" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Scroller.as"/>
<file line="1069" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\renderers\DefaultGroupedListHeaderOrFooterRenderer.as"/>
<codefragment>
<![CDATA[
			return this.setSizeInternal(newWidth, newHeight, false);
		}

		/**
		 * @private
		 */
		protected function refreshBackgroundSkin():void
		{
			this.currentBackgroundSkin = this._backgroundSkin;
			if(!this._isEnabled && this._backgroundDisabledSkin)
			{
				if(this._backgroundSkin)
				{
					this._backgroundSkin.visible = false;
				}
				this.currentBackgroundSkin = this._backgroundDisabledSkin;
			}
			else if(this._backgroundDisabledSkin)
			{
				this._backgroundDisabledSkin.visible = false;
			}
			if(this.currentBackgroundSkin)
]]>
</codefragment>
</duplication>
<duplication lines="41" tokens="66">
<file line="77" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\List.as"/>
<file line="41" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollContainer.as"/>
<file line="36" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollText.as"/>
<codefragment>
<![CDATA[
		public static const SCROLL_POLICY_AUTO:String = "auto";

		/**
		 * @copy feathers.controls.Scroller#SCROLL_POLICY_ON
		 */
		public static const SCROLL_POLICY_ON:String = "on";

		/**
		 * @copy feathers.controls.Scroller#SCROLL_POLICY_OFF
		 */
		public static const SCROLL_POLICY_OFF:String = "off";

		/**
		 * @copy feathers.controls.Scroller#SCROLL_BAR_DISPLAY_MODE_FLOAT
		 */
		public static const SCROLL_BAR_DISPLAY_MODE_FLOAT:String = "float";

		/**
		 * @copy feathers.controls.Scroller#SCROLL_BAR_DISPLAY_MODE_FIXED
		 */
		public static const SCROLL_BAR_DISPLAY_MODE_FIXED:String = "fixed";

		/**
		 * @copy feathers.controls.Scroller#SCROLL_BAR_DISPLAY_MODE_NONE
		 */
		public static const SCROLL_BAR_DISPLAY_MODE_NONE:String = "none";

		/**
		 * @copy feathers.controls.Scroller#INTERACTION_MODE_TOUCH
		 */
		public static const INTERACTION_MODE_TOUCH:String = "touch";

		/**
		 * @copy feathers.controls.Scroller#INTERACTION_MODE_MOUSE
		 */
		public static const INTERACTION_MODE_MOUSE:String = "mouse";

		/**
		 * Constructor.
		 */
		public function ScrollText()
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="66">
<file line="355" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ImageLoader.as"/>
<file line="487" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ImageLoader.as"/>
<codefragment>
<![CDATA[
					if(this.loader)
					{
						this.loader.contentLoaderInfo.removeEventListener(flash.events.Event.COMPLETE, loader_completeHandler);
						this.loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, loader_errorHandler);
						this.loader.contentLoaderInfo.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, loader_errorHandler);
						try
						{
							this.loader.close();
						}
						catch(error:Error)
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="66">
<file line="259" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\GroupedList.as"/>
<file line="329" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<codefragment>
<![CDATA[
		private var _isSelectable:Boolean = true;

		public function get isSelectable():Boolean
		{
			return this._isSelectable;
		}

		public function set isSelectable(value:Boolean):void
		{
			if(this._isSelectable == value)
			{
				return;
			}
			this._isSelectable = value;
			if(!this._isSelectable)
			{
				this.setSelectedLocation(-1, -1);
			}
			this.invalidate(INVALIDATION_FLAG_SELECTED);
]]>
</codefragment>
</duplication>
<duplication lines="41" tokens="66">
<file line="136" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\GroupedList.as"/>
<file line="77" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\List.as"/>
<codefragment>
<![CDATA[
		public static const SCROLL_POLICY_AUTO:String = "auto";

		/**
		 * @copy feathers.controls.Scroller#SCROLL_POLICY_ON
		 */
		public static const SCROLL_POLICY_ON:String = "on";

		/**
		 * @copy feathers.controls.Scroller#SCROLL_POLICY_OFF
		 */
		public static const SCROLL_POLICY_OFF:String = "off";

		/**
		 * @copy feathers.controls.Scroller#SCROLL_BAR_DISPLAY_MODE_FLOAT
		 */
		public static const SCROLL_BAR_DISPLAY_MODE_FLOAT:String = "float";

		/**
		 * @copy feathers.controls.Scroller#SCROLL_BAR_DISPLAY_MODE_FIXED
		 */
		public static const SCROLL_BAR_DISPLAY_MODE_FIXED:String = "fixed";

		/**
		 * @copy feathers.controls.Scroller#SCROLL_BAR_DISPLAY_MODE_NONE
		 */
		public static const SCROLL_BAR_DISPLAY_MODE_NONE:String = "none";

		/**
		 * @copy feathers.controls.Scroller#INTERACTION_MODE_TOUCH
		 */
		public static const INTERACTION_MODE_TOUCH:String = "touch";

		/**
		 * @copy feathers.controls.Scroller#INTERACTION_MODE_MOUSE
		 */
		public static const INTERACTION_MODE_MOUSE:String = "mouse";
		
		/**
		 * Constructor.
		 */
		public function List()
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="66">
<file line="409" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\Array2.as"/>
<file line="319" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\Array3.as"/>
<codefragment>
<![CDATA[
		public function contains(obj:*):Boolean
		{
			var k:int = size;
			for (var i:int = 0; i < k; i++)
			{
				if (_a[i] === obj)
					return true;
			}
			return false;
		}
		
		/**
		 * @inheritDoc
		 */
		public function clear():void
		{
			_a = new Array(size);
		}
		
		/**
		 * @inheritDoc
		 */
		public function getIterator():Iterator
		{
			return new Array3Iterator(this);
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="66">
<file line="69" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\gskinner\motion\plugins\MotionBlurPlugin.as"/>
<file line="62" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\gskinner\motion\plugins\SmartRotationPlugin.as"/>
<codefragment>
<![CDATA[
			GTween.installPlugin(instance, properties || tweenProperties, true);
		}
		
	// Public methods:
		/** @private **/
		public function init(tween:GTween, name:String, value:Number):Number {
			return value;
		}
		
		/** @private **/
		public function tween(tween:GTween, name:String, value:Number, initValue:Number, rangeValue:Number, ratio:Number, end:Boolean):Number {
			if (!((enabled && tween.pluginData.SmartRotationEnabled == null) || tween.pluginData.SmartRotationEnabled)) { return value; }
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="65">
<file line="455" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\Scale3Image.as"/>
<file line="529" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\Scale3Image.as"/>
<codefragment>
<![CDATA[
						if(this._useSeparateBatch && scaledSecondRegionSize > 0)
						{
							this._batch.addImage(helperImage);
						}

						if(this._useSeparateBatch)
						{
							image = helperImage;
							helperImage.texture = this._textures.third;
							helperImage.readjustSize();
						}
						else
						{
							image = this._thirdRegionImage;
							image.smoothing = this._smoothing;
							image.color = this._color;
						}
						image.x = this._width - scaledThirdRegionSize;
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="65">
<file line="434" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\Scale3Image.as"/>
<file line="508" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\Scale3Image.as"/>
<codefragment>
<![CDATA[
						if(this._useSeparateBatch && scaledFirstRegionSize > 0)
						{
							this._batch.addImage(helperImage);
						}

						if(this._useSeparateBatch)
						{
							image = helperImage;
							helperImage.texture = this._textures.second;
							helperImage.readjustSize();
						}
						else
						{
							image = this._secondRegionImage
							image.smoothing = this._smoothing;
							image.color = this._color;
						}
						image.x = scaledFirstRegionSize;
]]>
</codefragment>
</duplication>
<duplication lines="7" tokens="65">
<file line="780" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\core\FeathersControl.as"/>
<file line="786" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\core\FeathersControl.as"/>
<codefragment>
<![CDATA[
				MatrixUtil.transformCoords(HELPER_MATRIX, this.actualWidth, 0, HELPER_POINT);
				minX = minX < HELPER_POINT.x ? minX : HELPER_POINT.x;
				maxX = maxX > HELPER_POINT.x ? maxX : HELPER_POINT.x;
				minY = minY < HELPER_POINT.y ? minY : HELPER_POINT.y;
				maxY = maxY > HELPER_POINT.y ? maxY : HELPER_POINT.y;

				MatrixUtil.transformCoords(HELPER_MATRIX, this.actualWidth, this.actualHeight, HELPER_POINT);
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="65">
<file line="1104" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<file line="1242" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ToggleSwitch.as"/>
<codefragment>
<![CDATA[
					this.offTrackSkinOriginalHeight = this.offTrack.height;
				}
			}

			const needsWidth:Boolean = isNaN(this.explicitWidth);
			const needsHeight:Boolean = isNaN(this.explicitHeight);
			if(!needsWidth && !needsHeight)
			{
				return false;
			}
			this.thumb.validate();
			var newWidth:Number = this.explicitWidth;
			var newHeight:Number = this.explicitHeight;
			if(needsWidth)
			{
				if(this.offTrack)
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="65">
<file line="1777" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Scroller.as"/>
<file line="613" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TextInput.as"/>
<codefragment>
<![CDATA[
			this.doPendingActions();
		}

		/**
		 * @private
		 */
		protected function autoSizeIfNeeded():Boolean
		{
			const needsWidth:Boolean = isNaN(this.explicitWidth);
			const needsHeight:Boolean = isNaN(this.explicitHeight);
			if(!needsWidth && !needsHeight)
			{
				return false;
			}

			var newWidth:Number = this.explicitWidth;
			var newHeight:Number = this.explicitHeight;
			if(needsWidth)
			{
				newWidth = this._originalSkinWidth;
]]>
</codefragment>
</duplication>
<duplication lines="9" tokens="65">
<file line="24" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\compare\compareStringCaseSensitive.as"/>
<file line="24" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\compare\compareStringCaseSensitiveDesc.as"/>
<codefragment>
<![CDATA[
	public function compareStringCaseSensitiveDesc(a:String, b:String):int
	{
		if (a.length + b.length > 2)
		{
			var r:int = 0;
			var k:int = a.length > b.length ? a.length : b.length;
			for (var i:int = 0; i < k; i++)
			{		
				r = b.charCodeAt(i) - a.charCodeAt(i);
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="64">
<file line="289" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\HorizontalLayout.as"/>
<file line="505" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<codefragment>
<![CDATA[
			this._useSquareTiles = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _useVirtualLayout:Boolean = true;

		/**
		 * @inheritDoc
		 */
		public function get useVirtualLayout():Boolean
		{
			return this._useVirtualLayout;
		}

		/**
		 * @private
		 */
		public function set useVirtualLayout(value:Boolean):void
		{
			if(this._useVirtualLayout == value)
			{
				return;
			}
			this._useVirtualLayout = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _typicalItemWidth:Number = 0;
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="64">
<file line="1965" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<file line="778" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\ListDataViewPort.as"/>
<codefragment>
<![CDATA[
		private function childProperties_onChange(proxy:PropertyProxy, name:String):void
		{
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		private function owner_scrollHandler(event:Event):void
		{
			this._isScrolling = true;
		}

		private function dataProvider_changeHandler(event:Event):void
		{
			this.invalidate(INVALIDATION_FLAG_DATA);
			this.invalidateParent();
		}

		private function dataProvider_addItemHandler(event:Event, index:int):void
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="64">
<file line="164" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<file line="164" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\ListDataViewPort.as"/>
<codefragment>
<![CDATA[
		private var explicitVisibleHeight:Number = NaN;

		public function get visibleHeight():Number
		{
			return this.actualVisibleHeight;
		}

		public function set visibleHeight(value:Number):void
		{
			if(this.explicitVisibleHeight == value || (isNaN(value) && isNaN(this.explicitVisibleHeight)))
			{
				return;
			}
			this.explicitVisibleHeight = value;
			this.invalidate(INVALIDATION_FLAG_SIZE);
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="64">
<file line="939" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\SimpleScrollBar.as"/>
<file line="800" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TextInput.as"/>
<codefragment>
<![CDATA[
				return;
			}

			if(this._touchPointID >= 0)
			{
				var touch:Touch;
				for each(var currentTouch:Touch in touches)
				{
					if(currentTouch.id == this._touchPointID)
					{
						touch = currentTouch;
						break;
					}
				}
				if(!touch)
				{
					HELPER_TOUCHES_VECTOR.length = 0;
					return;
				}
				if(touch.phase == TouchPhase.ENDED)
				{
					this._touchPointID = -1;
]]>
</codefragment>
</duplication>
<duplication lines="42" tokens="64">
<file line="41" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollContainer.as"/>
<file line="107" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Scroller.as"/>
<codefragment>
<![CDATA[
		public static const SCROLL_POLICY_AUTO:String = "auto";

		/**
		 * The scroller will always scroll. If the interaction mode is touch,
		 * elastic edges will always be active, even when the maximum scroll
		 * position is zero. If the scroll bar display mode is fixed, the scroll
		 * bar will always be visible.
		 */
		public static const SCROLL_POLICY_ON:String = "on";
		
		/**
		 * The scroller does not scroll at all. If the scroll bar display mode
		 * is fixed or float, the scroll bar will never be visible.
		 */
		public static const SCROLL_POLICY_OFF:String = "off";

		/**
		 * The scroll bars appear above the scroller's view port, and fade out
		 * when not in use.
		 */
		public static const SCROLL_BAR_DISPLAY_MODE_FLOAT:String = "float";

		/**
		 * The scroll bars are always visible and appear next to the scroller's
		 * view port, making the view port smaller than the scroller.
		 */
		public static const SCROLL_BAR_DISPLAY_MODE_FIXED:String = "fixed";

		/**
		 * The scroll bars are never visible.
		 */
		public static const SCROLL_BAR_DISPLAY_MODE_NONE:String = "none";

		/**
		 * The user may touch anywhere on the scroller and drag to scroll.
		 */
		public static const INTERACTION_MODE_TOUCH:String = "touch";

		/**
		 * The user may interact with the scroll bars to scroll.
		 */
		public static const INTERACTION_MODE_MOUSE:String = "mouse";
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="64">
<file line="1994" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="800" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TextInput.as"/>
<codefragment>
<![CDATA[
				return;
			}

			if(this._touchPointID >= 0)
			{
				var touch:Touch;
				for each(var currentTouch:Touch in touches)
				{
					if(currentTouch.id == this._touchPointID)
					{
						touch = currentTouch;
						break;
					}
				}
				if(!touch)
				{
					HELPER_TOUCHES_VECTOR.length = 0;
					return;
				}
				if(touch.phase == TouchPhase.ENDED)
				{
					this._touchPointID = -1;
]]>
</codefragment>
</duplication>
<duplication lines="9" tokens="64">
<file line="1784" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="830" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\SimpleScrollBar.as"/>
<codefragment>
<![CDATA[
				this.thumb.x = this._paddingLeft + Math.max(0, Math.min(trackScrollableWidth, trackScrollableWidth * (this._value - this._minimum) / range));
				this.thumb.y = this._paddingTop + (this.actualHeight - this._paddingTop - this._paddingBottom - this.thumb.height) / 2;
			}
		}

		/**
		 * @private
		 */
		protected function locationToValue(location:Point):Number
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="64">
<file line="635" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="512" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<codefragment>
<![CDATA[
		protected var _trackLayoutMode:String = TRACK_LAYOUT_MODE_SINGLE;

		[Inspectable(type="String",enumeration="single,minMax")]
		/**
		 * Determines how the minimum and maximum track skins are positioned and
		 * sized.
		 *
		 * @default TRACK_LAYOUT_MODE_SINGLE
		 *
		 * @see #TRACK_LAYOUT_MODE_SINGLE
		 * @see #TRACK_LAYOUT_MODE_MIN_MAX
		 */
		public function get trackLayoutMode():String
		{
			return this._trackLayoutMode;
		}

		/**
		 * @private
		 */
		public function set trackLayoutMode(value:String):void
		{
			if(this._trackLayoutMode == value)
			{
				return;
			}
			this._trackLayoutMode = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _trackScaleMode:String = TRACK_SCALE_MODE_DIRECTIONAL;
]]>
</codefragment>
</duplication>
<duplication lines="36" tokens="64">
<file line="136" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\GroupedList.as"/>
<file line="28" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Panel.as"/>
<codefragment>
<![CDATA[
		public static const SCROLL_POLICY_AUTO:String = "auto";

		/**
		 * @copy feathers.controls.Scroller#SCROLL_POLICY_ON
		 */
		public static const SCROLL_POLICY_ON:String = "on";

		/**
		 * @copy feathers.controls.Scroller#SCROLL_POLICY_OFF
		 */
		public static const SCROLL_POLICY_OFF:String = "off";

		/**
		 * @copy feathers.controls.Scroller#SCROLL_BAR_DISPLAY_MODE_FLOAT
		 */
		public static const SCROLL_BAR_DISPLAY_MODE_FLOAT:String = "float";

		/**
		 * @copy feathers.controls.Scroller#SCROLL_BAR_DISPLAY_MODE_FIXED
		 */
		public static const SCROLL_BAR_DISPLAY_MODE_FIXED:String = "fixed";

		/**
		 * @copy feathers.controls.Scroller#SCROLL_BAR_DISPLAY_MODE_NONE
		 */
		public static const SCROLL_BAR_DISPLAY_MODE_NONE:String = "none";

		/**
		 * @copy feathers.controls.Scroller#INTERACTION_MODE_TOUCH
		 */
		public static const INTERACTION_MODE_TOUCH:String = "touch";

		/**
		 * @copy feathers.controls.Scroller#INTERACTION_MODE_MOUSE
		 */
		public static const INTERACTION_MODE_MOUSE:String = "mouse";
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="64">
<file line="65" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedMergeSort.as"/>
<file line="127" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedMergeSort.as"/>
<codefragment>
<![CDATA[
						if (p.data - q.data <= 0)
						{
							e = p; p = p.next; psize--;
						} 
						else
						{
							e = q; q = q.next; qsize--;
						}
						
						if (tail)
							tail.next = e;
						else
							h = e;
						
						e.prev = tail;
						tail = e;
					}
					p = q;
				}
				
				tail.next = null;
				if (nmerges <= 1)
				{
					return h;
					break;
				}
				insize <<= 1;
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="63">
<file line="243" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\HorizontalLayout.as"/>
<file line="244" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\VerticalLayout.as"/>
<codefragment>
<![CDATA[
		[Inspectable(type="String",enumeration="top,middle,bottom")]
		/**
		 * If the total item height is less than the bounds, the positions of
		 * the items can be aligned vertically.
		 */
		public function get verticalAlign():String
		{
			return this._verticalAlign;
		}

		/**
		 * @private
		 */
		public function set verticalAlign(value:String):void
		{
			if(this._verticalAlign == value)
			{
				return;
			}
			this._verticalAlign = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _horizontalAlign:String = HORIZONTAL_ALIGN_LEFT;

		[Inspectable(type="String",enumeration="left,center,right,justify")]
]]>
</codefragment>
</duplication>
<duplication lines="7" tokens="63">
<file line="780" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\core\FeathersControl.as"/>
<file line="323" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\Scale3Image.as"/>
<codefragment>
<![CDATA[
				MatrixUtil.transformCoords(HELPER_MATRIX, this._hitArea.x, this._hitArea.y, HELPER_POINT);
				minX = minX < HELPER_POINT.x ? minX : HELPER_POINT.x;
				maxX = maxX > HELPER_POINT.x ? maxX : HELPER_POINT.x;
				minY = minY < HELPER_POINT.y ? minY : HELPER_POINT.y;
				maxY = maxY > HELPER_POINT.y ? maxY : HELPER_POINT.y;

				MatrixUtil.transformCoords(HELPER_MATRIX, this._hitArea.x, this._hitArea.y + this._hitArea.height, HELPER_POINT);
]]>
</codefragment>
</duplication>
<duplication lines="7" tokens="63">
<file line="774" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\core\FeathersControl.as"/>
<file line="786" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\core\FeathersControl.as"/>
<codefragment>
<![CDATA[
				MatrixUtil.transformCoords(HELPER_MATRIX, this.actualWidth, 0, HELPER_POINT);
				minX = minX < HELPER_POINT.x ? minX : HELPER_POINT.x;
				maxX = maxX > HELPER_POINT.x ? maxX : HELPER_POINT.x;
				minY = minY < HELPER_POINT.y ? minY : HELPER_POINT.y;
				maxY = maxY > HELPER_POINT.y ? maxY : HELPER_POINT.y;

				MatrixUtil.transformCoords(HELPER_MATRIX, this.actualWidth, this.actualHeight, HELPER_POINT);
]]>
</codefragment>
</duplication>
<duplication lines="7" tokens="63">
<file line="1337" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="650" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\SimpleScrollBar.as"/>
<codefragment>
<![CDATA[
		override protected function draw():void
		{
			const dataInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_DATA);
			const stylesInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_STYLES);
			var sizeInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_SIZE);
			const stateInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_STATE);
			const thumbFactoryInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_THUMB_FACTORY);
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="63">
<file line="110" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\suckatmath\machinelearning\markov\MarkovChain.as"/>
<file line="148" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\suckatmath\machinelearning\markov\MarkovChain.as"/>
<codefragment>
<![CDATA[
			var currentgram:Array = new Array();
			var i:int;
			for (i = 0; i < ksize; i++)
			{
				currentgram.push(tokenSequence[i]);
			}
			var stats:TokenStats;
			for (i = ksize; i < tokenSequence.length; i++)
			{
				//get prob of token given current state.
				stats = graph[currentgram.toString()];
				if (stats != null){
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="63">
<file line="171" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\AI\searching\AlphaBeta.as"/>
<file line="106" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\AI\searching\NegaMax.as"/>
<codefragment>
<![CDATA[
			if (willNoneMove(gamePosition))
			{
				return int.MIN_VALUE;
			}
			//
			if (0 == depth)
			{
				return doEvaluation(tempMove, gamePosition);
			}
			//
			if (0 == orderingMoves.length)
			{
				return noneMove();
			}
			//
			var len:int=orderingMoves.length;
			LOG.debug("orderingMoves.length:{0}", len);
			//
			for (var i:int=0; i < len / 2; i++)
]]>
</codefragment>
</duplication>
<duplication lines="2" tokens="63">
<file line="75" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\model\ZobristKeysModel.as"/>
<file line="76" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\model\ZobristKeysModel.as"/>
<file line="77" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\model\ZobristKeysModel.as"/>
<file line="78" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\model\ZobristKeysModel.as"/>
<file line="79" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\model\ZobristKeysModel.as"/>
<file line="80" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\model\ZobristKeysModel.as"/>
<file line="81" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\model\ZobristKeysModel.as"/>
<file line="82" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\model\ZobristKeysModel.as"/>
<file line="83" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\model\ZobristKeysModel.as"/>
<codefragment>
<![CDATA[
			_board.position.setXs(8,[pm_pgn.nextInt(),pm_pgn.nextInt(),pm_pgn.nextInt(),pm_pgn.nextInt(),pm_pgn.nextInt(),pm_pgn.nextInt(),pm_pgn.nextInt(),pm_pgn.nextInt(),pm_pgn.nextInt()]);
			_board.position.setXs(9,[pm_pgn.nextInt(),pm_pgn.nextInt(),pm_pgn.nextInt(),pm_pgn.nextInt(),pm_pgn.nextInt(),pm_pgn.nextInt(),pm_pgn.nextInt(),pm_pgn.nextInt(),pm_pgn.nextInt()]);
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="62">
<file line="176" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\starling\utils\VertexData.as"/>
<file line="188" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\starling\utils\VertexData.as"/>
<codefragment>
<![CDATA[
            var multiplier:Number = mPremultipliedAlpha ? mRawData[int(offset+3)] : 1.0;
            mRawData[offset]        = ((color >> 16) & 0xff) / 255.0 * multiplier;
            mRawData[int(offset+1)] = ((color >>  8) & 0xff) / 255.0 * multiplier;
            mRawData[int(offset+2)] = ( color        & 0xff) / 255.0 * multiplier;
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="62">
<file line="303" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiAd.as"/>
<file line="663" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiAd.as"/>
<codefragment>
<![CDATA[
                MochiAd.unload(clip);
            }

            mc.adLoaded = options.ad_loaded;
            mc.adSkipped = options.ad_skipped;
            mc.adjustProgress = function (msec:Number):void {
                var _chk:Object = mc._mochiad_wait;
                _chk.server_control = true;
                _chk.showing = true;
                _chk.started = getTimer();
                _chk.ad_msec = msec - 250;
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="62">
<file line="113" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TextInput.as"/>
<file line="137" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\StageTextTextEditor.as"/>
<codefragment>
<![CDATA[
		protected var _text:String = "";

		/**
		 * The text displayed by the input.
		 */
		public function get text():String
		{
			return this._text;
		}

		/**
		 * @private
		 */
		public function set text(value:String):void
		{
			if(!value)
			{
				//don't allow null or undefined
				value = "";
			}
			if(this._text == value)
			{
				return;
			}
			this._text = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
			this.dispatchEventWith(starling.events.Event.CHANGE);
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="62">
<file line="948" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TabBar.as"/>
<file line="613" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TextInput.as"/>
<codefragment>
<![CDATA[
			this.doPendingActions();
		}

		/**
		 * @private
		 */
		protected function autoSizeIfNeeded():Boolean
		{
			const needsWidth:Boolean = isNaN(this.explicitWidth);
			const needsHeight:Boolean = isNaN(this.explicitHeight);
			if(!needsWidth && !needsHeight)
			{
				return false;
			}

			var newWidth:Number = this.explicitWidth;
			var newHeight:Number = this.explicitHeight;
			if(needsWidth)
			{
				newWidth = this._originalSkinWidth;
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="62">
<file line="134" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\SimpleScrollBar.as"/>
<file line="239" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<codefragment>
<![CDATA[
		protected var _direction:String = DIRECTION_HORIZONTAL;

		[Inspectable(type="String",enumeration="horizontal,vertical")]
		/**
		 * Determines if the slider's thumb can be dragged horizontally or
		 * vertically. When this value changes, the slider's width and height
		 * values do not change automatically.
		 *
		 * @default DIRECTION_HORIZONTAL
		 * @see #DIRECTION_HORIZONTAL
		 * @see #DIRECTION_VERTICAL
		 */
		public function get direction():String
		{
			return this._direction;
		}
		
		/**
		 * @private
		 */
		public function set direction(value:String):void
		{
			if(this._direction == value)
			{
				return;
			}
			this._direction = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="62">
<file line="1777" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Scroller.as"/>
<file line="948" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TabBar.as"/>
<codefragment>
<![CDATA[
			this.removeChild(tab, true);
		}

		/**
		 * @private
		 */
		protected function autoSizeIfNeeded():Boolean
		{
			const needsWidth:Boolean = isNaN(this.explicitWidth);
			const needsHeight:Boolean = isNaN(this.explicitHeight);
			if(!needsWidth && !needsHeight)
			{
				return false;
			}

			var newWidth:Number = this.explicitWidth;
			var newHeight:Number = this.explicitHeight;
			if(needsWidth)
			{
				newWidth = 0;
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="62">
<file line="42" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ProgressBar.as"/>
<file line="134" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\SimpleScrollBar.as"/>
<codefragment>
<![CDATA[
		protected var _direction:String = DIRECTION_HORIZONTAL;

		[Inspectable(type="String",enumeration="horizontal,vertical")]
		/**
		 * Determines if the scroll bar's thumb can be dragged horizontally or
		 * vertically. When this value changes, the scroll bar's width and
		 * height values do not change automatically.
		 */
		public function get direction():String
		{
			return this._direction;
		}

		/**
		 * @private
		 */
		public function set direction(value:String):void
		{
			if(this._direction == value)
			{
				return;
			}
			this._direction = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="62">
<file line="902" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Header.as"/>
<file line="1075" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\renderers\DefaultGroupedListHeaderOrFooterRenderer.as"/>
<codefragment>
<![CDATA[
		protected function refreshBackgroundSkin():void
		{
			this.currentBackgroundSkin = this._backgroundSkin;
			if(!this._isEnabled && this._backgroundDisabledSkin)
			{
				if(this._backgroundSkin)
				{
					this._backgroundSkin.visible = false;
				}
				this.currentBackgroundSkin = this._backgroundDisabledSkin;
			}
			else if(this._backgroundDisabledSkin)
			{
				this._backgroundDisabledSkin.visible = false;
			}
			if(this.currentBackgroundSkin)
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="62">
<file line="870" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ButtonGroup.as"/>
<file line="1777" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Scroller.as"/>
<codefragment>
<![CDATA[
				this.handlePendingScroll();
			}
		}

		/**
		 * Automatically determines the ideal width and height of the control,
		 * if required. If an explicit width or height is provided, that value
		 * is used instead.
		 */
		protected function autoSizeIfNeeded():Boolean
		{
			const needsWidth:Boolean = isNaN(this.explicitWidth);
			const needsHeight:Boolean = isNaN(this.explicitHeight);
			if(!needsWidth && !needsHeight)
			{
				return false;
			}

			var newWidth:Number = this.explicitWidth;
			var newHeight:Number = this.explicitHeight;
			if(needsWidth)
			{
				newWidth = this._viewPort.width + this._rightViewPortOffset + this._leftViewPortOffset;
]]>
</codefragment>
</duplication>
<duplication lines="30" tokens="62">
<file line="126" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\sLinkedMergeSort.as"/>
<file line="126" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\sLinkedMergeSortCmp.as"/>
<codefragment>
<![CDATA[
						if (cmp(p.data, q.data) <= 0)
						{
							e = p; p = p.next; psize--;
						} 
						else
						{
							e = q; q = q.next; qsize--;
						}
						
						if (tail)
							tail.next = e;
						else
							h = e;
						
						tail = e;
					}
					p = q;
				}
				
				tail.next = null;
				if (nmerges <= 1)
				{
					return h;
					break;
				}
				insize <<= 1;
			}
		}
		
		return null;
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="62">
<file line="302" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\DLinkedList.as"/>
<file line="291" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\SLinkedList.as"/>
<codefragment>
<![CDATA[
					tail = a.tail;
				}
				else
				{
					head = a.head;
					tail = a.tail;
				}
				_count += a.size;
			}
			
			var k:int = args.length;
			for (var i:int = 1; i < k; i++)
			{
				a = args[i];
				if (a.head)
				{
					tail.next = a.head;
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="61">
<file line="504" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiAd.as"/>
<file line="683" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiAd.as"/>
<codefragment>
<![CDATA[
                    return;
                }
                var ad_clip:Object = this.parent._mochiad_ctr;
                var elapsed:Number = getTimer() - this.started;
                var finished:Boolean = false;

                if (!chk.showing) {
                    var total:Number = this.parent._mochiad_ctr.contentLoaderInfo.bytesTotal;
                    if (total > 0) {
                        // ad is now showing
                        chk.showing = true;
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="61">
<file line="191" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiAd.as"/>
<file line="475" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiAd.as"/>
<codefragment>
<![CDATA[
                options.ad_finished();
            }

            /* Peg the 300x250 ad to the upper left of the MC */
            var wh:Array = MochiAd._getRes(options, clip);

            var w:Number = wh[0];
            var h:Number = wh[1];
            mc.x = w * 0.5;
            mc.y = h * 0.5;

            var chk:MovieClip = createEmptyMovieClip(mc, "_mochiad_wait", 3);
            chk.ad_timeout = ad_timeout;
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="61">
<file line="1079" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<file line="816" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\VerticalLayout.as"/>
<codefragment>
<![CDATA[
				for(i = startIndex; i < endIndex; i++)
				{
					result.push(i);
				}
			}
			return result;
		}

		/**
		 * @inheritDoc
		 */
		public function getScrollPositionForIndex(index:int, items:Vector.<DisplayObject>, x:Number, y:Number, width:Number, height:Number, result:Point = null):Point
		{
			if(!result)
			{
				result = new Point();
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="61">
<file line="671" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<file line="670" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledRowsLayout.as"/>
<codefragment>
<![CDATA[
			var positionX:Number = startX;
			var positionY:Number = startY;
			var itemIndex:int = 0;
			for(i = 0; i < itemCount; i++)
			{
				item = items[i];
				if(item is ILayoutDisplayObject)
				{
					layoutItem = ILayoutDisplayObject(item);
					if(!layoutItem.includeInLayout)
					{
						continue;
					}
				}
				if(itemIndex != 0 && itemIndex % horizontalTileCount == 0)
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="61">
<file line="812" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\HorizontalLayout.as"/>
<file line="1079" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<codefragment>
<![CDATA[
				for(i = minimum; i <= maximum; i++)
				{
					result.push(i);
				}
			}
			return result;
		}

		/**
		 * @inheritDoc
		 */
		public function getScrollPositionForIndex(index:int, items:Vector.<DisplayObject>, x:Number, y:Number, width:Number, height:Number, result:Point = null):Point
		{
			if(!result)
			{
				result = new Point();
]]>
</codefragment>
</duplication>
<duplication lines="40" tokens="61">
<file line="88" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\data\HierarchicalCollection.as"/>
<file line="93" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\data\ListCollection.as"/>
<codefragment>
<![CDATA[
		public function ListCollection(data:Object = null)
		{
			if(!data)
			{
				//default to an array if no data is provided
				data = [];
			}
			this.data = data;
		}
		
		/**
		 * @private
		 */
		protected var _data:Object;
		
		/**
		 * The data source for this collection. May be any type of data, but a
		 * <code>dataDescriptor</code> needs to be provided to translate from
		 * the data source's APIs to something that can be understood by
		 * <code>ListCollection</code>.
		 * 
		 * <p>Data sources of type Array, Vector, and XMLList are automatically
		 * detected, and no <code>dataDescriptor</code> needs to be set if the
		 * <code>ListCollection</code> uses one of these types.</p>
		 */
		public function get data():Object
		{
			return _data;
		}
		
		/**
		 * @private
		 */
		public function set data(value:Object):void
		{
			if(this._data == value)
			{
				return;
			}
			this._data = value;
]]>
</codefragment>
</duplication>
<duplication lines="7" tokens="61">
<file line="774" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\core\FeathersControl.as"/>
<file line="780" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\core\FeathersControl.as"/>
<codefragment>
<![CDATA[
				MatrixUtil.transformCoords(HELPER_MATRIX, 0, this.actualHeight, HELPER_POINT);
				minX = minX < HELPER_POINT.x ? minX : HELPER_POINT.x;
				maxX = maxX > HELPER_POINT.x ? maxX : HELPER_POINT.x;
				minY = minY < HELPER_POINT.y ? minY : HELPER_POINT.y;
				maxY = maxY > HELPER_POINT.y ? maxY : HELPER_POINT.y;

				MatrixUtil.transformCoords(HELPER_MATRIX, this.actualWidth, 0, HELPER_POINT);
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="61">
<file line="1991" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="1744" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ToggleSwitch.as"/>
<codefragment>
<![CDATA[
			const touches:Vector.<Touch> = event.getTouches(this.thumb, null, HELPER_TOUCHES_VECTOR);
			if(touches.length == 0)
			{
				return;
			}
			if(this._touchPointID >= 0)
			{
				var touch:Touch;
				for each(var currentTouch:Touch in touches)
				{
					if(currentTouch.id == this._touchPointID)
					{
						touch = currentTouch;
						break;
					}
				}
				if(!touch)
				{
					HELPER_TOUCHES_VECTOR.length = 0;
					return;
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="61">
<file line="465" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ProgressBar.as"/>
<file line="987" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\renderers\DefaultGroupedListHeaderOrFooterRenderer.as"/>
<codefragment>
<![CDATA[
			super.dispose();
		}

		/**
		 * @private
		 */
		override protected function draw():void
		{
			const dataInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_DATA);
			const stylesInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_STYLES);
			const stateInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_STATE);
			var sizeInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_SIZE);

			if(stylesInvalid || stateInvalid)
			{
				this.refreshBackgroundSkin();
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="61">
<file line="35" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ProgressBar.as"/>
<file line="182" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TabBar.as"/>
<codefragment>
<![CDATA[
			this.invalidate(INVALIDATION_FLAG_DATA);
		}

		/**
		 * @private
		 */
		protected var _direction:String = DIRECTION_HORIZONTAL;

		[Inspectable(type="String",enumeration="horizontal,vertical")]
		/**
		 * The tab bar layout is either vertical or horizontal.
		 *
		 * @see #DIRECTION_HORIZONTAL
		 * @see #DIRECTION_VERTICAL
		 */
		public function get direction():String
		{
			return this._direction;
		}

		/**
		 * @private
		 */
		public function set direction(value:String):void
		{
			if(this._direction == value)
			{
				return;
			}
			this._direction = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="61">
<file line="461" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Header.as"/>
<file line="265" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\PageIndicator.as"/>
<codefragment>
<![CDATA[
			this.invalidate(INVALIDATION_FLAG_LAYOUT);
		}

		/**
		 * @private
		 */
		protected var _verticalAlign:String = VERTICAL_ALIGN_MIDDLE;

		[Inspectable(type="String",enumeration="top,middle,bottom")]
		/**
		 * The alignment of the symbols on the vertical axis.
		 */
		public function get verticalAlign():String
		{
			return this._verticalAlign;
		}

		/**
		 * @private
		 */
		public function set verticalAlign(value:String):void
		{
			if(this._verticalAlign == value)
			{
				return;
			}
			this._verticalAlign = value;
			this.invalidate(INVALIDATION_FLAG_LAYOUT);
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="61">
<file line="130" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ButtonGroup.as"/>
<file line="139" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TabBar.as"/>
<codefragment>
<![CDATA[
		protected var inactiveTabs:Vector.<Button> = new <Button>[];

		/**
		 * @private
		 */
		protected var _dataProvider:ListCollection;

		/**
		 * The collection of data to be displayed with tabs.
		 *
		 * @see #tabInitializer
		 */
		public function get dataProvider():ListCollection
		{
			return this._dataProvider;
		}

		/**
		 * @private
		 */
		public function set dataProvider(value:ListCollection):void
		{
			if(this._dataProvider == value)
			{
				return;
			}
			if(this._dataProvider)
			{
				this._dataProvider.removeEventListener(CollectionEventType.ADD_ITEM, dataProvider_addItemHandler);
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="61">
<file line="59" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\gskinner\motion\plugins\CurrentFramePlugin.as"/>
<file line="69" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\gskinner\motion\plugins\MotionBlurPlugin.as"/>
<codefragment>
<![CDATA[
			GTween.installPlugin(instance,["x","y"]);
		}
		
	// Public methods:
		/** @private **/
		public function init(tween:GTween, name:String, value:Number):Number {
			return value;
		}
		
		/** @private **/
		public function tween(tween:GTween, name:String, value:Number, initValue:Number, rangeValue:Number, ratio:Number, end:Boolean):Number {
			if (!((enabled && tween.pluginData.MotionBlurEnabled == null) || tween.pluginData.MotionBlurEnabled)) { return value; }
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="60">
<file line="42" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\ScrollRectManager.as"/>
<file line="101" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\ScrollRectManager.as"/>
<codefragment>
<![CDATA[
			while(newTarget.parent)
			{
				newTarget = newTarget.parent;
				if(newTarget is IDisplayObjectWithScrollRect)
				{
					var targetWithScrollRect:IDisplayObjectWithScrollRect = IDisplayObjectWithScrollRect(newTarget);
					var scrollRect:Rectangle = targetWithScrollRect.scrollRect;
					if(!scrollRect || (scrollRect.x == 0 && scrollRect.y == 0))
					{
						continue;
					}
					matrix = newTarget.getTransformationMatrix(object, matrix);
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="60">
<file line="555" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TextInput.as"/>
<file line="723" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\StageTextTextEditor.as"/>
<codefragment>
<![CDATA[
				this.stageText.selectRange(startIndex, endIndex);
			}
			else
			{
				this._pendingSelectionStartIndex = startIndex;
				this._pendingSelectionEndIndex = endIndex;
			}
		}

		/**
		 * @private
		 */
		override protected function draw():void
		{
			const stateInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_STATE);
			const stylesInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_STYLES);
			const dataInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_DATA);
			const positionInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_POSITION);
]]>
</codefragment>
</duplication>
<duplication lines="35" tokens="60">
<file line="402" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TextInput.as"/>
<file line="250" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ToggleSwitch.as"/>
<codefragment>
<![CDATA[
			this._paddingRight = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingLeft:Number = 0;

		/**
		 * The minimum space, in pixels, between the switch's left edge and the
		 * switch's content.
		 */
		public function get paddingLeft():Number
		{
			return this._paddingLeft;
		}

		/**
		 * @private
		 */
		public function set paddingLeft(value:Number):void
		{
			if(this._paddingLeft == value)
			{
				return;
			}
			this._paddingLeft = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _showLabels:Boolean = true;
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="60">
<file line="239" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<file line="188" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TabBar.as"/>
<codefragment>
<![CDATA[
		protected var _direction:String = DIRECTION_HORIZONTAL;

		[Inspectable(type="String",enumeration="horizontal,vertical")]
		/**
		 * The tab bar layout is either vertical or horizontal.
		 *
		 * @see #DIRECTION_HORIZONTAL
		 * @see #DIRECTION_VERTICAL
		 */
		public function get direction():String
		{
			return this._direction;
		}

		/**
		 * @private
		 */
		public function set direction(value:String):void
		{
			if(this._direction == value)
			{
				return;
			}
			this._direction = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
]]>
</codefragment>
</duplication>
<duplication lines="35" tokens="60">
<file line="396" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\SimpleScrollBar.as"/>
<file line="250" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ToggleSwitch.as"/>
<codefragment>
<![CDATA[
			this._paddingRight = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingLeft:Number = 0;

		/**
		 * The minimum space, in pixels, between the switch's left edge and the
		 * switch's content.
		 */
		public function get paddingLeft():Number
		{
			return this._paddingLeft;
		}

		/**
		 * @private
		 */
		public function set paddingLeft(value:Number):void
		{
			if(this._paddingLeft == value)
			{
				return;
			}
			this._paddingLeft = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _showLabels:Boolean = true;
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="60">
<file line="134" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\SimpleScrollBar.as"/>
<file line="188" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TabBar.as"/>
<codefragment>
<![CDATA[
		protected var _direction:String = DIRECTION_HORIZONTAL;

		[Inspectable(type="String",enumeration="horizontal,vertical")]
		/**
		 * The tab bar layout is either vertical or horizontal.
		 *
		 * @see #DIRECTION_HORIZONTAL
		 * @see #DIRECTION_VERTICAL
		 */
		public function get direction():String
		{
			return this._direction;
		}

		/**
		 * @private
		 */
		public function set direction(value:String):void
		{
			if(this._direction == value)
			{
				return;
			}
			this._direction = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
]]>
</codefragment>
</duplication>
<duplication lines="35" tokens="60">
<file line="552" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="250" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ToggleSwitch.as"/>
<codefragment>
<![CDATA[
			this._paddingRight = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingLeft:Number = 0;

		/**
		 * The minimum space, in pixels, between the switch's left edge and the
		 * switch's content.
		 */
		public function get paddingLeft():Number
		{
			return this._paddingLeft;
		}

		/**
		 * @private
		 */
		public function set paddingLeft(value:Number):void
		{
			if(this._paddingLeft == value)
			{
				return;
			}
			this._paddingLeft = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _showLabels:Boolean = true;
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="60">
<file line="293" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="188" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TabBar.as"/>
<codefragment>
<![CDATA[
		protected var _direction:String = DIRECTION_HORIZONTAL;

		[Inspectable(type="String",enumeration="horizontal,vertical")]
		/**
		 * The tab bar layout is either vertical or horizontal.
		 *
		 * @see #DIRECTION_HORIZONTAL
		 * @see #DIRECTION_VERTICAL
		 */
		public function get direction():String
		{
			return this._direction;
		}

		/**
		 * @private
		 */
		public function set direction(value:String):void
		{
			if(this._direction == value)
			{
				return;
			}
			this._direction = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="60">
<file line="162" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\PickerList.as"/>
<file line="453" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\ListDataViewPort.as"/>
<codefragment>
<![CDATA[
		private var _selectedIndex:int = -1;

		public function get selectedIndex():int
		{
			return this._selectedIndex;
		}

		public function set selectedIndex(value:int):void
		{
			if(this._selectedIndex == value)
			{
				return;
			}
			this._selectedIndex = value;
			this.invalidate(INVALIDATION_FLAG_SELECTED);
			this.dispatchEventWith(Event.CHANGE);
		}

		public function getScrollPositionForIndex(index:int, result:Point = null):Point
]]>
</codefragment>
</duplication>
<duplication lines="35" tokens="60">
<file line="420" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\PageIndicator.as"/>
<file line="250" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ToggleSwitch.as"/>
<codefragment>
<![CDATA[
			this._paddingRight = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingLeft:Number = 0;

		/**
		 * The minimum space, in pixels, between the switch's left edge and the
		 * switch's content.
		 */
		public function get paddingLeft():Number
		{
			return this._paddingLeft;
		}

		/**
		 * @private
		 */
		public function set paddingLeft(value:Number):void
		{
			if(this._paddingLeft == value)
			{
				return;
			}
			this._paddingLeft = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _showLabels:Boolean = true;
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="60">
<file line="217" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\PageIndicator.as"/>
<file line="42" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ProgressBar.as"/>
<codefragment>
<![CDATA[
		protected var _direction:String = DIRECTION_HORIZONTAL;

		[Inspectable(type="String",enumeration="horizontal,vertical")]
		/**
		 * Determines the direction that the progress bar fills. When this value
		 * changes, the progress bar's width and height values do not change
		 * automatically.
		 */
		public function get direction():String
		{
			return this._direction;
		}

		/**
		 * @private
		 */
		public function set direction(value:String):void
		{
			if(this._direction == value)
			{
				return;
			}
			this._direction = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="60">
<file line="232" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\List.as"/>
<file line="453" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\ListDataViewPort.as"/>
<codefragment>
<![CDATA[
		private var _selectedIndex:int = -1;

		public function get selectedIndex():int
		{
			return this._selectedIndex;
		}

		public function set selectedIndex(value:int):void
		{
			if(this._selectedIndex == value)
			{
				return;
			}
			this._selectedIndex = value;
			this.invalidate(INVALIDATION_FLAG_SELECTED);
			this.dispatchEventWith(Event.CHANGE);
		}

		public function getScrollPositionForIndex(index:int, result:Point = null):Point
]]>
</codefragment>
</duplication>
<duplication lines="35" tokens="60">
<file line="556" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Callout.as"/>
<file line="250" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ToggleSwitch.as"/>
<codefragment>
<![CDATA[
			this._paddingRight = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingLeft:Number = 0;

		/**
		 * The minimum space, in pixels, between the switch's left edge and the
		 * switch's content.
		 */
		public function get paddingLeft():Number
		{
			return this._paddingLeft;
		}

		/**
		 * @private
		 */
		public function set paddingLeft(value:Number):void
		{
			if(this._paddingLeft == value)
			{
				return;
			}
			this._paddingLeft = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _showLabels:Boolean = true;
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="60">
<file line="734" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ButtonGroup.as"/>
<file line="787" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TabBar.as"/>
<codefragment>
<![CDATA[
			this.activeLastTab = null;

			const itemCount:int = this._dataProvider ? this._dataProvider.length : 0;
			const lastItemIndex:int = itemCount - 1;
			for(var i:int = 0; i < itemCount; i++)
			{
				var item:Object = this._dataProvider.getItemAt(i);
				if(i == 0)
				{
					var tab:Button = this.activeFirstTab = this.createFirstTab(item);
]]>
</codefragment>
</duplication>
<duplication lines="35" tokens="60">
<file line="556" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Button.as"/>
<file line="250" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ToggleSwitch.as"/>
<codefragment>
<![CDATA[
			this._paddingRight = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingLeft:Number = 0;

		/**
		 * The minimum space, in pixels, between the switch's left edge and the
		 * switch's content.
		 */
		public function get paddingLeft():Number
		{
			return this._paddingLeft;
		}

		/**
		 * @private
		 */
		public function set paddingLeft(value:Number):void
		{
			if(this._paddingLeft == value)
			{
				return;
			}
			this._paddingLeft = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _showLabels:Boolean = true;
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="60">
<file line="362" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Button.as"/>
<file line="191" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ButtonGroup.as"/>
<codefragment>
<![CDATA[
			this._direction = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _gap:Number = 0;

		/**
		 * Space, in pixels, between buttons.
		 */
		public function get gap():Number
		{
			return this._gap;
		}

		/**
		 * @private
		 */
		public function set gap(value:Number):void
		{
			if(this._gap == value)
			{
				return;
			}
			this._gap = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _firstGap:Number = NaN;
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="60">
<file line="59" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\gskinner\motion\plugins\CurrentFramePlugin.as"/>
<file line="62" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\gskinner\motion\plugins\SmartRotationPlugin.as"/>
<codefragment>
<![CDATA[
			GTween.installPlugin(instance, properties || tweenProperties, true);
		}
		
	// Public methods:
		/** @private **/
		public function init(tween:GTween, name:String, value:Number):Number {
			return value;
		}
		
		/** @private **/
		public function tween(tween:GTween, name:String, value:Number, initValue:Number, rangeValue:Number, ratio:Number, end:Boolean):Number {
			if (!((enabled && tween.pluginData.SmartRotationEnabled == null) || tween.pluginData.SmartRotationEnabled)) { return value; }
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="59">
<file line="331" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\themes\MinimalTheme.as"/>
<file line="358" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\themes\MinimalTheme.as"/>
<codefragment>
<![CDATA[
		protected function toggleSwitchThumbInitializer(thumb:Button):void
		{
			const defaultSkin:Scale9Image = new Scale9Image(THUMB_SKIN_TEXTURES, this._scale);
			defaultSkin.width = 66 * this._scale;
			defaultSkin.height = 66 * this._scale;
			thumb.defaultSkin = defaultSkin;
			thumb.minTouchWidth = thumb.minTouchHeight = 88 * this._scale;
		}

		protected function checkInitializer(check:Check):void
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="59">
<file line="270" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\HorizontalLayout.as"/>
<file line="374" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<codefragment>
<![CDATA[
		[Inspectable(type="String",enumeration="left,center,right")]
		/**
		 * If the total row width is less than the bounds, the items in the row
		 * can be aligned horizontally.
		 */
		public function get horizontalAlign():String
		{
			return this._horizontalAlign;
		}

		/**
		 * @private
		 */
		public function set horizontalAlign(value:String):void
		{
			if(this._horizontalAlign == value)
			{
				return;
			}
			this._horizontalAlign = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _tileVerticalAlign:String = TILE_VERTICAL_ALIGN_MIDDLE;
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="59">
<file line="780" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\core\FeathersControl.as"/>
<file line="792" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\core\FeathersControl.as"/>
<codefragment>
<![CDATA[
				MatrixUtil.transformCoords(HELPER_MATRIX, this.actualWidth, this.actualHeight, HELPER_POINT);
				minX = minX < HELPER_POINT.x ? minX : HELPER_POINT.x;
				maxX = maxX > HELPER_POINT.x ? maxX : HELPER_POINT.x;
				minY = minY < HELPER_POINT.y ? minY : HELPER_POINT.y;
				maxY = maxY > HELPER_POINT.y ? maxY : HELPER_POINT.y;
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="59">
<file line="420" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\BitmapFontTextRenderer.as"/>
<file line="931" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\BitmapFontTextRenderer.as"/>
<codefragment>
<![CDATA[
			const font:BitmapFont = this.currentTextFormat.font;
			const customSize:Number = this.currentTextFormat.size;
			const customLetterSpacing:Number = this.currentTextFormat.letterSpacing;
			const isKerningEnabled:Boolean = this.currentTextFormat.isKerningEnabled;
			const scale:Number = isNaN(customSize) ? 1 : (customSize / font.size);
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="59">
<file line="3020" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Scroller.as"/>
<file line="1641" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<codefragment>
<![CDATA[
				var touch:Touch;
				for each(var currentTouch:Touch in touches)
				{
					if(currentTouch.id == this._touchPointID)
					{
						touch = currentTouch;
						break;
					}
				}
				if(!touch)
				{
					HELPER_TOUCHES_VECTOR.length = 0;
					return;
				}
				if(touch.phase == TouchPhase.MOVED)
				{
					touch.getLocation(this, HELPER_POINT);
					this.value = this.locationToValue(HELPER_POINT);
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="59">
<file line="398" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Button.as"/>
<file line="366" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<codefragment>
<![CDATA[
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _horizontalAlign:String = HORIZONTAL_ALIGN_CENTER;

		[Inspectable(type="String",enumeration="left,center,right")]
		/**
		 * If the total row width is less than the bounds, the items in the row
		 * can be aligned horizontally.
		 */
		public function get horizontalAlign():String
		{
			return this._horizontalAlign;
		}

		/**
		 * @private
		 */
		public function set horizontalAlign(value:String):void
		{
			if(this._horizontalAlign == value)
			{
				return;
			}
			this._horizontalAlign = value;
			this.dispatchEventWith(Event.CHANGE);
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="59">
<file line="65" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\sLinkedMergeSort.as"/>
<file line="126" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\sLinkedMergeSort.as"/>
<codefragment>
<![CDATA[
						if (p.data - q.data <= 0)
						{
							e = p; p = p.next; psize--;
						} 
						else
						{
							e = q; q = q.next; qsize--;
						}
						
						if (tail)
							tail.next = e;
						else
							h = e;
						
						tail = e;
					}
					p = q;
				}
				
				tail.next = null;
				if (nmerges <= 1)
				{
					return h;
					break;
				}
				insize <<= 1;
]]>
</codefragment>
</duplication>
<duplication lines="7" tokens="59">
<file line="359" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\utils\BitBoardUtil.as"/>
<file line="429" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\utils\BitBoardUtil.as"/>
<codefragment>
<![CDATA[
		public static function getEastSouthMoves(rowIndex:int, colIndex:int, rowMax:int, colMax:int, flag:int, bluePieces:BitBoard, redPieces:BitBoard):BitBoard
		{
			var bb:BitBoard = new BitBoard(colMax,rowMax);
			//
			for(var i:int=1;i<rowMax;i++)
			{
				if(rowIndex+i>=rowMax) break;
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="59">
<file line="72" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\plugins\kongregate\KongregateModel.as"/>
<file line="71" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\plugins\platogo\PlatogoModel.as"/>
<codefragment>
<![CDATA[
		public function PlatogoModel()
		{
			//TODO: implement function
		}
		
		public function set gameID(value:String):void
		{
			_gameID = value;
		}
		
		public function get gameID():String
		{
			return _gameID;
		}
		
		public function set boardID(value:String):void
		{
			_boardID = value;
		}
		
		public function get boardID():String
		{
			return _boardID;
		}
		
		public function get hasCaptureIndicator():Boolean
		{
			//TODO: implement function
			return false;
]]>
</codefragment>
</duplication>
<duplication lines="6" tokens="58">
<file line="623" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<file line="1108" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<codefragment>
<![CDATA[
					if(!item)
					{
						continue;
					}
					tileWidth = this._useSquareTiles ? Math.max(tileWidth, item.width, item.height) : Math.max(tileWidth, item.width);
					tileHeight = this._useSquareTiles ? Math.max(tileWidth, tileHeight) : Math.max(tileHeight, item.height);
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="58">
<file line="753" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\HorizontalLayout.as"/>
<file line="757" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\VerticalLayout.as"/>
<codefragment>
<![CDATA[
				var minimum:int = -indexOffset + Math.max(0, (scrollY - this._paddingTop) / (this._typicalItemHeight + this._gap));
				//if we're scrolling beyond the final item, we should keep the
				//indices consistent so that items aren't destroyed and
				//recreated unnecessarily
				var maximum:int = Math.min(itemCount - 1, minimum + visibleTypicalItemCount);
				minimum = Math.max(0, maximum - visibleTypicalItemCount);
				for(var i:int = minimum; i <= maximum; i++)
				{
					result.push(i);
				}
				return result;
			}
			const maxPositionY:Number = scrollY + height;
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="58">
<file line="200" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\TextFieldTextEditor.as"/>
<file line="211" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\TextFieldTextRenderer.as"/>
<codefragment>
<![CDATA[
			this._styleSheet = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _embedFonts:Boolean = false;

		/**
		 * Determines if the TextField should use an embedded font or not.
		 */
		public function get embedFonts():Boolean
		{
			return this._embedFonts;
		}

		/**
		 * @private
		 */
		public function set embedFonts(value:Boolean):void
		{
			if(this._embedFonts == value)
			{
				return;
			}
			this._embedFonts = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="58">
<file line="878" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ToggleSwitch.as"/>
<file line="1006" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ToggleSwitch.as"/>
<file line="1134" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ToggleSwitch.as"/>
<file line="1173" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\renderers\BaseDefaultItemRenderer.as"/>
<file line="716" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\renderers\DefaultGroupedListHeaderOrFooterRenderer.as"/>
<codefragment>
<![CDATA[
			if(this._contentLabelProperties == value)
			{
				return;
			}
			if(!value)
			{
				value = new PropertyProxy();
			}
			if(!(value is PropertyProxy))
			{
				const newValue:PropertyProxy = new PropertyProxy();
				for(var propertyName:String in value)
				{
					newValue[propertyName] = value[propertyName];
				}
				value = newValue;
			}
			if(this._contentLabelProperties)
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="58">
<file line="250" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ToggleSwitch.as"/>
<file line="931" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\renderers\DefaultGroupedListHeaderOrFooterRenderer.as"/>
<codefragment>
<![CDATA[
			this._paddingBottom = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingLeft:Number = 0;

		/**
		 * The minimum space, in pixels, between the component's left edge
		 * and the component's content.
		 */
		public function get paddingLeft():Number
		{
			return this._paddingLeft;
		}

		/**
		 * @private
		 */
		public function set paddingLeft(value:Number):void
		{
			if(this._paddingLeft == value)
			{
				return;
			}
			this._paddingLeft = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="58">
<file line="557" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Scroller.as"/>
<file line="1529" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Scroller.as"/>
<file line="574" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\SimpleScrollBar.as"/>
<file line="713" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<file line="841" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<file line="583" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TabBar.as"/>
<file line="487" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TextInput.as"/>
<file line="878" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ToggleSwitch.as"/>
<codefragment>
<![CDATA[
			if(this._onTrackProperties == value)
			{
				return;
			}
			if(!value)
			{
				value = new PropertyProxy();
			}
			if(!(value is PropertyProxy))
			{
				const newValue:PropertyProxy = new PropertyProxy();
				for(var propertyName:String in value)
				{
					newValue[propertyName] = value[propertyName];
				}
				value = newValue;
			}
			if(this._onTrackProperties)
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="58">
<file line="203" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollText.as"/>
<file line="200" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\TextFieldTextEditor.as"/>
<codefragment>
<![CDATA[
			this._textFormat = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _embedFonts:Boolean = false;

		/**
		 * Determines if the TextField should use an embedded font or not.
		 */
		public function get embedFonts():Boolean
		{
			return this._embedFonts;
		}

		/**
		 * @private
		 */
		public function set embedFonts(value:Boolean):void
		{
			if(this._embedFonts == value)
			{
				return;
			}
			this._embedFonts = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="58">
<file line="90" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollText.as"/>
<file line="113" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TextInput.as"/>
<codefragment>
<![CDATA[
		protected var _text:String = "";

		/**
		 * The text displayed by the input.
		 */
		public function get text():String
		{
			return this._text;
		}

		/**
		 * @private
		 */
		public function set text(value:String):void
		{
			if(!value)
			{
				//don't allow null or undefined
				value = "";
			}
			if(this._text == value)
			{
				return;
			}
			this._text = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="58">
<file line="763" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="891" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="1019" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="1147" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="1275" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="557" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Scroller.as"/>
<codefragment>
<![CDATA[
			if(this._horizontalScrollBarProperties == value)
			{
				return;
			}
			if(!value)
			{
				value = new PropertyProxy();
			}
			if(!(value is PropertyProxy))
			{
				const newValue:PropertyProxy = new PropertyProxy();
				for(var propertyName:String in value)
				{
					newValue[propertyName] = value[propertyName];
				}
				value = newValue;
			}
			if(this._horizontalScrollBarProperties)
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="58">
<file line="437" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ProgressBar.as"/>
<file line="250" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ToggleSwitch.as"/>
<codefragment>
<![CDATA[
			this._paddingRight = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingLeft:Number = 0;

		/**
		 * The minimum space, in pixels, between the switch's left edge and the
		 * switch's content.
		 */
		public function get paddingLeft():Number
		{
			return this._paddingLeft;
		}

		/**
		 * @private
		 */
		public function set paddingLeft(value:Number):void
		{
			if(this._paddingLeft == value)
			{
				return;
			}
			this._paddingLeft = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="58">
<file line="203" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Panel.as"/>
<file line="471" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\PickerList.as"/>
<file line="599" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\PickerList.as"/>
<file line="763" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<codefragment>
<![CDATA[
			if(this._minimumTrackProperties == value)
			{
				return;
			}
			if(!value)
			{
				value = new PropertyProxy();
			}
			if(!(value is PropertyProxy))
			{
				const newValue:PropertyProxy = new PropertyProxy();
				for(var propertyName:String in value)
				{
					newValue[propertyName] = value[propertyName];
				}
				value = newValue;
			}
			if(this._minimumTrackProperties)
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="58">
<file line="1697" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\GroupedList.as"/>
<file line="1717" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\GroupedList.as"/>
<codefragment>
<![CDATA[
					do
					{
						groupIndex--;
						if(groupIndex >= 0)
						{
							itemIndex = this._dataProvider.getLength(groupIndex) - 1;
						}
					}
					while(groupIndex > 0 && itemIndex < 0)
				}
				if(groupIndex >= 0 && itemIndex >= 0)
				{
					this.setSelectedLocation(groupIndex, itemIndex);
				}
			}
			else if(event.keyCode == Keyboard.DOWN)
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="58">
<file line="557" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ButtonGroup.as"/>
<file line="522" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\GroupedList.as"/>
<file line="1065" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\GroupedList.as"/>
<file line="1257" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\GroupedList.as"/>
<file line="203" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Panel.as"/>
<codefragment>
<![CDATA[
			if(this._headerProperties == value)
			{
				return;
			}
			if(!value)
			{
				value = new PropertyProxy();
			}
			if(!(value is PropertyProxy))
			{
				const newValue:PropertyProxy = new PropertyProxy();
				for(var propertyName:String in value)
				{
					newValue[propertyName] = value[propertyName];
				}
				value = newValue;
			}
			if(this._headerProperties)
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="58">
<file line="64" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\gskinner\motion\GTweener.as"/>
<file line="59" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\gskinner\motion\plugins\CurrentFramePlugin.as"/>
<codefragment>
<![CDATA[
			GTween.installPlugin(instance,["currentFrame"]);
		}
		
	// Public methods:
		/** @private **/
		public function init(tween:GTween, name:String, value:Number):Number {
			return value;
		}
		
		/** @private **/
		public function tween(tween:GTween, name:String, value:Number, initValue:Number, rangeValue:Number, ratio:Number, end:Boolean):Number {
			if (!((tween.pluginData.CurrentFrameEnabled == null && enabled) || tween.pluginData.CurrentFrameEnabled)) { return value; }
]]>
</codefragment>
</duplication>
<duplication lines="41" tokens="58">
<file line="210" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\views\components\ChessBoard.as"/>
<file line="218" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\views\components\ChessGasket.as"/>
<codefragment>
<![CDATA[
			_borderVisible = value;
		}
		//----------------------------------
		//  background
		//----------------------------------
		private var _background:Image = null;
		
		public function get background():Image
		{
			return _background;
		}
		
		public function set background(value:Image):void
		{
			if(value!=null)
			{
				if(this.contains(_background))
				{
					removeChild(_background);//Remove the existed background at first.
				}
				//set anew value
				_background=value;
				//Puts on background image.
				//			var bg:Image = new Image(DefaultEmbededAssets.getTexture(DefaultConstants.IMG_BACK_GROUND));
				//			addChild(bg);
				//Display anew backgournd
				addChild(_background);
			}
		}
		//--------------------------------------------------------------------------
		//
		//  Protected properties
		//
		//-------------------------------------------------------------------------- 
		
		//--------------------------------------------------------------------------
		//
		//  Constructor
		//
		//--------------------------------------------------------------------------
		public function ChessGasket(upState:Texture=null, text:String="", downState:Texture=null)
]]>
</codefragment>
</duplication>
<duplication lines="8" tokens="57">
<file line="951" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<file line="732" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\VerticalLayout.as"/>
<codefragment>
<![CDATA[
		public function getVisibleIndicesAtScrollPosition(scrollX:Number, scrollY:Number, width:Number, height:Number, itemCount:int, result:Vector.<int> = null):Vector.<int>
		{
			if(!result)
			{
				result = new <int>[];
			}
			result.length = 0;
			const visibleTypicalItemCount:int = Math.ceil(height / (this._typicalItemHeight + this._gap));
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="57">
<file line="888" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\HorizontalLayout.as"/>
<file line="892" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\VerticalLayout.as"/>
<codefragment>
<![CDATA[
			return result;
		}

		/**
		 * @private
		 */
		protected function validateItems(items:Vector.<DisplayObject>):void
		{
			const itemCount:int = items.length;
			for(var i:int = 0; i < itemCount; i++)
			{
				var control:IFeathersControl = items[i] as IFeathersControl;
				if(control)
				{
					control.validate();
]]>
</codefragment>
</duplication>
<duplication lines="8" tokens="57">
<file line="728" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\HorizontalLayout.as"/>
<file line="951" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<codefragment>
<![CDATA[
		public function getVisibleIndicesAtScrollPosition(scrollX:Number, scrollY:Number, width:Number, height:Number, itemCount:int, result:Vector.<int> = null):Vector.<int>
		{
			if(!result)
			{
				result = new <int>[];
			}
			result.length = 0;
			const tileWidth:Number = this._useSquareTiles ? Math.max(0, this._typicalItemWidth, this._typicalItemHeight) : this._typicalItemWidth;
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="57">
<file line="49" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\TextFieldViewPort.as"/>
<file line="137" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\StageTextTextEditor.as"/>
<codefragment>
<![CDATA[
		protected var _text:String = "";

		/**
		 * The text displayed by the input.
		 */
		public function get text():String
		{
			return this._text;
		}

		/**
		 * @private
		 */
		public function set text(value:String):void
		{
			if(!value)
			{
				//don't allow null or undefined
				value = "";
			}
			if(this._text == value)
			{
				return;
			}
			this._text = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="57">
<file line="277" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<file line="198" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\ListDataViewPort.as"/>
<codefragment>
<![CDATA[
		public function set owner(value:List):void
		{
			if(this._owner == value)
			{
				return;
			}
			if(this._owner)
			{
				this._owner.removeEventListener(Event.SCROLL, owner_scrollHandler);
			}
			this._owner = value;
			if(this._owner)
			{
				this._owner.addEventListener(Event.SCROLL, owner_scrollHandler);
			}
		}

		private var _dataProvider:ListCollection;
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="57">
<file line="113" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TextInput.as"/>
<file line="49" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\TextFieldViewPort.as"/>
<codefragment>
<![CDATA[
		private var _text:String = "";

		/**
		 * @inheritDoc
		 */
		public function get text():String
		{
			return this._text;
		}

		/**
		 * @private
		 */
		public function set text(value:String):void
		{
			if(!value)
			{
				value = "";
			}
			if(this._text == value)
			{
				return;
			}
			this._text = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="57">
<file line="3020" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Scroller.as"/>
<file line="1001" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\SimpleScrollBar.as"/>
<codefragment>
<![CDATA[
				var touch:Touch;
				for each(var currentTouch:Touch in touches)
				{
					if(currentTouch.id == this._touchPointID)
					{
						touch = currentTouch;
						break;
					}
				}
				if(!touch)
				{
					HELPER_TOUCHES_VECTOR.length = 0;
					return;
				}

				if(touch.phase == TouchPhase.MOVED)
				{
					touch.getLocation(this, HELPER_POINT);
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="57">
<file line="90" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollText.as"/>
<file line="49" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\TextFieldViewPort.as"/>
<codefragment>
<![CDATA[
		private var _text:String = "";

		/**
		 * @inheritDoc
		 */
		public function get text():String
		{
			return this._text;
		}

		/**
		 * @private
		 */
		public function set text(value:String):void
		{
			if(!value)
			{
				value = "";
			}
			if(this._text == value)
			{
				return;
			}
			this._text = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="57">
<file line="2058" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="3020" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Scroller.as"/>
<codefragment>
<![CDATA[
			var touch:Touch;
			for each(var currentTouch:Touch in touches)
			{
				if(currentTouch.id == this._touchPointID)
				{
					touch = currentTouch;
					break;
				}
			}
			if(!touch)
			{
				HELPER_TOUCHES_VECTOR.length = 0;
				return;
			}

			if(touch.phase == TouchPhase.MOVED)
			{
				//we're saving these to use in the enter frame handler because
				//that provides a longer time offset
				touch.getLocation(this, HELPER_POINT);
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="57">
<file line="92" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ProgressBar.as"/>
<file line="350" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<codefragment>
<![CDATA[
				this.dispatchEventWith(Event.CHANGE);
			}
		}

		/**
		 * @private
		 */
		protected var _minimum:Number = 0;

		/**
		 * @inheritDoc
		 */
		public function get minimum():Number
		{
			return this._minimum;
		}

		/**
		 * @private
		 */
		public function set minimum(value:Number):void
		{
			if(this._minimum == value)
			{
				return;
			}
			this._minimum = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
		}

		/**
		 * @private
		 */
		protected var _maximum:Number = 0;
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="57">
<file line="135" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ButtonGroup.as"/>
<file line="215" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\ListDataViewPort.as"/>
<codefragment>
<![CDATA[
		private var _dataProvider:ListCollection;

		public function get dataProvider():ListCollection
		{
			return this._dataProvider;
		}

		public function set dataProvider(value:ListCollection):void
		{
			if(this._dataProvider == value)
			{
				return;
			}
			if(this._dataProvider)
			{
				this._dataProvider.removeEventListener(Event.CHANGE, dataProvider_changeHandler);
				this._dataProvider.removeEventListener(CollectionEventType.RESET, dataProvider_resetHandler);
]]>
</codefragment>
</duplication>
<duplication lines="8" tokens="57">
<file line="245" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\suckatmath\machinelearning\genetic\core\GeneticEngine.as"/>
<file line="313" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\suckatmath\machinelearning\genetic\core\GeneticEngine.as"/>
<codefragment>
<![CDATA[
			var parents:Array; //of Genome
			var genome:Genome;
			for (i = 0; i < population.length - numNewPerGeneration; i++) {
				if (_crossover) {
					parents = new Array(); //of Genome
					for (var j:int = 0; j < _crossoverNumParents; j++) {
						r = rand();
						var selectedIdx:int = Math.floor(rand() * matingPool.length);
]]>
</codefragment>
</duplication>
<duplication lines="8" tokens="57">
<file line="81" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\BitBoard.as"/>
<file line="249" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\BitBoard.as"/>
<codefragment>
<![CDATA[
		public function clone():BitBoard
		{
			var bb:BitBoard = new BitBoard(this.column,this.row);
			for(var h:int=0;h<_row;h++)
			{
				for(var w:int=0;w<_column;w++)
				{
					bb.setBitt(h,w,Boolean(this.getBitt(h,w)));
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="57">
<file line="64" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\gskinner\motion\GTweener.as"/>
<file line="59" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\gskinner\motion\plugins\AutoHidePlugin.as"/>
<codefragment>
<![CDATA[
			GTween.installPlugin(instance,tweenProperties);
		}
		
	// Public methods:
		/** @private **/
		public function init(tween:GTween, name:String, value:Number):Number {
			return value;
		}
		
		/** @private **/
		public function tween(tween:GTween, name:String, value:Number, initValue:Number, rangeValue:Number, ratio:Number, end:Boolean):Number {
			// only change the visibility if the plugin is enabled:
			if (((tween.pluginData.AutoHideEnabled == null && enabled) || tween.pluginData.AutoHideEnabled)) {
]]>
</codefragment>
</duplication>
<duplication lines="1" tokens="57">
<file line="75" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\model\ZobristKeysModel.as"/>
<file line="84" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\model\ZobristKeysModel.as"/>
<codefragment>
<![CDATA[
			_board.position.setXs(9,[pm_pgn.nextInt(),pm_pgn.nextInt(),pm_pgn.nextInt(),pm_pgn.nextInt(),pm_pgn.nextInt(),pm_pgn.nextInt(),pm_pgn.nextInt(),pm_pgn.nextInt(),pm_pgn.nextInt()]);
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="56">
<file line="426" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\starling\display\QuadBatch.as"/>
<file line="70" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\starling\utils\Polygon.as"/>
<codefragment>
<![CDATA[
            registerPrograms();
        }
        
        /** Returns a rectangle that completely encloses the object as it appears in another 
          * coordinate system. */
        public override function getBounds(targetSpace:DisplayObject, resultRect:Rectangle=null):Rectangle
        {
            if (resultRect == null) resultRect = new Rectangle();
            
            var transformationMatrix:Matrix = targetSpace == this ? 
                null : getTransformationMatrix(targetSpace, sHelperMatrix);
            
            return mVertexData.getBounds(transformationMatrix, 0, -1, resultRect);
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="56">
<file line="15" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\org\osflash\signals\natives\sets\NetConnectionSignalSet.as"/>
<file line="14" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\org\osflash\signals\natives\sets\NetStreamSignalSet.as"/>
<codefragment>
<![CDATA[
		public function NetStreamSignalSet(target:NetStream) {
			super(target);
		}

		public function get asyncError():NativeSignal {
			return getNativeSignal(AsyncErrorEvent.ASYNC_ERROR, AsyncErrorEvent);
		}

		public function get ioError():NativeSignal {
			return getNativeSignal(IOErrorEvent.IO_ERROR, IOErrorEvent);
		}

		public function get netStatus():NativeSignal {
			return getNativeSignal(NetStatusEvent.NET_STATUS, NetStatusEvent);
]]>
</codefragment>
</duplication>
<duplication lines="8" tokens="56">
<file line="1008" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiAd.as"/>
<file line="1023" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiAd.as"/>
<codefragment>
<![CDATA[
            var nameArray:Array = methodName.split(".");

            // drill down through the base object until we get the parent class of method to run
            for (var i:Number = 0; i < nameArray.length - 1; i++) {
                if (base[nameArray[i]] == undefined || base[nameArray[i]] == null) {
                    return undefined;
                }
                base = base[nameArray[i]];
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="56">
<file line="1119" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<file line="1123" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledRowsLayout.as"/>
<codefragment>
<![CDATA[
				const verticalTileCount:int = Math.max(1, (height - this._paddingTop - this._paddingBottom + this._verticalGap) / (tileHeight + this._verticalGap));
				const perPage:Number = horizontalTileCount * verticalTileCount;
				const pageIndex:int = index / perPage;
				if(this._paging == PAGING_HORIZONTAL)
				{
					result.x = pageIndex * width;
					result.y = 0;
				}
				else
				{
					result.x = 0;
					result.y = pageIndex * height;
				}
			}
			else
			{
				result.x = 0;
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="56">
<file line="218" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\Scale3Image.as"/>
<file line="184" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\TiledImage.as"/>
<codefragment>
<![CDATA[
			this._propertiesChanged = true;
		}

		/**
		 * @private
		 */
		private var _color:uint = 0xffffff;

		/**
		 * The color value to pass to the tiled images.
		 */
		public function get color():uint
		{
			return this._color;
		}

		/**
		 * @private
		 */
		public function set color(value:uint):void
		{
			if(this._color == value)
			{
				return;
			}
			this._color = value;
			this._propertiesChanged = true;
		}
		
		/**
		 * @private
		 */
		private var _textureScale:Number = 1;
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="56">
<file line="2054" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="800" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TextInput.as"/>
<codefragment>
<![CDATA[
				return;
			}

			if(this._touchPointID >= 0)
			{
				var touch:Touch;
				for each(var currentTouch:Touch in touches)
				{
					if(currentTouch.id == this._touchPointID)
					{
						touch = currentTouch;
						break;
					}
				}
				if(!touch)
				{
					HELPER_TOUCHES_VECTOR.length = 0;
					return;
				}
				if(touch.phase == TouchPhase.ENDED)
]]>
</codefragment>
</duplication>
<duplication lines="9" tokens="56">
<file line="233" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScreenNavigator.as"/>
<file line="319" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScreenNavigator.as"/>
<codefragment>
<![CDATA[
			for(var eventName:String in events)
			{
				var signal:Object = this._activeScreen.hasOwnProperty(eventName) ? (this._activeScreen[eventName] as SIGNAL_TYPE) : null;
				var eventAction:Object = events[eventName];
				if(eventAction is Function)
				{
					if(signal)
					{
						signal.remove(eventAction as Function);
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="56">
<file line="222" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ProgressBar.as"/>
<file line="289" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TextInput.as"/>
<codefragment>
<![CDATA[
				this._backgroundDisabledSkin != this._backgroundFocusedSkin)
			{
				this.removeChild(this._backgroundDisabledSkin);
			}
			this._backgroundDisabledSkin = value;
			if(this._backgroundDisabledSkin && this._backgroundDisabledSkin.parent != this)
			{
				this._backgroundDisabledSkin.visible = false;
				this._backgroundDisabledSkin.touchable = false;
				this.addChildAt(this._backgroundDisabledSkin, 0);
			}
			this.invalidate(INVALIDATION_FLAG_SKIN);
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="56">
<file line="185" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ProgressBar.as"/>
<file line="212" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TextInput.as"/>
<codefragment>
<![CDATA[
				this._backgroundSkin != this._backgroundFocusedSkin)
			{
				this.removeChild(this._backgroundSkin);
			}
			this._backgroundSkin = value;
			if(this._backgroundSkin && this._backgroundSkin.parent != this)
			{
				this._backgroundSkin.visible = false;
				this._backgroundSkin.touchable = false;
				this.addChildAt(this._backgroundSkin, 0);
			}
			this.invalidate(INVALIDATION_FLAG_SKIN);
]]>
</codefragment>
</duplication>
<duplication lines="6" tokens="56">
<file line="619" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ImageLoader.as"/>
<file line="649" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ImageLoader.as"/>
<codefragment>
<![CDATA[
			this.loader.contentLoaderInfo.removeEventListener(flash.events.Event.COMPLETE, loader_completeHandler);
			this.loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, loader_errorHandler);
			this.loader.contentLoaderInfo.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, loader_errorHandler);
			this.loader = null;
			
			this.cleanupTexture();
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="56">
<file line="566" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Header.as"/>
<file line="289" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TextInput.as"/>
<codefragment>
<![CDATA[
				this._backgroundDisabledSkin != this._backgroundFocusedSkin)
			{
				this.removeChild(this._backgroundDisabledSkin);
			}
			this._backgroundDisabledSkin = value;
			if(this._backgroundDisabledSkin && this._backgroundDisabledSkin.parent != this)
			{
				this._backgroundDisabledSkin.visible = false;
				this._backgroundDisabledSkin.touchable = false;
				this.addChildAt(this._backgroundDisabledSkin, 0);
			}
			this.invalidate(INVALIDATION_FLAG_SKIN);
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="56">
<file line="529" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Header.as"/>
<file line="212" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TextInput.as"/>
<codefragment>
<![CDATA[
				this._backgroundSkin != this._backgroundFocusedSkin)
			{
				this.removeChild(this._backgroundSkin);
			}
			this._backgroundSkin = value;
			if(this._backgroundSkin && this._backgroundSkin.parent != this)
			{
				this._backgroundSkin.visible = false;
				this._backgroundSkin.touchable = false;
				this.addChildAt(this._backgroundSkin, 0);
			}
			this.invalidate(INVALIDATION_FLAG_SKIN);
]]>
</codefragment>
</duplication>
<duplication lines="8" tokens="56">
<file line="123" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\AI\FSM\FiniteStateMachine.as"/>
<file line="80" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\AI\HFSM\HierarchicalFiniteStateMachine.as"/>
<codefragment>
<![CDATA[
			if (currentState != null)
			{
				currentState.exit();
			}
			previousState=currentState;
			globalState=s;
			currentState=s;
			LOG.debug("previousState:{0}||globalState:{1}||currentState:{2}", previousState == null ? previousState : previousState.description, globalState == null ? globalState : globalState.description, currentState == null ? currentState : currentState.description);
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="55">
<file line="56" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\org\osflash\signals\natives\NativeRelaySignal.as"/>
<file line="45" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\org\osflash\signals\natives\NativeSignal.as"/>
<codefragment>
<![CDATA[
		public function get eventType():String { return _eventType; }

		public function set eventType(value:String):void { _eventType = value; }
		
		/** @inheritDoc */
		public function get eventClass():Class { return _eventClass; }

		public function set eventClass(value:Class):void
		{
			_eventClass = value || Event;
			_valueClasses = [_eventClass];
]]>
</codefragment>
</duplication>
<duplication lines="9" tokens="55">
<file line="127" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mx\logging\LogLogger.as"/>
<file line="149" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mx\logging\LogLogger.as"/>
<codefragment>
<![CDATA[
		if (hasEventListener(LogEvent.LOG))
		{
			// replace all of the parameters in the msg string
			for (var i:int = 0; i < rest.length; i++)
			{
				msg = msg.replace(new RegExp("\\{"+i+"\\}", "g"), rest[i]);
			}

			dispatchEvent(new LogEvent(msg, LogEventLevel.DEBUG));
]]>
</codefragment>
</duplication>
<duplication lines="9" tokens="55">
<file line="894" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\HorizontalLayout.as"/>
<file line="1202" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<codefragment>
<![CDATA[
		protected function validateItems(items:Vector.<DisplayObject>):void
		{
			const itemCount:int = items.length;
			for(var i:int = 0; i < itemCount; i++)
			{
				var control:IFeathersControl = items[i] as IFeathersControl;
				if(control)
				{
					control.validate();
]]>
</codefragment>
</duplication>
<duplication lines="8" tokens="55">
<file line="842" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\HorizontalLayout.as"/>
<file line="846" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\VerticalLayout.as"/>
<codefragment>
<![CDATA[
			var lastHeight:Number = 0;
			for(var i:int = 0; i <= index; i++)
			{
				var item:DisplayObject = items[i];
				var iNormalized:int = i + startIndexOffset;
				if(this._useVirtualLayout && !item)
				{
					if(!this._hasVariableItemDimensions || isNaN(this._heightCache[iNormalized]))
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="55">
<file line="774" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\core\FeathersControl.as"/>
<file line="281" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\TiledImage.as"/>
<codefragment>
<![CDATA[
				MatrixUtil.transformCoords(HELPER_MATRIX, this._hitArea.x + this._hitArea.width, this._hitArea.y + this._hitArea.height, HELPER_POINT);
				minX = minX < HELPER_POINT.x ? minX : HELPER_POINT.x;
				maxX = maxX > HELPER_POINT.x ? maxX : HELPER_POINT.x;
				minY = minY < HELPER_POINT.y ? minY : HELPER_POINT.y;
				maxY = maxY > HELPER_POINT.y ? maxY : HELPER_POINT.y;
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="55">
<file line="977" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Header.as"/>
<file line="1005" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Header.as"/>
<codefragment>
<![CDATA[
			for each(var item:DisplayObject in this._rightItems)
			{
				if(item is IFeathersControl)
				{
					IFeathersControl(item).validate();
				}
			}
			HELPER_BOUNDS.x = HELPER_BOUNDS.y = 0;
			HELPER_BOUNDS.scrollX = HELPER_BOUNDS.scrollY = 0;
			HELPER_BOUNDS.explicitWidth = this.actualWidth;
			HELPER_BOUNDS.explicitHeight = this.actualHeight;
			this._layout.horizontalAlign = HorizontalLayout.HORIZONTAL_ALIGN_RIGHT;
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="55">
<file line="624" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\DLinkedList.as"/>
<file line="581" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\SLinkedList.as"/>
<codefragment>
<![CDATA[
								n.insertAfter(new SListNode(args[i]));
								if (n == tail) tail = n.next;
								n = n.next;
								_count++;
							}
						}
					}
					start.node = n;
				}
				else
					start.node = s;
				
				start.list = c;
				return c;
			}
			return null;
		}
		
		/**
		 * Removes and appends the head node to the tail.
		 */
		public function shiftUp():void
		{
			var t:SListNode = head;
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="55">
<file line="447" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\Array2.as"/>
<file line="357" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\Array3.as"/>
<codefragment>
<![CDATA[
		public function isEmpty():Boolean
		{
			return false;
		}
		
		/**
		 * @inheritDoc
		 */
		public function toArray():Array
		{
			var a:Array = _a.concat();
			
			var k:int = size;
			if (a.length > k) a.length = k;
			return a;
		}
		
		/**
		 * Prints out a string representing the current object.
		 * 
		 * @return A string representing the current object.
		 */
		public function toString():String
		{
			return "[Array3, size=" + size + "]";
]]>
</codefragment>
</duplication>
<duplication lines="8" tokens="55">
<file line="81" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\BitBoard.as"/>
<file line="96" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\BitBoard.as"/>
<codefragment>
<![CDATA[
		public function not():BitBoard
		{
			var bb:BitBoard = new BitBoard(this.column,this.row);
			for(var h:int=0;h<_row;h++)
			{
				for(var w:int=0;w<_column;w++)
				{
					bb.setBitt(h,w,!Boolean(this.getBitt(h,w)));
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="55">
<file line="342" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<file line="369" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<codefragment>
<![CDATA[
					this.important.setXs(5, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(6, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(7, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="55">
<file line="340" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<file line="371" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<codefragment>
<![CDATA[
					this.important.setXs(7, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(8, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(9, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="55">
<file line="331" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<file line="354" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<codefragment>
<![CDATA[
					this.convertedImportant.setXs(6, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.convertedImportant.setXs(5, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.convertedImportant.setXs(4, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="55">
<file line="321" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<file line="342" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<codefragment>
<![CDATA[
					this.important.setXs(7, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(6, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(5, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="55">
<file line="319" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<file line="344" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<codefragment>
<![CDATA[
					this.important.setXs(5, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(4, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(3, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="55">
<file line="299" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<file line="316" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<codefragment>
<![CDATA[
					this.important.setXs(0, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(1, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(2, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="55">
<file line="281" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<file line="356" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<codefragment>
<![CDATA[
					this.convertedImportant.setXs(4, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.convertedImportant.setXs(3, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.convertedImportant.setXs(2, [0, 0, 0, 1, 0, 1, 0, 0, 0]);
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="55">
<file line="275" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<file line="340" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<codefragment>
<![CDATA[
					this.important.setXs(9, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(8, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(7, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="55">
<file line="262" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<file line="279" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<codefragment>
<![CDATA[
					this.convertedImportant.setXs(0, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.convertedImportant.setXs(1, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.convertedImportant.setXs(2, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="55">
<file line="251" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<file line="316" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<codefragment>
<![CDATA[
					this.important.setXs(0, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(1, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(2, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="55">
<file line="238" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<file line="303" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<codefragment>
<![CDATA[
					this.convertedImportant.setXs(9, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.convertedImportant.setXs(8, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.convertedImportant.setXs(7, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="55">
<file line="227" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<file line="340" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\consts\DefaultPiecesConstants.as"/>
<codefragment>
<![CDATA[
					this.important.setXs(9, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(8, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
					this.important.setXs(7, [0, 0, 0, 0, 0, 0, 0, 0, 0]);
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="54">
<file line="451" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiAd.as"/>
<file line="598" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiAd.as"/>
<codefragment>
<![CDATA[
                },
                ad_loaded: function (width:Number, height:Number):void {
                },
                ad_failed: function ():void {
                    trace("[MochiAd] Couldn't load an ad, make sure your game's local security sandbox is configured for Access Network Only and that you are not using ad blocking software");
                },
                ad_skipped: function ():void {
                }

            };
            options = MochiAd._parseOptions(options, DEFAULTS);

            var clip:Object = options.clip;
            var ad_msec:Number = 11000;
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="54">
<file line="119" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\renderers\DefaultGroupedListItemRenderer.as"/>
<file line="77" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\renderers\DefaultListItemRenderer.as"/>
<codefragment>
<![CDATA[
				const list:List = List(this._owner);
				this.isToggle = list.isSelectable;
				this._owner.addEventListener(Event.SCROLL, owner_scrollHandler);
			}
			this.invalidate(INVALIDATION_FLAG_DATA);
		}

		/**
		 * @private
		 */
		protected function owner_scrollHandler(event:Event):void
		{
			if(this._touchPointID < 0)
			{
				return;
			}
			this.handleOwnerScroll();
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="54">
<file line="164" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Label.as"/>
<file line="643" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\SimpleScrollBar.as"/>
<codefragment>
<![CDATA[
				this.addChild(this.track);
			}
		}

		/**
		 * @private
		 */
		override protected function draw():void
		{
			const dataInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_DATA);
			const stylesInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_STYLES);
			var sizeInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_SIZE);
			const stateInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_STATE);
			const thumbFactoryInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_THUMB_FACTORY);
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="54">
<file line="27" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedInsertionSort.as"/>
<file line="27" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\dLinkedInsertionSortCmp.as"/>
<codefragment>
<![CDATA[
		if (!node || cmp == null) return null;
		
		var h:DListNode = node, p:DListNode, n:DListNode, m:DListNode, i:DListNode, val:*;
		
		if (descending)
		{
			n = h.next;
			while (n)
			{
				m = n.next;
				p = n.prev;
				
				if (cmp(p.data, n.data) < 0)
]]>
</codefragment>
</duplication>
<duplication lines="7" tokens="54">
<file line="29" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\compare\compareStringCaseInSensitive.as"/>
<file line="26" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\compare\compareStringCaseSensitiveDesc.as"/>
<codefragment>
<![CDATA[
		if (a.length + b.length > 2)
		{
			var r:int = 0;
			var k:int = a.length > b.length ? a.length : b.length;
			for (var i:int = 0; i < k; i++)
			{		
				r = b.charCodeAt(i) - a.charCodeAt(i);
]]>
</codefragment>
</duplication>
<duplication lines="9" tokens="54">
<file line="474" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\NumberBoard.as"/>
<file line="524" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\NumberBoard.as"/>
<codefragment>
<![CDATA[
			for (var i:int=0; i < (size_y - num_to_connect + 1); i++)
			{
				for (var j:int=0; j < (size_x - num_to_connect + 1); j++)
				{
					for (var k:int=0; k < num_to_connect; k++)
					{
						//
						var x:int = 0;
						while (map.gett(j + k,i + k)[x] != -1)
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="54">
<file line="29" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\views\components\jewels\Jewel.as"/>
<file line="31" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\views\components\jewels\Jewel__.as"/>
<codefragment>
<![CDATA[
	public class Jewel__ extends Sprite
	{		
		//--------------------------------------------------------------------------
		//
		//  Variables
		//
		//--------------------------------------------------------------------------
		private var _solid:Solid;
		private var _scene:Scene;
		private var _eye:Eye;
		private var _dangle:Number;
		//----------------------------------
		//  CONSTANTS
		//----------------------------------
		public static const AIR:String = "AIR";
		public static const EARTH:String = "EARTH";
		public static const FIRE:String = "FIRE";
		public static const WATER:String = "WATER";
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="53">
<file line="30" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\org\osflash\signals\natives\sets\FileReferenceSignalSet.as"/>
<file line="28" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\org\osflash\signals\natives\sets\LoaderInfoSignalSet.as"/>
<codefragment>
<![CDATA[
			return getNativeSignal(Event.INIT);
		}

		public function get ioError():NativeSignal {
			return getNativeSignal(IOErrorEvent.IO_ERROR, IOErrorEvent);
		}

		public function get open():NativeSignal {
			return getNativeSignal(Event.OPEN);
		}

		public function get progress():NativeSignal {
			return getNativeSignal(ProgressEvent.PROGRESS, ProgressEvent);
		}

		public function get unload():NativeSignal {
]]>
</codefragment>
</duplication>
<duplication lines="1" tokens="53">
<file line="653" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiServices.as"/>
<file line="653" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiServices.as"/>
<codefragment>
<![CDATA[
            var avm1_bytecode:Array = [150, 21, 0, 7, 1, 0, 0, 0, 0, 98, 116, 110, 0, 7, 2, 0, 0, 0, 0, 116, 104, 105, 115, 0, 28, 150, 22, 0, 0, 99, 114, 101, 97, 116, 101, 69, 109, 112, 116, 121, 77, 111, 118, 105, 101, 67, 108, 105, 112, 0, 82, 135, 1, 0, 0, 23, 150, 13, 0, 4, 0, 0, 111, 110, 82, 101, 108, 101, 97, 115, 101, 0, 142, 8, 0, 0, 0, 0, 2, 42, 0, 114, 0, 150, 17, 0, 0, 32, 0, 7, 1, 0, 0, 0, 8, 0, 0, 115, 112, 108, 105, 116, 0, 82, 135, 1, 0, 1, 23, 150, 7, 0, 4, 1, 7, 0, 0, 0, 0, 78, 150, 8, 0, 0, 95, 98, 108, 97, 110, 107, 0, 154, 1, 0, 0, 150, 7, 0, 0, 99, 108, 105, 99, 107, 0, 150, 7, 0, 4, 1, 7, 1, 0, 0, 0, 78, 150, 27, 0, 7, 2, 0, 0, 0, 7, 0, 0, 0, 0, 0, 76, 111, 99, 97, 108, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 0, 64, 150, 6, 0, 0, 115, 101, 110, 100, 0, 82, 79, 150, 15, 0, 4, 0, 0, 95, 97, 108, 112, 104, 97, 0, 7, 0, 0, 0, 0, 79, 150, 23, 0, 7, 255, 0, 255, 0, 7, 1, 0, 0, 0, 4, 0, 0, 98, 101, 103, 105, 110, 70, 105, 108, 108, 0, 82, 23, 150, 25, 0, 7, 0, 0, 0, 0, 7, 0, 0, 0, 0, 7, 2, 0, 0, 0, 4, 0, 0, 109, 111, 118, 101, 84, 111, 0, 82, 23, 150, 25, 0, 7, 100, 0, 0, 0, 7, 0, 0, 0, 0, 7, 2, 0, 0, 0, 4, 0, 0, 108, 105, 110, 101, 84, 111, 0, 82, 23, 150, 25, 0, 7, 100, 0, 0, 0, 7, 100, 0, 0, 0, 7, 2, 0, 0, 0, 4, 0, 0, 108, 105, 110, 101, 84, 111, 0, 82, 23, 150, 25, 0, 7, 0, 0, 0, 0, 7, 100, 0, 0, 0, 7, 2, 0, 0, 0, 4, 0, 0, 108, 105, 110, 101, 84, 111, 0, 82, 23, 150, 25, 0, 7, 0, 0, 0, 0, 7, 0, 0, 0, 0, 7, 2, 0, 0, 0, 4, 0, 0, 108, 105, 110, 101, 84, 111, 0, 82, 23, 150, 16, 0, 7, 0, 0, 0, 0, 4, 0, 0, 101, 110, 100, 70, 105, 108, 108, 0, 82, 23];
]]>
</codefragment>
</duplication>
<duplication lines="7" tokens="53">
<file line="262" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiAd.as"/>
<file line="652" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiAd.as"/>
<codefragment>
<![CDATA[
                var p:Number = 100 * (1 -
                    ((getTimer() - this.fadeout_start) / this.fadeout_time));
                if (p > 0) {
                    this.parent.alpha = p * 0.01;
                } else {
                    MochiAd.unload(clip);
                    delete this["onEnterFrame"];
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="53">
<file line="162" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\motion\transitions\OldFadeNewSlideTransitionManager.as"/>
<file line="157" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\motion\transitions\ScreenSlidingStackTransitionManager.as"/>
<codefragment>
<![CDATA[
			if(stackIndex < 0)
			{
				var oldScreenClassAndID:String = getQualifiedClassName(oldScreen);
				if(oldScreen is IScreen)
				{
					oldScreenClassAndID += "~" + IScreen(oldScreen).screenID;
				}
				this._stack.push(oldScreenClassAndID);
				oldScreen.x = 0;
				newScreen.x = this.navigator.width;
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="53">
<file line="243" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\HorizontalLayout.as"/>
<file line="346" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<codefragment>
<![CDATA[
		[Inspectable(type="String",enumeration="top,middle,bottom")]
		/**
		 * If the total column height is less than the bounds, the items in the
		 * column can be aligned vertically.
		 */
		public function get verticalAlign():String
		{
			return this._verticalAlign;
		}

		/**
		 * @private
		 */
		public function set verticalAlign(value:String):void
		{
			if(this._verticalAlign == value)
			{
				return;
			}
			this._verticalAlign = value;
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _horizontalAlign:String = HORIZONTAL_ALIGN_CENTER;
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="53">
<file line="119" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollText.as"/>
<file line="253" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\TextFieldTextEditor.as"/>
<codefragment>
<![CDATA[
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _isHTML:Boolean = false;

		/**
		 * Determines if the TextField should display the text as HTML or not.
		 */
		public function get isHTML():Boolean
		{
			return this._isHTML;
		}

		/**
		 * @private
		 */
		public function set isHTML(value:Boolean):void
		{
			if(this._isHTML == value)
			{
				return;
			}
			this._isHTML = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
		}

		/**
		 * @private
		 */
		protected var _alwaysShowSelection:Boolean = false;
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="53">
<file line="677" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\PickerList.as"/>
<file line="619" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TabBar.as"/>
<codefragment>
<![CDATA[
			this.toggleGroup.addEventListener(Event.CHANGE, toggleGroup_changeHandler);
		}

		/**
		 * @private
		 */
		override protected function draw():void
		{
			const dataInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_DATA);
			const stylesInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_STYLES);
			const stateInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_STATE);
			const selectionInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_SELECTED);
]]>
</codefragment>
</duplication>
<duplication lines="7" tokens="53">
<file line="170" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Label.as"/>
<file line="1337" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<codefragment>
<![CDATA[
		override protected function draw():void
		{
			const dataInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_DATA);
			const stylesInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_STYLES);
			var sizeInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_SIZE);
			const stateInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_STATE);
			const thumbFactoryInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_THUMB_FACTORY);
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="53">
<file line="341" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\views\components\ChessPiece.as"/>
<file line="453" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\views\components\ChessPiece.as"/>
<codefragment>
<![CDATA[
					chessPiecesModel.selectedPiece = this;
					//				LOG.debug("occupies:{0}",this.chessVO.occupies.dump());
					LOG.debug("captures:{0}", this.chessVO.captures.dump());
					LOG.debug("moves:{0}", this.chessVO.moves.dump());
					LOG.debug("current bitboard:{0}", FlexGlobals.chessPiecesModel.allPieces.dump());
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="52">
<file line="11" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\org\osflash\signals\PrioritySignal.as"/>
<file line="93" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\org\osflash\signals\natives\NativeRelaySignal.as"/>
<codefragment>
<![CDATA[
			return addOnceWithPriority(listener);
		}

		/**
		 * @inheritDoc
		 * @throws flash.errors.IllegalOperationError <code>IllegalOperationError</code>: You cannot addOnce() then add() the same listener without removing the relationship first.
		 * @throws ArgumentError <code>ArgumentError</code>: Given listener is <code>null</code>.
		 * @throws ArgumentError <code>ArgumentError</code>: Target object cannot be <code>null</code>.
		 */
		public function addWithPriority(listener:Function, priority:int = 0):ISlot
		{
			return registerListenerWithPriority(listener, false, priority);
		}

		/**
		 * @inheritDoc
		 * @throws flash.errors.IllegalOperationError <code>IllegalOperationError</code>: You cannot addOnce() then add() the same listener without removing the relationship first.
		 * @throws ArgumentError <code>ArgumentError</code>: Given listener is <code>null</code>.
		 * @throws ArgumentError <code>ArgumentError</code>: Target object cannot be <code>null</code>.
		 */
		public function addOnceWithPriority(listener:Function, priority:int = 0):ISlot
		{
			return registerListenerWithPriority(listener, true, priority);
		}
		
		/** @inheritDoc */
		override public function remove(listener:Function):ISlot
]]>
</codefragment>
</duplication>
<duplication lines="6" tokens="52">
<file line="994" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiAd.as"/>
<file line="1008" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiAd.as"/>
<codefragment>
<![CDATA[
            var nameArray:Array = objectName.split(".");

            // drill down through the base object until we get the parent class of object to modify
            for (var i:Number = 0; i < nameArray.length - 1; i++) {
                if (base[nameArray[i]] == undefined || base[nameArray[i]] == null) {
                    return undefined;
]]>
</codefragment>
</duplication>
<duplication lines="7" tokens="52">
<file line="961" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiAd.as"/>
<file line="576" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiServices.as"/>
<codefragment>
<![CDATA[
                options = clip.loaderInfo.parameters.mochiad_options;
            }

            if (options) {
                var pairs:Array = options.split("&");
                for (var i:Number = 0; i < pairs.length; i++) {
                    var kv:Array = pairs[i].split("=");
]]>
</codefragment>
</duplication>
<duplication lines="6" tokens="52">
<file line="181" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\motion\transitions\OldFadeNewSlideTransitionManager.as"/>
<file line="187" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\motion\transitions\TabBarSlideTransitionManager.as"/>
<codefragment>
<![CDATA[
				this._activeTransition = new Tween(this._newScreen, this.duration, this.ease);
				this._activeTransition.animate("x", 0);
				this._activeTransition.delay = this.delay;
				this._activeTransition.onUpdate = activeTransition_onUpdate;
				this._activeTransition.onComplete = activeTransition_onComplete;
				Starling.juggler.add(this._activeTransition);
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="52">
<file line="531" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\VerticalLayout.as"/>
<file line="864" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\VerticalLayout.as"/>
<codefragment>
<![CDATA[
					if(this._hasVariableItemDimensions)
					{
						if(isNaN(this._heightCache[iNormalized]))
						{
							this._heightCache[iNormalized] = item.height;
							this.dispatchEventWith(Event.CHANGE);
						}
					}
					else if(this._typicalItemHeight >= 0)
					{
						item.height = this._typicalItemHeight;
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="52">
<file line="592" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<file line="644" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\VerticalLayout.as"/>
<codefragment>
<![CDATA[
			const minWidth:Number = viewPortBounds ? viewPortBounds.minWidth : 0;
			const minHeight:Number = viewPortBounds ? viewPortBounds.minHeight : 0;
			const maxWidth:Number = viewPortBounds ? viewPortBounds.maxWidth : Number.POSITIVE_INFINITY;
			const maxHeight:Number = viewPortBounds ? viewPortBounds.maxHeight : Number.POSITIVE_INFINITY;
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="52">
<file line="137" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\MultiColumnGridLayout.as"/>
<file line="1084" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<codefragment>
<![CDATA[
			return result;
		}

		/**
		 * @inheritDoc
		 */
		public function getScrollPositionForIndex(index:int, items:Vector.<DisplayObject>, x:Number, y:Number, width:Number, height:Number, result:Point = null):Point
		{
			if(!result)
			{
				result = new Point();
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="52">
<file line="118" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\MultiColumnGridLayout.as"/>
<file line="644" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\VerticalLayout.as"/>
<codefragment>
<![CDATA[
			const minWidth:Number = viewPortBounds ? viewPortBounds.minWidth : 0;
			const minHeight:Number = viewPortBounds ? viewPortBounds.minHeight : 0;
			const maxWidth:Number = viewPortBounds ? viewPortBounds.maxWidth : Number.POSITIVE_INFINITY;
			const maxHeight:Number = viewPortBounds ? viewPortBounds.maxHeight : Number.POSITIVE_INFINITY;
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="52">
<file line="817" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\HorizontalLayout.as"/>
<file line="137" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\MultiColumnGridLayout.as"/>
<codefragment>
<![CDATA[
			return result;
		}

		/**
		 * @inheritDoc
		 */
		public function getScrollPositionForIndex(index:int, items:Vector.<DisplayObject>, x:Number, y:Number, width:Number, height:Number, result:Point = null):Point
		{
			if(!result)
			{
				result = new Point();
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="52">
<file line="639" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\HorizontalLayout.as"/>
<file line="118" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\MultiColumnGridLayout.as"/>
<codefragment>
<![CDATA[
			const minWidth:Number = viewPortBounds ? viewPortBounds.minWidth : 0;
			const minHeight:Number = viewPortBounds ? viewPortBounds.minHeight : 0;
			const maxWidth:Number = viewPortBounds ? viewPortBounds.maxWidth : Number.POSITIVE_INFINITY;
			const maxHeight:Number = viewPortBounds ? viewPortBounds.maxHeight : Number.POSITIVE_INFINITY;
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="52">
<file line="526" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\HorizontalLayout.as"/>
<file line="860" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\HorizontalLayout.as"/>
<codefragment>
<![CDATA[
					if(this._hasVariableItemDimensions)
					{
						if(isNaN(this._widthCache[iNormalized]))
						{
							this._widthCache[iNormalized] = item.width;
							this.dispatchEventWith(Event.CHANGE);
						}
					}
					else if(this._typicalItemWidth >= 0)
					{
						item.width = this._typicalItemWidth;
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="52">
<file line="147" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\AnchorLayout.as"/>
<file line="503" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\AnchorLayout.as"/>
<codefragment>
<![CDATA[
				this.layoutVector(mainVector, otherVector, x, y, width, height);
				var oldLength:Number = currentLength;
				currentLength = otherVector.length;
				if(oldLength == currentLength)
				{
					this._helperVector1.length = 0;
					this._helperVector2.length = 0;
					throw new IllegalOperationError(CIRCULAR_REFERENCE_ERROR);
				}
			}
			this._helperVector1.length = 0;
			this._helperVector2.length = 0;
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="52">
<file line="105" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\AnchorLayout.as"/>
<file line="817" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\HorizontalLayout.as"/>
<codefragment>
<![CDATA[
			return result;
		}

		/**
		 * @inheritDoc
		 */
		public function getScrollPositionForIndex(index:int, items:Vector.<DisplayObject>, x:Number, y:Number, width:Number, height:Number, result:Point = null):Point
		{
			if(!result)
			{
				result = new Point();
]]>
</codefragment>
</duplication>
<duplication lines="4" tokens="52">
<file line="65" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\AnchorLayout.as"/>
<file line="639" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\HorizontalLayout.as"/>
<codefragment>
<![CDATA[
			const minWidth:Number = viewPortBounds ? viewPortBounds.minWidth : 0;
			const minHeight:Number = viewPortBounds ? viewPortBounds.minHeight : 0;
			const maxWidth:Number = viewPortBounds ? viewPortBounds.maxWidth : Number.POSITIVE_INFINITY;
			const maxHeight:Number = viewPortBounds ? viewPortBounds.maxHeight : Number.POSITIVE_INFINITY;
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="52">
<file line="52" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\Scale3Image.as"/>
<file line="52" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\Scale9Image.as"/>
<codefragment>
<![CDATA[
		public function Scale9Image(textures:Scale9Textures, textureScale:Number = 1)
		{
			super();
			this.textures = textures;
			this._textureScale = textureScale;
			this._hitArea = new Rectangle();
			this.readjustSize();

			this.addEventListener(Event.FLATTEN, flattenHandler);
		}

		/**
		 * @private
		 */
		private var _propertiesChanged:Boolean = true;

		/**
		 * @private
		 */
		private var _layoutChanged:Boolean = true;
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="52">
<file line="233" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\TextFieldTextEditor.as"/>
<file line="253" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\TextFieldTextRenderer.as"/>
<codefragment>
<![CDATA[
		protected var _wordWrap:Boolean = false;

		/**
		 * Determines if the TextField wraps text to the next line.
		 */
		public function get wordWrap():Boolean
		{
			return this._wordWrap;
		}

		/**
		 * @private
		 */
		public function set wordWrap(value:Boolean):void
		{
			if(this._wordWrap == value)
			{
				return;
			}
			this._wordWrap = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _snapToPixels:Boolean = true;
]]>
</codefragment>
</duplication>
<duplication lines="9" tokens="52">
<file line="1389" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<file line="630" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\ListDataViewPort.as"/>
<codefragment>
<![CDATA[
			const virtualLayout:IVirtualLayout = this._layout as IVirtualLayout;
			const useVirtualLayout:Boolean = virtualLayout && virtualLayout.useVirtualLayout;
			if(useVirtualLayout)
			{
				this._ignoreLayoutChanges = true;
				virtualLayout.typicalItemWidth = this._typicalItemWidth;
				virtualLayout.typicalItemHeight = this._typicalItemHeight;
				this._ignoreLayoutChanges = false;
				virtualLayout.measureViewPort(itemCount, HELPER_BOUNDS, HELPER_POINT);
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="52">
<file line="938" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\renderers\DefaultGroupedListHeaderOrFooterRenderer.as"/>
<file line="681" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\TextFieldViewPort.as"/>
<codefragment>
<![CDATA[
		private var _paddingLeft:Number = 0;

		public function get paddingLeft():Number
		{
			return this._paddingLeft;
		}

		public function set paddingLeft(value:Number):void
		{
			if(this._paddingLeft == value)
			{
				return;
			}
			this._paddingLeft = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		override public function set visible(value:Boolean):void
]]>
</codefragment>
</duplication>
<duplication lines="32" tokens="52">
<file line="136" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\renderers\BaseDefaultItemRenderer.as"/>
<file line="93" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\renderers\DefaultGroupedListHeaderOrFooterRenderer.as"/>
<codefragment>
<![CDATA[
		protected var content:DisplayObject;

		/**
		 * @private
		 */
		protected var _data:Object;

		/**
		 * @inheritDoc
		 */
		public function get data():Object
		{
			return this._data;
		}

		/**
		 * @private
		 */
		public function set data(value:Object):void
		{
			if(this._data == value)
			{
				return;
			}
			this._data = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
		}

		/**
		 * @private
		 */
		protected var _groupIndex:int = -1;
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="52">
<file line="230" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ToggleSwitch.as"/>
<file line="884" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\renderers\DefaultGroupedListHeaderOrFooterRenderer.as"/>
<codefragment>
<![CDATA[
		protected var _paddingRight:Number = 0;

		/**
		 * The minimum space, in pixels, between the component's right edge
		 * and the component's content.
		 */
		public function get paddingRight():Number
		{
			return this._paddingRight;
		}

		/**
		 * @private
		 */
		public function set paddingRight(value:Number):void
		{
			if(this._paddingRight == value)
			{
				return;
			}
			this._paddingRight = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _paddingBottom:Number = 0;
]]>
</codefragment>
</duplication>
<duplication lines="7" tokens="52">
<file line="165" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TabBar.as"/>
<file line="310" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<codefragment>
<![CDATA[
				this._dataProvider.removeEventListener(CollectionEventType.RESET, dataProvider_resetHandler);
				this._dataProvider.removeEventListener(CollectionEventType.ADD_ITEM, dataProvider_addItemHandler);
				this._dataProvider.removeEventListener(CollectionEventType.REMOVE_ITEM, dataProvider_removeItemHandler);
				this._dataProvider.removeEventListener(CollectionEventType.REPLACE_ITEM, dataProvider_replaceItemHandler);
				this._dataProvider.removeEventListener(CollectionEventType.UPDATE_ITEM, dataProvider_updateItemHandler);
			}
			this._dataProvider = value;
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="52">
<file line="430" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<file line="311" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ToggleSwitch.as"/>
<codefragment>
<![CDATA[
		protected var _showThumb:Boolean = true;

		/**
		 * Determines if the thumb should be displayed. This stops interaction
		 * while still displaying the background.
		 */
		public function get showThumb():Boolean
		{
			return this._showThumb;
		}

		/**
		 * @private
		 */
		public function set showThumb(value:Boolean):void
		{
			if(this._showThumb == value)
			{
				return;
			}
			this._showThumb = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _trackLayoutMode:String = TRACK_LAYOUT_MODE_SINGLE;
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="52">
<file line="1449" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="1788" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Scroller.as"/>
<codefragment>
<![CDATA[
			const needsWidth:Boolean = isNaN(this.explicitWidth);
			const needsHeight:Boolean = isNaN(this.explicitHeight);
			if(!needsWidth && !needsHeight)
			{
				return false;
			}

			var newWidth:Number = this.explicitWidth;
			var newHeight:Number = this.explicitHeight;
			if(needsWidth)
]]>
</codefragment>
</duplication>
<duplication lines="6" tokens="52">
<file line="265" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Panel.as"/>
<file line="341" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Panel.as"/>
<codefragment>
<![CDATA[
			const oldHeaderWidth:Number = this.header.width;
			const oldHeaderHeight:Number = this.header.height;
			this.header.width = this.explicitWidth;
			this.header.maxWidth = this._maxWidth;
			this.header.height = NaN;
			this.header.validate();
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="52">
<file line="200" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\List.as"/>
<file line="329" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<codefragment>
<![CDATA[
		private var _isSelectable:Boolean = true;

		public function get isSelectable():Boolean
		{
			return this._isSelectable;
		}

		public function set isSelectable(value:Boolean):void
		{
			if(this._isSelectable == value)
			{
				return;
			}
			this._isSelectable = value;
			if(!this._isSelectable)
			{
				this.setSelectedLocation(-1, -1);
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="52">
<file line="46" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Label.as"/>
<file line="177" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\BitmapFontTextRenderer.as"/>
<codefragment>
<![CDATA[
		protected var _text:String = null;
		
		/**
		 * The text to display.
		 */
		public function get text():String
		{
			return this._text;
		}
		
		/**
		 * @private
		 */
		public function set text(value:String):void
		{
			if(this._text == value)
			{
				return;
			}
			this._text = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
		}
		
		/**
		 * @private
		 */
		protected var _smoothing:String = TextureSmoothing.BILINEAR;
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="52">
<file line="430" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\GroupedList.as"/>
<file line="347" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\PickerList.as"/>
<codefragment>
<![CDATA[
		protected var _typicalItem:Object = null;
		
		/**
		 * Used to auto-size the list. If the list's width or height is NaN, the
		 * list will try to automatically pick an ideal size. This item is
		 * used in that process to create a sample item renderer.
		 */
		public function get typicalItem():Object
		{
			return this._typicalItem;
		}
		
		/**
		 * @private
		 */
		public function set typicalItem(value:Object):void
		{
			if(this._typicalItem == value)
			{
				return;
			}
			this._typicalItem = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _buttonFactory:Function;
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="52">
<file line="192" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\GroupedList.as"/>
<file line="133" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\List.as"/>
<codefragment>
<![CDATA[
		protected var _layout:ILayout;

		/**
		 * The layout algorithm used to position and, optionally, size the
		 * list's items.
		 */
		public function get layout():ILayout
		{
			return this._layout;
		}

		/**
		 * @private
		 */
		public function set layout(value:ILayout):void
		{
			if(this._layout == value)
			{
				return;
			}
			this._layout = value;
			this.invalidate(INVALIDATION_FLAG_SCROLL);
		}
		
		/**
		 * @private
		 */
		protected var _dataProvider:ListCollection;
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="52">
<file line="878" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ButtonGroup.as"/>
<file line="1449" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<codefragment>
<![CDATA[
			const needsWidth:Boolean = isNaN(this.explicitWidth);
			const needsHeight:Boolean = isNaN(this.explicitHeight);
			if(!needsWidth && !needsHeight)
			{
				return false;
			}

			var newWidth:Number = this.explicitWidth;
			var newHeight:Number = this.explicitHeight;
			if(needsWidth)
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="52">
<file line="25" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\sLinkedInsertionSort.as"/>
<file line="25" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\sLinkedInsertionSortCmp.as"/>
<codefragment>
<![CDATA[
	public function sLinkedInsertionSortCmp(node:SListNode, cmp:Function, descending:Boolean = false):SListNode
	{
		var a:Array = [];
		var k:int = 0;
		
		var h:SListNode = node;
		var n:SListNode = node;
		while (n)
		{
			a[k++] = n.data;
			n = n.next;
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="52">
<file line="42" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\GraphBoard.as"/>
<file line="16" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\jp\dip\hael\gameai\graph\GraphEx.as"/>
<codefragment>
<![CDATA[
		public function size():int{ return nodes_.length; }
		
		/**
		 * ノード数
		 */
		public function nNodes():int{ return nNodes_; }
		
		/**
		 * ノード取得
		 * @param index インデクス
		 */
		public function node(index:int):Node { return nodes_[index]; }
		
		/**
		 * エッジ群取得
		 * @param src 始点
		 */
		public function edge(src:int):Array /* of Edge */ { return edges_[src]; }
		
		
		
		
		//---------------------------------------------------------------------
		//
		//  Public methods
		//
		//---------------------------------------------------------------------
		/**
		 * コンストラクタ<br />
		 * 無向グラフ未対応
		 * 
		 * @param isDigraph 有効グラフか否か
		 */
		public function GraphEx(isDigraph:Boolean = true)
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="52">
<file line="16" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\business\fsm\states\chess\AttackState.as"/>
<file line="48" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\business\fsm\states\chess\NascenceState.as"/>
<file line="48" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\business\fsm\states\chess\RenascenceState.as"/>
<codefragment>
<![CDATA[
		public function RenascenceState(agent:ChessAgent, resource:Object, description:String=null)
		{
			//TODO: implement function
			super(agent, resource, description);
		}     	
		//--------------------------------------------------------------------------
		//
		//  Public methods
		//
		//--------------------------------------------------------------------------
		override public function enter():void
		{
			//TODO: implement function
		}
		
		override public function exit():void
		{
			//TODO: implement function
		}
		
		override public function update(time:Number=0):void
]]>
</codefragment>
</duplication>
<duplication lines="3" tokens="51">
<file line="120" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\starling\utils\VertexData.as"/>
<file line="123" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\starling\utils\VertexData.as"/>
<codefragment>
<![CDATA[
                    targetRawData[int(targetIndex++)] = mRawData[int(sourceIndex++)];
                    targetRawData[int(targetIndex++)] = mRawData[int(sourceIndex++)];
                    targetRawData[int(targetIndex++)] = mRawData[int(sourceIndex++)];
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="51">
<file line="37" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\jp\dip\hael\gameai\graph\searcher\BFS.as"/>
<file line="26" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\jp\dip\hael\gameai\graph\searcher\Dijkstra.as"/>
<codefragment>
<![CDATA[
				route[next.dst] = next.src;
				
				if(next.dst == dst){
					src_ = src;
					dst_ = dst;
					route_ = route;
					found_ = true;
					return true;
				}
				
				var dsts:Array = graphRef_.edge(next.dst);
				for each(var e:WeightedEdge in dsts){
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="51">
<file line="149" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\motion\transitions\OldFadeNewSlideTransitionManager.as"/>
<file line="135" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\motion\transitions\ScreenFadeTransitionManager.as"/>
<codefragment>
<![CDATA[
				this._activeTransition = new Tween(oldScreen, this.duration, this.ease);
				this._activeTransition.fadeTo(0);
				this._activeTransition.delay = this.delay;
				this._activeTransition.onComplete = activeTransition_onComplete;
				Starling.juggler.add(this._activeTransition);
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="51">
<file line="37" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<file line="34" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\VerticalLayout.as"/>
<codefragment>
<![CDATA[
		public static const VERTICAL_ALIGN_TOP:String = "top";

		/**
		 * If the total item height is smaller than the height of the bounds,
		 * the items will be aligned to the middle.
		 */
		public static const VERTICAL_ALIGN_MIDDLE:String = "middle";

		/**
		 * If the total item height is smaller than the height of the bounds,
		 * the items will be aligned to the bottom.
		 */
		public static const VERTICAL_ALIGN_BOTTOM:String = "bottom";

		/**
		 * The items will be aligned to the left of the bounds.
		 */
		public static const HORIZONTAL_ALIGN_LEFT:String = "left";

		/**
		 * The items will be aligned to the center of the bounds.
		 */
		public static const HORIZONTAL_ALIGN_CENTER:String = "center";

		/**
		 * The items will be aligned to the right of the bounds.
		 */
		public static const HORIZONTAL_ALIGN_RIGHT:String = "right";

		/**
		 * The items will fill the width of the bounds.
		 */
		public static const HORIZONTAL_ALIGN_JUSTIFY:String = "justify";
]]>
</codefragment>
</duplication>
<duplication lines="35" tokens="51">
<file line="175" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\TextFieldTextEditor.as"/>
<file line="156" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\TextFieldTextRenderer.as"/>
<codefragment>
<![CDATA[
			this.invalidate(INVALIDATION_FLAG_DATA);
		}

		/**
		 * @private
		 */
		protected var _textFormat:TextFormat;

		/**
		 * The font and styles used to draw the text.
		 *
		 * @see flash.text.TextFormat
		 */
		public function get textFormat():TextFormat
		{
			return this._textFormat;
		}

		/**
		 * @private
		 */
		public function set textFormat(value:TextFormat):void
		{
			if(this._textFormat == value)
			{
				return;
			}
			this._textFormat = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _styleSheet:StyleSheet;
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="51">
<file line="1150" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<file line="564" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\ListDataViewPort.as"/>
<codefragment>
<![CDATA[
		private function refreshOneItemRendererStyles(renderer:IListItemRenderer):void
		{
			const displayRenderer:DisplayObject = DisplayObject(renderer);
			for(var propertyName:String in this._itemRendererProperties)
			{
				if(displayRenderer.hasOwnProperty(propertyName))
				{
					var propertyValue:Object = this._itemRendererProperties[propertyName];
					displayRenderer[propertyName] = propertyValue;
				}
			}
		}

		private function refreshSelection():void
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="51">
<file line="262" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TextInput.as"/>
<file line="793" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\renderers\DefaultGroupedListHeaderOrFooterRenderer.as"/>
<codefragment>
<![CDATA[
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _backgroundDisabledSkin:DisplayObject;

		/**
		 * A background to display when the component is disabled.
		 */
		public function get backgroundDisabledSkin():DisplayObject
		{
			return this._backgroundDisabledSkin;
		}

		/**
		 * @private
		 */
		public function set backgroundDisabledSkin(value:DisplayObject):void
		{
			if(this._backgroundDisabledSkin == value)
			{
				return;
			}

			if(this._backgroundDisabledSkin && this._backgroundDisabledSkin != this._backgroundSkin)
]]>
</codefragment>
</duplication>
<duplication lines="7" tokens="51">
<file line="174" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TabBar.as"/>
<file line="320" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<codefragment>
<![CDATA[
				this._dataProvider.addEventListener(CollectionEventType.RESET, dataProvider_resetHandler);
				this._dataProvider.addEventListener(CollectionEventType.ADD_ITEM, dataProvider_addItemHandler);
				this._dataProvider.addEventListener(CollectionEventType.REMOVE_ITEM, dataProvider_removeItemHandler);
				this._dataProvider.addEventListener(CollectionEventType.REPLACE_ITEM, dataProvider_replaceItemHandler);
				this._dataProvider.addEventListener(CollectionEventType.UPDATE_ITEM, dataProvider_updateItemHandler);
			}
			this.invalidate(INVALIDATION_FLAG_DATA);
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="51">
<file line="1155" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Scroller.as"/>
<file line="262" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TextInput.as"/>
<codefragment>
<![CDATA[
			this.invalidate(INVALIDATION_FLAG_SKIN);
		}

		/**
		 * @private
		 */
		protected var _backgroundDisabledSkin:DisplayObject;

		/**
		 * A background to display when the header is disabled.
		 */
		public function get backgroundDisabledSkin():DisplayObject
		{
			return this._backgroundDisabledSkin;
		}

		/**
		 * @private
		 */
		public function set backgroundDisabledSkin(value:DisplayObject):void
		{
			if(this._backgroundDisabledSkin == value)
			{
				return;
			}

			if(this._backgroundDisabledSkin && this._backgroundDisabledSkin != this._backgroundSkin &&
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="51">
<file line="148" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollText.as"/>
<file line="175" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\TextFieldTextEditor.as"/>
<codefragment>
<![CDATA[
			this.dispatchEventWith(Event.CHANGE);
		}

		/**
		 * @private
		 */
		protected var _textFormat:TextFormat;

		/**
		 * The format of the text, such as font and styles.
		 */
		public function get textFormat():TextFormat
		{
			return this._textFormat;
		}

		/**
		 * @private
		 */
		public function set textFormat(value:TextFormat):void
		{
			if(this._textFormat == value)
			{
				return;
			}
			this._textFormat = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _embedFonts:Boolean = false;
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="51">
<file line="64" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="62" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<codefragment>
<![CDATA[
		private static const HELPER_POINT:Point = new Point();

		/**
		 * @private
		 */
		private static const HELPER_TOUCHES_VECTOR:Vector.<Touch> = new <Touch>[];

		/**
		 * @private
		 */
		protected static const INVALIDATION_FLAG_THUMB_FACTORY:String = "thumbFactory";

		/**
		 * @private
		 */
		protected static const INVALIDATION_FLAG_MINIMUM_TRACK_FACTORY:String = "minimumTrackFactory";

		/**
		 * @private
		 */
		protected static const INVALIDATION_FLAG_MAXIMUM_TRACK_FACTORY:String = "maximumTrackFactory";
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="51">
<file line="196" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ProgressBar.as"/>
<file line="262" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TextInput.as"/>
<codefragment>
<![CDATA[
			this.invalidate(INVALIDATION_FLAG_SKIN);
		}

		/**
		 * @private
		 */
		protected var _backgroundDisabledSkin:DisplayObject;

		/**
		 * A background to display when the header is disabled.
		 */
		public function get backgroundDisabledSkin():DisplayObject
		{
			return this._backgroundDisabledSkin;
		}

		/**
		 * @private
		 */
		public function set backgroundDisabledSkin(value:DisplayObject):void
		{
			if(this._backgroundDisabledSkin == value)
			{
				return;
			}

			if(this._backgroundDisabledSkin && this._backgroundDisabledSkin != this._backgroundSkin &&
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="51">
<file line="273" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\PageIndicator.as"/>
<file line="346" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<codefragment>
<![CDATA[
		[Inspectable(type="String",enumeration="top,middle,bottom")]
		/**
		 * If the total column height is less than the bounds, the items in the
		 * column can be aligned vertically.
		 */
		public function get verticalAlign():String
		{
			return this._verticalAlign;
		}

		/**
		 * @private
		 */
		public function set verticalAlign(value:String):void
		{
			if(this._verticalAlign == value)
			{
				return;
			}
			this._verticalAlign = value;
			this.dispatchEventWith(Event.CHANGE);
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="51">
<file line="160" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\List.as"/>
<file line="144" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TabBar.as"/>
<codefragment>
<![CDATA[
		protected var _dataProvider:ListCollection;

		/**
		 * The collection of data to be displayed with tabs.
		 *
		 * @see #tabInitializer
		 */
		public function get dataProvider():ListCollection
		{
			return this._dataProvider;
		}

		/**
		 * @private
		 */
		public function set dataProvider(value:ListCollection):void
		{
			if(this._dataProvider == value)
			{
				return;
			}
			if(this._dataProvider)
			{
				this._dataProvider.removeEventListener(CollectionEventType.ADD_ITEM, dataProvider_addItemHandler);
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="51">
<file line="540" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Header.as"/>
<file line="262" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TextInput.as"/>
<codefragment>
<![CDATA[
			this.invalidate(INVALIDATION_FLAG_SKIN);
		}

		/**
		 * @private
		 */
		protected var _backgroundDisabledSkin:DisplayObject;

		/**
		 * A background to display when the header is disabled.
		 */
		public function get backgroundDisabledSkin():DisplayObject
		{
			return this._backgroundDisabledSkin;
		}

		/**
		 * @private
		 */
		public function set backgroundDisabledSkin(value:DisplayObject):void
		{
			if(this._backgroundDisabledSkin == value)
			{
				return;
			}

			if(this._backgroundDisabledSkin && this._backgroundDisabledSkin != this._backgroundSkin &&
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="51">
<file line="469" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Header.as"/>
<file line="346" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\TiledColumnsLayout.as"/>
<codefragment>
<![CDATA[
		[Inspectable(type="String",enumeration="top,middle,bottom")]
		/**
		 * If the total column height is less than the bounds, the items in the
		 * column can be aligned vertically.
		 */
		public function get verticalAlign():String
		{
			return this._verticalAlign;
		}

		/**
		 * @private
		 */
		public function set verticalAlign(value:String):void
		{
			if(this._verticalAlign == value)
			{
				return;
			}
			this._verticalAlign = value;
			this.dispatchEventWith(Event.CHANGE);
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="51">
<file line="406" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Button.as"/>
<file line="270" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\layout\HorizontalLayout.as"/>
<codefragment>
<![CDATA[
		[Inspectable(type="String",enumeration="left,center,right")]
		/**
		 * If the total item width is less than the bounds, the positions of
		 * the items can be aligned horizontally.
		 */
		public function get horizontalAlign():String
		{
			return this._horizontalAlign;
		}

		/**
		 * @private
		 */
		public function set horizontalAlign(value:String):void
		{
			if(this._horizontalAlign == value)
			{
				return;
			}
			this._horizontalAlign = value;
			this.dispatchEventWith(Event.CHANGE);
]]>
</codefragment>
</duplication>
<duplication lines="6" tokens="51">
<file line="42" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\sLinkedInsertionSortCmp.as"/>
<file line="57" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\sLinkedInsertionSortCmp.as"/>
<codefragment>
<![CDATA[
			if (k <= 1) return h;
		
			for (i = 1; i < k; i++)
			{
				val = a[i]; j = i;
				while ((j > 0) && (cmp(a[int(j - 1)], val) > 0))
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="51">
<file line="44" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\sLinkedInsertionSort.as"/>
<file line="62" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\sort\sLinkedInsertionSortCmp.as"/>
<codefragment>
<![CDATA[
				while ((j > 0) && (cmp(a[int(j - 1)], val) > 0))
				{
					a[j] = a[int(j - 1)];
					j--;
				}
				a[j] = val;
			}
		}
		
		n = h, i = 0;
		while (n)
		{
			n.data = a[i++];
			n = n.next;
		}
		return h;
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="51">
<file line="196" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\Heap.as"/>
<file line="158" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\PriorityQueue.as"/>
<codefragment>
<![CDATA[
		public function contains(obj:*):Boolean
		{
			for (var i:int = 1; i <= _count; i++)
			{
				if (_heap[i] === obj)
					return true;
			}
			return false;
		}
		
		/**
		 * @inheritDoc
		 */
		public function clear():void
		{
			_heap = new Array(_size);
]]>
</codefragment>
</duplication>
<duplication lines="7" tokens="51">
<file line="149" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\HashTable.as"/>
<file line="199" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\de\polygonal\ds\HashTable.as"/>
<codefragment>
<![CDATA[
			var a:Array = [], list:Array, k:int = size;
			for (var i:int = 0; i < k; i++)
			{
				list = _table[i];
				var l:int = list.length; 
				
				for (var j:int = 0; j < l; j++)
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="51">
<file line="77" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\graph\searcher\BFSsearcher.as"/>
<file line="71" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\lookbackon\ds\graph\searcher\DIJKSTRAsearcher.as"/>
<codefragment>
<![CDATA[
				route[next.dst]=next.src;

				if (next.dst == dst)
				{
					src_=src;
					dst_=dst;
					route_=route;
					found_=true;
					return true;
				}

				var dsts:Array=graphRef_.edge(next.dst);
				for each (var e:WeightedEdge in dsts)
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="51">
<file line="357" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\views\components\ChessGasket.as"/>
<file line="159" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\views\components\VisualElement.as"/>
<codefragment>
<![CDATA[
		protected function getUpStateTexture(bgColor:uint,bgAlpha:Number,borderColor:uint,borderAlpha:Number):Texture
		{
			//Temp graphic objects tests.
			//@see:http://wiki.starling-framework.org/manual/dynamic_textures
			//			Polygon
			//			var polygon:Polygon = new Polygon(50,4,Color.NAVY);
			//			polygon.x = 100;
			//			polygon.y = 100;
			//			polygon.pivotX = 0;
			//			polygon.pivotY = 0;
			//			polygon.rotation = 30;
			//			addChild(polygon);
			//Draw a circle shape
			var shape:Sprite = new Sprite();
			//			var shape:Shape = new Shape();
			shape.graphics.beginFill(bgColor,bgAlpha);
			shape.graphics.lineStyle(1,borderColor,1);
]]>
</codefragment>
</duplication>
<duplication lines="7" tokens="51">
<file line="213" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\utils\BitBoardUtil.as"/>
<file line="226" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\utils\BitBoardUtil.as"/>
<codefragment>
<![CDATA[
		public static function getWestSouthOccuipies(rowIndex:int, colIndex:int, rowMax:int, colMax:int):BitBoard
		{
			var bb:BitBoard = new BitBoard(colMax,rowMax);
			//
			for(var i:int=0;i<rowMax;i++)
			{
				if(!(rowMax-1-rowIndex)) break;
]]>
</codefragment>
</duplication>
<duplication lines="5" tokens="50">
<file line="164" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\starling\text\BitmapFont.as"/>
<file line="190" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\starling\text\BitmapFont.as"/>
<codefragment>
<![CDATA[
        public function fillQuadBatch(quadBatch:QuadBatch, width:Number, height:Number, text:String,
                                      fontSize:Number=-1, color:uint=0xffffff, 
                                      hAlign:String="center", vAlign:String="center",      
                                      autoScale:Boolean=true, 
                                      kerning:Boolean=true):void
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="50">
<file line="30" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\org\osflash\signals\natives\sets\FileReferenceSignalSet.as"/>
<file line="23" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\org\osflash\signals\natives\sets\SoundSignalSet.as"/>
<codefragment>
<![CDATA[
			return getNativeSignal(Event.ID3);
		}

		public function get ioError():NativeSignal {
			return getNativeSignal(IOErrorEvent.IO_ERROR, IOErrorEvent);
		}

		public function get open():NativeSignal {
			return getNativeSignal(Event.OPEN);
		}

		public function get progress():NativeSignal {
			return getNativeSignal(ProgressEvent.PROGRESS, ProgressEvent);
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="50">
<file line="1303" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mx\utils\ObjectUtil.as"/>
<file line="1381" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mx\utils\ObjectUtil.as"/>
<codefragment>
<![CDATA[
    private static function listCompare(a:IList, b:IList, currentDepth:int, 
                                        desiredDepth:int, refs:Dictionary):int
    {
        var result:int = 0;

        if (a.length != b.length)
        {
            if (a.length < b.length)
                result = -1;
            else
                result = 1;
        }
        else
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="50">
<file line="177" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiAd.as"/>
<file line="464" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\mochi\as3\MochiAd.as"/>
<codefragment>
<![CDATA[
            if (!MochiAd.load(options)) {
                options.ad_failed();
                options.ad_finished();
                return;
            }

            options.ad_started();

            var mc:MovieClip = clip._mochiad;
            mc["onUnload"] = function ():void {
                MochiAd._cleanup(mc);
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="50">
<file line="635" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\Scale3Image.as"/>
<file line="810" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\display\Scale9Image.as"/>
<codefragment>
<![CDATA[
					helperImage = new Image(this._textures.topLeft);
				}
				helperImage.smoothing = this._smoothing;
				helperImage.color = this._color;
			}
			else if(this._batch)
			{
				this._batch.removeFromParent(true);
				this._batch = null;
			}
		}

		/**
		 * @private
		 */
		private function flattenHandler(event:Event):void
		{
			this.validate();
]]>
</codefragment>
</duplication>
<duplication lines="8" tokens="50">
<file line="239" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\core\FocusManager.as"/>
<file line="261" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\core\FocusManager.as"/>
<codefragment>
<![CDATA[
			if(target is DisplayObjectContainer)
			{
				const container:DisplayObjectContainer = DisplayObjectContainer(target);
				const childCount:int = container.numChildren;
				for(var i:int = 0; i < childCount; i++)
				{
					var child:DisplayObject = container.getChildAt(i);
					this.clearFocusManager(child);
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="50">
<file line="259" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\TextFieldTextEditor.as"/>
<file line="116" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\TextFieldTextRenderer.as"/>
<codefragment>
<![CDATA[
		protected var _isHTML:Boolean = false;

		/**
		 * Determines if the TextField should display the text as HTML or not.
		 *
		 * @see flash.text.TextField#htmlText
		 */
		public function get isHTML():Boolean
		{
			return this._isHTML;
		}

		/**
		 * @private
		 */
		public function set isHTML(value:Boolean):void
		{
			if(this._isHTML == value)
			{
				return;
			}
			this._isHTML = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="50">
<file line="43" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\StageTextTextEditor.as"/>
<file line="39" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\TextFieldTextEditor.as"/>
<codefragment>
<![CDATA[
	[Event(name="change",type="starling.events.Event")]

	/**
	 * Dispatched when the user presses the Enter key while the editor has focus.
	 *
	 * @eventType feathers.events.FeathersEventType.ENTER
	 */
	[Event(name="enter",type="starling.events.Event")]

	/**
	 * Dispatched when the text editor receives focus.
	 *
	 * @eventType feathers.events.FeathersEventType.FOCUS_IN
	 */
	[Event(name="focusIn",type="starling.events.Event")]

	/**
	 * Dispatched when the text editor loses focus.
	 *
	 * @eventType feathers.events.FeathersEventType.FOCUS_OUT
	 */
	[Event(name="focusOut",type="starling.events.Event")]

	/**
	 * A Feathers text editor that uses the native <code>TextField</code> class
	 * set to <code>TextInputType.INPUT</code>.
	 *
	 * @see http://wiki.starling-framework.org/feathers/text-editors
	 * @see flash.text.TextField
	 */
	public class TextFieldTextEditor extends FeathersControl implements ITextEditor
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="50">
<file line="2041" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\GroupedListDataViewPort.as"/>
<file line="837" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\ListDataViewPort.as"/>
<codefragment>
<![CDATA[
			const renderer:IListItemRenderer = IListItemRenderer(this._rendererMap[item]);
			if(!renderer)
			{
				return;
			}
			renderer.data = null;
			renderer.data = item;
		}

		private function layout_changeHandler(event:Event):void
		{
			if(this._ignoreLayoutChanges)
			{
				return;
			}
			this.invalidate(INVALIDATION_FLAG_SCROLL);
			this.invalidateParent();
		}

		private function renderer_resizeHandler(event:Event):void
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="50">
<file line="673" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TextInput.as"/>
<file line="660" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\TextFieldTextEditor.as"/>
<codefragment>
<![CDATA[
				this.setFocus();
			}

			if(this._pendingSelectionStartIndex >= 0)
			{
				const startIndex:int = this._pendingSelectionStartIndex;
				const endIndex:int = this._pendingSelectionEndIndex;
				this._pendingSelectionStartIndex = -1;
				this._pendingSelectionEndIndex = -1;
				this.selectRange(startIndex, endIndex);
			}
		}

		/**
		 * @private
		 */
		protected function refreshSnapshot():void
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="50">
<file line="191" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TextInput.as"/>
<file line="763" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\renderers\DefaultGroupedListHeaderOrFooterRenderer.as"/>
<codefragment>
<![CDATA[
		protected var _backgroundSkin:DisplayObject;

		/**
		 * A background to behind the component's content.
		 */
		public function get backgroundSkin():DisplayObject
		{
			return this._backgroundSkin;
		}

		/**
		 * @private
		 */
		public function set backgroundSkin(value:DisplayObject):void
		{
			if(this._backgroundSkin == value)
			{
				return;
			}

			if(this._backgroundSkin && this._backgroundSkin != this._backgroundDisabledSkin)
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="50">
<file line="32" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TextInput.as"/>
<file line="43" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\StageTextTextEditor.as"/>
<codefragment>
<![CDATA[
	[Event(name="change",type="starling.events.Event")]

	/**
	 * Dispatched when the user presses the Enter key while the editor has focus.
	 *
	 * @eventType feathers.events.FeathersEventType.ENTER
	 */
	[Event(name="enter",type="starling.events.Event")]

	/**
	 * Dispatched when the text editor receives focus.
	 *
	 * @eventType feathers.events.FeathersEventType.FOCUS_IN
	 */
	[Event(name="focusIn",type="starling.events.Event")]

	/**
	 * Dispatched when the text editor loses focus.
	 *
	 * @eventType feathers.events.FeathersEventType.FOCUS_OUT
	 */
	[Event(name="focusOut",type="starling.events.Event")]

	/**
	 * A Feathers text editor that uses the native <code>StageText</code> class
	 * in AIR, and the custom <code>StageTextField</code> class (that simulates
	 * <code>StageText</code>) in Flash Player.
	 *
	 * @see http://wiki.starling-framework.org/feathers/text-editors
	 * @see flash.text.StageText
	 * @see feathers.text.StageTextField
	 */
	public class StageTextTextEditor extends FeathersControl implements ITextEditor
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="50">
<file line="1125" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Scroller.as"/>
<file line="191" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TextInput.as"/>
<codefragment>
<![CDATA[
		protected var _backgroundSkin:DisplayObject;

		/**
		 * A display object displayed behind the header's content.
		 */
		public function get backgroundSkin():DisplayObject
		{
			return this._backgroundSkin;
		}

		/**
		 * @private
		 */
		public function set backgroundSkin(value:DisplayObject):void
		{
			if(this._backgroundSkin == value)
			{
				return;
			}

			if(this._backgroundSkin && this._backgroundSkin != this._backgroundDisabledSkin &&
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="50">
<file line="125" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollText.as"/>
<file line="116" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\text\TextFieldTextRenderer.as"/>
<codefragment>
<![CDATA[
		protected var _isHTML:Boolean = false;

		/**
		 * Determines if the TextField should display the text as HTML or not.
		 *
		 * @see flash.text.TextField#htmlText
		 */
		public function get isHTML():Boolean
		{
			return this._isHTML;
		}

		/**
		 * @private
		 */
		public function set isHTML(value:Boolean):void
		{
			if(this._isHTML == value)
			{
				return;
			}
			this._isHTML = value;
			this.invalidate(INVALIDATION_FLAG_DATA);
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="50">
<file line="1976" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ScrollBar.as"/>
<file line="1535" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Slider.as"/>
<codefragment>
<![CDATA[
			this.stage.removeEventListener(KeyboardEvent.KEY_DOWN, stage_keyDownHandler);
		}
		
		/**
		 * @private
		 */
		protected function track_touchHandler(event:TouchEvent):void
		{
			if(!this._isEnabled)
			{
				this._touchPointID = -1;
				return;
			}
			const touches:Vector.<Touch> = event.getTouches(DisplayObject(event.currentTarget), null, HELPER_TOUCHES_VECTOR);
			if(this._touchPointID >= 0)
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="50">
<file line="444" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\ProgressBar.as"/>
<file line="681" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\supportClasses\TextFieldViewPort.as"/>
<codefragment>
<![CDATA[
		private var _paddingLeft:Number = 0;

		public function get paddingLeft():Number
		{
			return this._paddingLeft;
		}

		public function set paddingLeft(value:Number):void
		{
			if(this._paddingLeft == value)
			{
				return;
			}
			this._paddingLeft = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		override public function set visible(value:Boolean):void
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="50">
<file line="509" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Header.as"/>
<file line="191" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\TextInput.as"/>
<codefragment>
<![CDATA[
		protected var _backgroundSkin:DisplayObject;

		/**
		 * A display object displayed behind the header's content.
		 */
		public function get backgroundSkin():DisplayObject
		{
			return this._backgroundSkin;
		}

		/**
		 * @private
		 */
		public function set backgroundSkin(value:DisplayObject):void
		{
			if(this._backgroundSkin == value)
			{
				return;
			}

			if(this._backgroundSkin && this._backgroundSkin != this._backgroundDisabledSkin &&
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="50">
<file line="411" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\Button.as"/>
<file line="198" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\feathers\controls\renderers\DefaultGroupedListHeaderOrFooterRenderer.as"/>
<codefragment>
<![CDATA[
		public function get horizontalAlign():String
		{
			return this._horizontalAlign;
		}

		/**
		 * @private
		 */
		public function set horizontalAlign(value:String):void
		{
			if(this._horizontalAlign == value)
			{
				return;
			}
			this._horizontalAlign = value;
			this.invalidate(INVALIDATION_FLAG_STYLES);
		}

		/**
		 * @private
		 */
		protected var _verticalAlign:String = VERTICAL_ALIGN_MIDDLE;
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="50">
<file line="259" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\suckatmath\machinelearning\genetic\core\GeneticEngine.as"/>
<file line="327" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\suckatmath\machinelearning\genetic\core\GeneticEngine.as"/>
<codefragment>
<![CDATA[
					genome = matingPool[Math.floor(rand()*matingPool.length)].clone();
				}
				if (_mutate) {
					genome = genome.mutate(_mutateProb);
				}
				//use factory to create new Evolvable from new Genome
				newPop.push(factory.makeEvolvable(genome));
			}
			for (i = 0; i < numNewPerGeneration; i++) {
				newPop.push(factory.makeRandomEvolvable());
]]>
</codefragment>
</duplication>
<duplication lines="10" tokens="50">
<file line="191" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\views\screens\HandshakeScreen.as"/>
<file line="133" path="C:\Users\yangboz\git\godpaper\TheKnightErrant\src\com\godpaper\as3\views\screens\SettingsScreen.as"/>
<codefragment>
<![CDATA[
			const hLayout:HorizontalLayout = new HorizontalLayout();
			hLayout.gap = 5;
			hLayout.paddingTop = 10;
			hLayout.paddingRight = 10;
			hLayout.paddingBottom = 10;
			hLayout.paddingLeft = 10;
			hLayout.horizontalAlign = HorizontalLayout.HORIZONTAL_ALIGN_CENTER;
			hLayout.verticalAlign = VerticalLayout.VERTICAL_ALIGN_MIDDLE;
			//language form
			this._form_language = new ScrollContainer();
]]>
</codefragment>
</duplication>
</pmd-cpd>